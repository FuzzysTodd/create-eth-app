{
	"compiler": {
		"version": "0.8.28-nightly.2024.10.2+commit.256e9528"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "Empty",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "ProposalCanceled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "proposer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address[]",
						"name": "targets",
						"type": "address[]"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					},
					{
						"indexed": false,
						"internalType": "string[]",
						"name": "signatures",
						"type": "string[]"
					},
					{
						"indexed": false,
						"internalType": "bytes[]",
						"name": "calldatas",
						"type": "bytes[]"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "startBlock",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "endBlock",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "description",
						"type": "string"
					}
				],
				"name": "ProposalCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "ProposalExecuted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "eta",
						"type": "uint256"
					}
				],
				"name": "ProposalQueued",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "oldTimelock",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newTimelock",
						"type": "address"
					}
				],
				"name": "TimelockChange",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "voter",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "support",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "weight",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "reason",
						"type": "string"
					}
				],
				"name": "VoteCast",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "voter",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "support",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "weight",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "reason",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "params",
						"type": "bytes"
					}
				],
				"name": "VoteCastWithParams",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "BALLOT_TYPEHASH",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "COUNTING_MODE",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "EXTENDED_BALLOT_TYPEHASH",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "support",
						"type": "uint8"
					}
				],
				"name": "castVote",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "support",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "castVoteBySig",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "support",
						"type": "uint8"
					},
					{
						"internalType": "string",
						"name": "reason",
						"type": "string"
					}
				],
				"name": "castVoteWithReason",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "support",
						"type": "uint8"
					},
					{
						"internalType": "string",
						"name": "reason",
						"type": "string"
					},
					{
						"internalType": "bytes",
						"name": "params",
						"type": "bytes"
					}
				],
				"name": "castVoteWithReasonAndParams",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "support",
						"type": "uint8"
					},
					{
						"internalType": "string",
						"name": "reason",
						"type": "string"
					},
					{
						"internalType": "bytes",
						"name": "params",
						"type": "bytes"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "castVoteWithReasonAndParamsBySig",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "targets",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes[]",
						"name": "calldatas",
						"type": "bytes[]"
					},
					{
						"internalType": "bytes32",
						"name": "descriptionHash",
						"type": "bytes32"
					}
				],
				"name": "execute",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "blockNumber",
						"type": "uint256"
					}
				],
				"name": "getVotes",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "blockNumber",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "params",
						"type": "bytes"
					}
				],
				"name": "getVotesWithParams",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasVoted",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "targets",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes[]",
						"name": "calldatas",
						"type": "bytes[]"
					},
					{
						"internalType": "bytes32",
						"name": "descriptionHash",
						"type": "bytes32"
					}
				],
				"name": "hashProposal",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC1155BatchReceived",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC1155Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC721Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "proposalDeadline",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "proposalEta",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "proposalSnapshot",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "proposalThreshold",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "targets",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes[]",
						"name": "calldatas",
						"type": "bytes[]"
					},
					{
						"internalType": "string",
						"name": "description",
						"type": "string"
					}
				],
				"name": "propose",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "targets",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes[]",
						"name": "calldatas",
						"type": "bytes[]"
					},
					{
						"internalType": "bytes32",
						"name": "descriptionHash",
						"type": "bytes32"
					}
				],
				"name": "queue",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "blockNumber",
						"type": "uint256"
					}
				],
				"name": "quorum",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "relay",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalId",
						"type": "uint256"
					}
				],
				"name": "state",
				"outputs": [
					{
						"internalType": "enum IGovernor.ProposalState",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "timelock",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract TimelockController",
						"name": "newTimelock",
						"type": "address"
					}
				],
				"name": "updateTimelock",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "version",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "votingDelay",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "votingPeriod",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"details": "Extension of {Governor} that binds the execution process to an instance of {TimelockController}. This adds a delay, enforced by the {TimelockController} to all successful proposal (in addition to the voting duration). The {Governor} needs the proposer (and ideally the executor) roles for the {Governor} to work properly. Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus, the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be inaccessible. WARNING: Setting up the TimelockController to have additional proposers besides the governor is very risky, as it grants them powers that they must be trusted or known not to use: 1) {onlyGovernance} functions like {relay} are available to them through the timelock, and 2) approved governance proposals can be blocked by them, effectively executing a Denial of Service attack. This risk will be mitigated in a future release. _Available since v4.3._",
			"errors": {
				"Empty()": [
					{
						"details": "An operation (e.g. {front}) couldn't be completed due to the queue being empty."
					}
				]
			},
			"events": {
				"ProposalCanceled(uint256)": {
					"details": "Emitted when a proposal is canceled."
				},
				"ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)": {
					"details": "Emitted when a proposal is created."
				},
				"ProposalExecuted(uint256)": {
					"details": "Emitted when a proposal is executed."
				},
				"TimelockChange(address,address)": {
					"details": "Emitted when the timelock controller used for proposal execution is modified."
				},
				"VoteCast(address,uint256,uint8,uint256,string)": {
					"details": "Emitted when a vote is cast without params. Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used."
				},
				"VoteCastWithParams(address,uint256,uint8,uint256,string,bytes)": {
					"details": "Emitted when a vote is cast with params. Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used. `params` are additional encoded parameters. Their intepepretation also depends on the voting module used."
				}
			},
			"kind": "dev",
			"methods": {
				"COUNTING_MODE()": {
					"details": "A description of the possible `support` values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`. There are 2 standard keys: `support` and `quorum`. - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`. - `quorum=bravo` means that only For votes are counted towards quorum. - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum. If a counting module makes use of encoded `params`, it should  include this under a `params` key with a unique name that describes the behavior. For example: - `params=fractional` might refer to a scheme where votes are divided fractionally between for/against/abstain. - `params=erc721` might refer to a scheme where specific NFTs are delegated to vote. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`] JavaScript class."
				},
				"castVote(uint256,uint8)": {
					"details": "See {IGovernor-castVote}."
				},
				"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {
					"details": "See {IGovernor-castVoteBySig}."
				},
				"castVoteWithReason(uint256,uint8,string)": {
					"details": "See {IGovernor-castVoteWithReason}."
				},
				"castVoteWithReasonAndParams(uint256,uint8,string,bytes)": {
					"details": "See {IGovernor-castVoteWithReasonAndParams}."
				},
				"castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)": {
					"details": "See {IGovernor-castVoteWithReasonAndParamsBySig}."
				},
				"constructor": {
					"details": "Set the timelock."
				},
				"execute(address[],uint256[],bytes[],bytes32)": {
					"details": "See {IGovernor-execute}."
				},
				"getVotes(address,uint256)": {
					"details": "See {IGovernor-getVotes}."
				},
				"getVotesWithParams(address,uint256,bytes)": {
					"details": "See {IGovernor-getVotesWithParams}."
				},
				"hasVoted(uint256,address)": {
					"details": "Returns whether `account` has cast a vote on `proposalId`."
				},
				"hashProposal(address[],uint256[],bytes[],bytes32)": {
					"details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the ABI encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors across multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."
				},
				"name()": {
					"details": "See {IGovernor-name}."
				},
				"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
					"details": "See {IERC1155Receiver-onERC1155BatchReceived}."
				},
				"onERC1155Received(address,address,uint256,uint256,bytes)": {
					"details": "See {IERC1155Receiver-onERC1155Received}."
				},
				"onERC721Received(address,address,uint256,bytes)": {
					"details": "See {IERC721Receiver-onERC721Received}."
				},
				"proposalDeadline(uint256)": {
					"details": "See {IGovernor-proposalDeadline}."
				},
				"proposalEta(uint256)": {
					"details": "Public accessor to check the eta of a queued proposal"
				},
				"proposalSnapshot(uint256)": {
					"details": "See {IGovernor-proposalSnapshot}."
				},
				"proposalThreshold()": {
					"details": "Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_."
				},
				"propose(address[],uint256[],bytes[],string)": {
					"details": "See {IGovernor-propose}."
				},
				"queue(address[],uint256[],bytes[],bytes32)": {
					"details": "Function to queue a proposal to the timelock."
				},
				"quorum(uint256)": {
					"details": "Minimum number of cast voted required for a proposal to be successful. Note: The `blockNumber` parameter corresponds to the snapshot used for counting vote. This allows to scale the quorum depending on values such as the totalSupply of a token at this block (see {ERC20Votes})."
				},
				"relay(address,uint256,bytes)": {
					"details": "Relays a transaction or function call to an arbitrary target. In cases where the governance executor is some contract other than the governor itself, like when using a timelock, this function can be invoked in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake. Note that if the executor is simply the governor itself, use of `relay` is redundant."
				},
				"state(uint256)": {
					"details": "Overridden version of the {Governor-state} function with added support for the `Queued` status."
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"timelock()": {
					"details": "Public accessor to check the address of the timelock"
				},
				"updateTimelock(address)": {
					"details": "Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates must be proposed, scheduled, and executed through governance proposals. CAUTION: It is not recommended to change the timelock while there are other queued governance proposals."
				},
				"version()": {
					"details": "See {IGovernor-version}."
				},
				"votingDelay()": {
					"details": "Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, or delegate it, before the voting of a proposal starts."
				},
				"votingPeriod()": {
					"details": "Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"COUNTING_MODE()": {
					"notice": "module:voting"
				},
				"hasVoted(uint256,address)": {
					"notice": "module:voting"
				},
				"quorum(uint256)": {
					"notice": "module:user-config"
				},
				"votingDelay()": {
					"notice": "module:user-config"
				},
				"votingPeriod()": {
					"notice": "module:user-config"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"0x/@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol": "GovernorTimelockControl"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 5000000
		},
		"remappings": []
	},
	"sources": {
		"0x/@openzeppelin/contracts/access/AccessControl.sol": {
			"keccak256": "0xbebc76f4f077c47c636db59b7842d9a413e2d388db52d440cef81794aee624c0",
			"license": "MIT",
			"urls": [
				"bzz-raw://1caa0ff5269c4fa3705a1a2b3a51a0a03bae9aea3a7b8a4bde1da0e08c5597b5",
				"dweb:/ipfs/QmYTUbmWgQYmcgrHGVRrLN4uoihanob63QcFtd6MWxTR6g"
			]
		},
		"0x/@openzeppelin/contracts/access/IAccessControl.sol": {
			"keccak256": "0xf8483678b8baa4c82ecceb6807e3665ce4b8916a7b60cf351a3dc05497b595d7",
			"license": "MIT",
			"urls": [
				"bzz-raw://72cf17d3e83bec924b5997f279a7b2a9b97a4d3b994d19ee70061cd5d7de7a95",
				"dweb:/ipfs/QmSGyV1DHE3j3XBX7dQyuTqBUg4vrkbyFcmHHP9HVtZsNE"
			]
		},
		"0x/@openzeppelin/contracts/governance/Governor.sol": {
			"keccak256": "0xaf5232acd1fa4137e2d9636e93366f0d93e84e616cf90304b6aec3e2d911ef5f",
			"license": "MIT",
			"urls": [
				"bzz-raw://f0f9a400cb821acea87f5e49979af55e6a8e05bdd2d55f856ddcdd651a00d212",
				"dweb:/ipfs/QmRtKyaxF2KCtBb6BK4LgtogyWmeULqDU3s6u5C9iPF3qh"
			]
		},
		"0x/@openzeppelin/contracts/governance/IGovernor.sol": {
			"keccak256": "0xafbaf2de8b114f840e0c6d07b14d75fd706b1283584c967ce052384e806b86fb",
			"license": "MIT",
			"urls": [
				"bzz-raw://e7b3fc44920b68b9cb155202409ade9f1cb732c9a0620a50c4d22e76e2d10503",
				"dweb:/ipfs/QmPwL6awJ5xckXw6oEZxnMCsrqL9skdqV8nK5dupWYHoni"
			]
		},
		"0x/@openzeppelin/contracts/governance/TimelockController.sol": {
			"keccak256": "0x9c5ee10d469cbe7d4b12672b6efe8238e7e9a0f84e4a913274ea5a3cab3f800b",
			"license": "MIT",
			"urls": [
				"bzz-raw://ecc55447db6acef4de05f9e7ed2a8ee2aea1aeeb9f43710e7343fa370bd99d8b",
				"dweb:/ipfs/QmbSPzWBwzRhXqaMY6RfbGignZg8UGH21wG79iia5kHbGf"
			]
		},
		"0x/@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol": {
			"keccak256": "0xc565f81d17ab5ea35e2b2cb8a6d862d2ae8ddcf5a9d00c175af81a9d5603e590",
			"license": "MIT",
			"urls": [
				"bzz-raw://d24817027c2f0838f52f1ca4868b8d528890355fb84e4c5ad26e2ff2a5e72a49",
				"dweb:/ipfs/QmYzpvp3Pp3it9dbiDtvqTnLcc3upkMsbpQoDFT61auqf6"
			]
		},
		"0x/@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol": {
			"keccak256": "0xa9889fb5e5afd9938857eca8efa6de5fdaa3589f55c7ef06d3db6f29b7c58d96",
			"license": "MIT",
			"urls": [
				"bzz-raw://89a0b0f7dbcda1ba0d0b6bf3656ba36d68cbdd9d4e69ff9c3d7626dc53f77c76",
				"dweb:/ipfs/QmZzYdeDyfs5iS2dAj369WAESyXJwqkp2J6jxeaxA5FDyU"
			]
		},
		"0x/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
			"keccak256": "0xf3ace5cecb8b13ba6e9e8d5f954023a4a9d750d45aa7a64ef6d2541c4807ffe4",
			"license": "MIT",
			"urls": [
				"bzz-raw://c151c55ea0b2bd1f9410bccf788dde5f6e3fca1e299f1f1efc24f935a9b89f86",
				"dweb:/ipfs/QmSSYiLKqT7gUdbTxVggejfHpgoZdW8K5kP7QA5PXyMT42"
			]
		},
		"0x/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0x70b48a0bac1e98447d96e0c172297da1962eb514e5b9a83ff495e9cf2c79bbc7",
			"license": "MIT",
			"urls": [
				"bzz-raw://8f75d587d89b8617294409492153cd42908f1cc7e45109af9987c10074422477",
				"dweb:/ipfs/QmWdxxyXTS1fSjAbD2uNFbNhsW7bBkoEb8UiLn2cVJAt2r"
			]
		},
		"0x/@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0x95ac774ad7255fe166717c0e5c2685e988ed6dbf420ba396efe49fd8a739c37e",
			"license": "MIT",
			"urls": [
				"bzz-raw://c4ab243701eaeb85434f2e7886666747a4f270163cfda04e5aa0d261e7e5fb82",
				"dweb:/ipfs/QmYSDvLDY5UMdGqtJJPWVxpbxnAZBiN5SH1oXoUc5V16RK"
			]
		},
		"0x/@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x263c3fa3173e8e8756bcd224dd3b8f4ee3c4a34d1cc5bdec3cc6391bb103a51a",
			"license": "MIT",
			"urls": [
				"bzz-raw://8e5e46024fbc3d6d36ab7af1aa2ac42339e55aae2ae91ffdd50efb14e2e0749f",
				"dweb:/ipfs/QmY7uxSgMFo13Ju76mcCDcuMEwhF1Loa2FxdWiZj1LGjFL"
			]
		},
		"0x/@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0xffa03cb932c1d0dd09fe28d9443580ca2df950c44a1cd0b17b6b56257532264a",
			"license": "MIT",
			"urls": [
				"bzz-raw://4fd109de1d916a181ca67deed97f076251e7dcce6a0781882c33b1dbef48b1da",
				"dweb:/ipfs/QmU8VfRkf1yZFA7oXG5YWRtLF1nKuE8pNXtfQgT8W9prhh"
			]
		},
		"0x/@openzeppelin/contracts/utils/Timers.sol": {
			"keccak256": "0xbc34f63a2536554b34186f82939eba57ce00da6aa54b60872553013ce210a491",
			"license": "MIT",
			"urls": [
				"bzz-raw://34c417d177bc6f8840b5f29f4b4a3f2162c4f82b84252f3a10f822ee1c496652",
				"dweb:/ipfs/QmfNXtQzmYgHpBEp2MEJx5WYCF9A7eUiLRwiVH7BwNwn7S"
			]
		},
		"0x/@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
			"keccak256": "0xae4722d439ad19e0e2f43bace85781b7324d46974fae114d6b3f71ad9d664cc5",
			"license": "MIT",
			"urls": [
				"bzz-raw://7a3fdd78813cd5436637b490f3d6b96e0a34cafe9c3f8e881ab1d908b5057fda",
				"dweb:/ipfs/QmV6NKgxShDi64RmEt7uwwawk7xTvzfCsnHHcxrKxCtXfd"
			]
		},
		"0x/@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
			"keccak256": "0x3f7a773b88f2d8af17a51f6ce97e1c8d4b88520b59b1f330bc42853dbe5d69fd",
			"license": "MIT",
			"urls": [
				"bzz-raw://1092a81a57072e43d4b133d994f43fe976f7de8b970b9930948611a41d35f567",
				"dweb:/ipfs/QmXH5mjiiHA9VnCFz55VBS51LS2sFRPatx9nfCEfDEGEzp"
			]
		},
		"0x/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0x4bb645ff353bc23290136274f6cc2db86fadcb4bfc7ae1c4cd744acb16fa6462",
			"license": "MIT",
			"urls": [
				"bzz-raw://ecdc4a3cf074619ac5f65887af6608ac3b83db92b9954446260e36a2e6dea98a",
				"dweb:/ipfs/QmPQCm7WrCEZiHoZKWRsWiRK2mZw1Kary3fu89TPE1Bg3T"
			]
		},
		"0x/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0xb0df25fbc61d93b5ba74ce979005b15e3b414eaf10472b675fe870147d6733ac",
			"license": "MIT",
			"urls": [
				"bzz-raw://f259947485248198d61b1c389a0871ac688fc0130b5c48aecb24f7b4c5fa98bb",
				"dweb:/ipfs/QmWXiEXTBEK62vq6WjWM16WBKSpAkJ1ixCg63MbU7RRGvk"
			]
		},
		"0x/@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0xd4fe1c128b1c48cf5d4d66d1fc7b54fe96c84039d7e9a21a1450ee7b5c741e74",
			"license": "MIT",
			"urls": [
				"bzz-raw://efe28a568f5c4ab9042879b5eb9cf1ea7fc7dad12bf69eab8227529c008171a5",
				"dweb:/ipfs/QmNtmXBC8wBVgE6rHHMhr4kTHpLtLmWbLYjsRWbq3pHwJP"
			]
		},
		"0x/@openzeppelin/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0xa7f6884b6e7dc9a550b95213ff747ed3bc41bac285d170bb1462d288c8bca78b",
			"license": "MIT",
			"urls": [
				"bzz-raw://401dcd8403694e827d432504f488a62522eea477d7a5e304f80316b44a3ced9b",
				"dweb:/ipfs/QmWBEcwtnrge3gdnjRUJ7tujm5TCD4hJ8VLk74cZg78Z78"
			]
		},
		"0x/@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol": {
			"keccak256": "0x2e0ba9f11c656504f0d6481c55d48f927579960c4e00f31957c44c89eaf9606a",
			"license": "MIT",
			"urls": [
				"bzz-raw://ce30135c66d0e8b1c6a2f0e52105a2d1d833558e89041fc039d361ac1456b4cf",
				"dweb:/ipfs/QmPkAEpyLs7GFiStf7XS7yySQkipiVE4pSYCiuLtUwytzK"
			]
		}
	},
	"version": 1
}