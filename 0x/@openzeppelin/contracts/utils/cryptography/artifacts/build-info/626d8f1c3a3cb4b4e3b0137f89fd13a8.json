{
	"id": "626d8f1c3a3cb4b4e3b0137f89fd13a8",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"0x/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
				"content": "/*\n    \n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██    ██████  ███████ ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██      ██    ██\n  ██      ██    ██ ██    ██ █████   ██████  ██    ██ ██    ██ █████      ██   ██ █████   ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██       ██  ██\n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██ ██ ██████  ███████   ████\n  \n  Find any smart contract, and build your project faster: https://www.cookbook.dev\n  Twitter: https://twitter.com/cookbook_dev\n  Discord: https://discord.gg/cookbookdev\n  \n  Find this contract on Cookbook: https://www.cookbook.dev/protocols/0x?utm=code\n  */\n  \n  // SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/cryptography/EIP712.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
			},
			"0x/@openzeppelin/contracts/utils/Counters.sol": {
				"content": "/*\n    \n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██    ██████  ███████ ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██      ██    ██\n  ██      ██    ██ ██    ██ █████   ██████  ██    ██ ██    ██ █████      ██   ██ █████   ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██       ██  ██\n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██ ██ ██████  ███████   ████\n  \n  Find any smart contract, and build your project faster: https://www.cookbook.dev\n  Twitter: https://twitter.com/cookbook_dev\n  Discord: https://discord.gg/cookbookdev\n  \n  Find this contract on Cookbook: https://www.cookbook.dev/protocols/0x?utm=code\n  */\n  \n  // SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
			},
			"0x/@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
				"content": "/*\n    \n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██    ██████  ███████ ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██      ██    ██\n  ██      ██    ██ ██    ██ █████   ██████  ██    ██ ██    ██ █████      ██   ██ █████   ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██       ██  ██\n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██ ██ ██████  ███████   ████\n  \n  Find any smart contract, and build your project faster: https://www.cookbook.dev\n  Twitter: https://twitter.com/cookbook_dev\n  Discord: https://discord.gg/cookbookdev\n  \n  Find this contract on Cookbook: https://www.cookbook.dev/protocols/0x?utm=code\n  */\n  \n  // SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
			},
			"0x/@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"content": "/*\n    \n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██    ██████  ███████ ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██      ██    ██\n  ██      ██    ██ ██    ██ █████   ██████  ██    ██ ██    ██ █████      ██   ██ █████   ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██       ██  ██\n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██ ██ ██████  ███████   ████\n  \n  Find any smart contract, and build your project faster: https://www.cookbook.dev\n  Twitter: https://twitter.com/cookbook_dev\n  Discord: https://discord.gg/cookbookdev\n  \n  Find this contract on Cookbook: https://www.cookbook.dev/protocols/0x?utm=code\n  */\n  \n  // SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
			},
			"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "/*\n    \n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██    ██████  ███████ ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██      ██    ██\n  ██      ██    ██ ██    ██ █████   ██████  ██    ██ ██    ██ █████      ██   ██ █████   ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██       ██  ██\n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██ ██ ██████  ███████   ████\n  \n  Find any smart contract, and build your project faster: https://www.cookbook.dev\n  Twitter: https://twitter.com/cookbook_dev\n  Discord: https://discord.gg/cookbookdev\n  \n  Find this contract on Cookbook: https://www.cookbook.dev/protocols/0x?utm=code\n  */\n  \n  // SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
			},
			"0x/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"content": "/*\n    \n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██    ██████  ███████ ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██      ██    ██\n  ██      ██    ██ ██    ██ █████   ██████  ██    ██ ██    ██ █████      ██   ██ █████   ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██       ██  ██\n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██ ██ ██████  ███████   ████\n  \n  Find any smart contract, and build your project faster: https://www.cookbook.dev\n  Twitter: https://twitter.com/cookbook_dev\n  Discord: https://discord.gg/cookbookdev\n  \n  Find this contract on Cookbook: https://www.cookbook.dev/protocols/0x?utm=code\n  */\n  \n  // SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"0x/@openzeppelin/contracts/utils/Strings.sol": {
				"content": "/*\n    \n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██    ██████  ███████ ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██      ██    ██\n  ██      ██    ██ ██    ██ █████   ██████  ██    ██ ██    ██ █████      ██   ██ █████   ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██       ██  ██\n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██ ██ ██████  ███████   ████\n  \n  Find any smart contract, and build your project faster: https://www.cookbook.dev\n  Twitter: https://twitter.com/cookbook_dev\n  Discord: https://discord.gg/cookbookdev\n  \n  Find this contract on Cookbook: https://www.cookbook.dev/protocols/0x?utm=code\n  */\n  \n  // SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
			},
			"0x/@openzeppelin/contracts/utils/Context.sol": {
				"content": "/*\n    \n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██    ██████  ███████ ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██      ██    ██\n  ██      ██    ██ ██    ██ █████   ██████  ██    ██ ██    ██ █████      ██   ██ █████   ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██       ██  ██\n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██ ██ ██████  ███████   ████\n  \n  Find any smart contract, and build your project faster: https://www.cookbook.dev\n  Twitter: https://twitter.com/cookbook_dev\n  Discord: https://discord.gg/cookbookdev\n  \n  Find this contract on Cookbook: https://www.cookbook.dev/protocols/0x?utm=code\n  */\n  \n  // SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"0x/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "/*\n    \n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██    ██████  ███████ ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██      ██    ██\n  ██      ██    ██ ██    ██ █████   ██████  ██    ██ ██    ██ █████      ██   ██ █████   ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██       ██  ██\n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██ ██ ██████  ███████   ████\n  \n  Find any smart contract, and build your project faster: https://www.cookbook.dev\n  Twitter: https://twitter.com/cookbook_dev\n  Discord: https://discord.gg/cookbookdev\n  \n  Find this contract on Cookbook: https://www.cookbook.dev/protocols/0x?utm=code\n  */\n  \n  // SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"0x/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "/*\n    \n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██    ██████  ███████ ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██      ██    ██\n  ██      ██    ██ ██    ██ █████   ██████  ██    ██ ██    ██ █████      ██   ██ █████   ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██       ██  ██\n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██ ██ ██████  ███████   ████\n  \n  Find any smart contract, and build your project faster: https://www.cookbook.dev\n  Twitter: https://twitter.com/cookbook_dev\n  Discord: https://discord.gg/cookbookdev\n  \n  Find this contract on Cookbook: https://www.cookbook.dev/protocols/0x?utm=code\n  */\n  \n  // SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"0x/@openzeppelin/contracts/utils/math/Math.sol": {
				"content": "/*\n    \n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██    ██████  ███████ ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██      ██    ██\n  ██      ██    ██ ██    ██ █████   ██████  ██    ██ ██    ██ █████      ██   ██ █████   ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██       ██  ██\n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██ ██ ██████  ███████   ████\n  \n  Find any smart contract, and build your project faster: https://www.cookbook.dev\n  Twitter: https://twitter.com/cookbook_dev\n  Discord: https://discord.gg/cookbookdev\n  \n  Find this contract on Cookbook: https://www.cookbook.dev/protocols/0x?utm=code\n  */\n  \n  // SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":2664:14274  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  mstore(0x40, 0x80)\n    /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":3239:3352  constructor(string memory name_, string memory symbol_) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":3313:3318  name_ */\n  dup2\n    /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":3305:3310  _name */\n  0x03\n    /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":3305:3318  _name = name_ */\n  swap1\n  dup2\n  tag_6\n  swap2\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":3338:3345  symbol_ */\n  dup1\n    /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":3328:3335  _symbol */\n  0x04\n    /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":3328:3345  _symbol = symbol_ */\n  swap1\n  dup2\n  tag_8\n  swap2\n  swap1\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n    /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":3239:3352  constructor(string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":2664:14274  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  jump(tag_9)\n    /* \"#utility.yul\":7:82   */\ntag_10:\n    /* \"#utility.yul\":40:46   */\n  0x00\n    /* \"#utility.yul\":73:75   */\n  0x40\n    /* \"#utility.yul\":67:76   */\n  mload\n    /* \"#utility.yul\":57:76   */\n  swap1\n  pop\n    /* \"#utility.yul\":7:82   */\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":88:205   */\ntag_11:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  dup1\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":211:328   */\ntag_12:\n    /* \"#utility.yul\":320:321   */\n  0x00\n    /* \"#utility.yul\":317:318   */\n  dup1\n    /* \"#utility.yul\":310:322   */\n  revert\n    /* \"#utility.yul\":334:451   */\ntag_13:\n    /* \"#utility.yul\":443:444   */\n  0x00\n    /* \"#utility.yul\":440:441   */\n  dup1\n    /* \"#utility.yul\":433:445   */\n  revert\n    /* \"#utility.yul\":457:574   */\ntag_14:\n    /* \"#utility.yul\":566:567   */\n  0x00\n    /* \"#utility.yul\":563:564   */\n  dup1\n    /* \"#utility.yul\":556:568   */\n  revert\n    /* \"#utility.yul\":580:682   */\ntag_15:\n    /* \"#utility.yul\":621:627   */\n  0x00\n    /* \"#utility.yul\":672:674   */\n  0x1f\n    /* \"#utility.yul\":668:675   */\n  not\n    /* \"#utility.yul\":663:665   */\n  0x1f\n    /* \"#utility.yul\":656:661   */\n  dup4\n    /* \"#utility.yul\":652:666   */\n  add\n    /* \"#utility.yul\":648:676   */\n  and\n    /* \"#utility.yul\":638:676   */\n  swap1\n  pop\n    /* \"#utility.yul\":580:682   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":688:868   */\ntag_16:\n    /* \"#utility.yul\":736:813   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":733:734   */\n  0x00\n    /* \"#utility.yul\":726:814   */\n  mstore\n    /* \"#utility.yul\":833:837   */\n  0x41\n    /* \"#utility.yul\":830:831   */\n  0x04\n    /* \"#utility.yul\":823:838   */\n  mstore\n    /* \"#utility.yul\":857:861   */\n  0x24\n    /* \"#utility.yul\":854:855   */\n  0x00\n    /* \"#utility.yul\":847:862   */\n  revert\n    /* \"#utility.yul\":874:1155   */\ntag_17:\n    /* \"#utility.yul\":957:984   */\n  tag_51\n    /* \"#utility.yul\":979:983   */\n  dup3\n    /* \"#utility.yul\":957:984   */\n  tag_15\n  jump\t// in\ntag_51:\n    /* \"#utility.yul\":949:955   */\n  dup2\n    /* \"#utility.yul\":945:985   */\n  add\n    /* \"#utility.yul\":1087:1093   */\n  dup2\n    /* \"#utility.yul\":1075:1085   */\n  dup2\n    /* \"#utility.yul\":1072:1094   */\n  lt\n    /* \"#utility.yul\":1051:1069   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":1039:1049   */\n  dup3\n    /* \"#utility.yul\":1036:1070   */\n  gt\n    /* \"#utility.yul\":1033:1095   */\n  or\n    /* \"#utility.yul\":1030:1118   */\n  iszero\n  tag_52\n  jumpi\n    /* \"#utility.yul\":1098:1116   */\n  tag_53\n  tag_16\n  jump\t// in\ntag_53:\n    /* \"#utility.yul\":1030:1118   */\ntag_52:\n    /* \"#utility.yul\":1138:1148   */\n  dup1\n    /* \"#utility.yul\":1134:1136   */\n  0x40\n    /* \"#utility.yul\":1127:1149   */\n  mstore\n    /* \"#utility.yul\":917:1155   */\n  pop\n    /* \"#utility.yul\":874:1155   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1161:1290   */\ntag_18:\n    /* \"#utility.yul\":1195:1201   */\n  0x00\n    /* \"#utility.yul\":1222:1242   */\n  tag_55\n  tag_10\n  jump\t// in\ntag_55:\n    /* \"#utility.yul\":1212:1242   */\n  swap1\n  pop\n    /* \"#utility.yul\":1251:1284   */\n  tag_56\n    /* \"#utility.yul\":1279:1283   */\n  dup3\n    /* \"#utility.yul\":1271:1277   */\n  dup3\n    /* \"#utility.yul\":1251:1284   */\n  tag_17\n  jump\t// in\ntag_56:\n    /* \"#utility.yul\":1161:1290   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1296:1604   */\ntag_19:\n    /* \"#utility.yul\":1358:1362   */\n  0x00\n    /* \"#utility.yul\":1448:1466   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":1440:1446   */\n  dup3\n    /* \"#utility.yul\":1437:1467   */\n  gt\n    /* \"#utility.yul\":1434:1490   */\n  iszero\n  tag_58\n  jumpi\n    /* \"#utility.yul\":1470:1488   */\n  tag_59\n  tag_16\n  jump\t// in\ntag_59:\n    /* \"#utility.yul\":1434:1490   */\ntag_58:\n    /* \"#utility.yul\":1508:1537   */\n  tag_60\n    /* \"#utility.yul\":1530:1536   */\n  dup3\n    /* \"#utility.yul\":1508:1537   */\n  tag_15\n  jump\t// in\ntag_60:\n    /* \"#utility.yul\":1500:1537   */\n  swap1\n  pop\n    /* \"#utility.yul\":1592:1596   */\n  0x20\n    /* \"#utility.yul\":1586:1590   */\n  dup2\n    /* \"#utility.yul\":1582:1597   */\n  add\n    /* \"#utility.yul\":1574:1597   */\n  swap1\n  pop\n    /* \"#utility.yul\":1296:1604   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1610:1749   */\ntag_20:\n    /* \"#utility.yul\":1699:1705   */\n  dup3\n    /* \"#utility.yul\":1694:1697   */\n  dup2\n    /* \"#utility.yul\":1689:1692   */\n  dup4\n    /* \"#utility.yul\":1683:1706   */\n  mcopy\n    /* \"#utility.yul\":1740:1741   */\n  0x00\n    /* \"#utility.yul\":1731:1737   */\n  dup4\n    /* \"#utility.yul\":1726:1729   */\n  dup4\n    /* \"#utility.yul\":1722:1738   */\n  add\n    /* \"#utility.yul\":1715:1742   */\n  mstore\n    /* \"#utility.yul\":1610:1749   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1755:2189   */\ntag_21:\n    /* \"#utility.yul\":1844:1849   */\n  0x00\n    /* \"#utility.yul\":1869:1935   */\n  tag_63\n    /* \"#utility.yul\":1885:1934   */\n  tag_64\n    /* \"#utility.yul\":1927:1933   */\n  dup5\n    /* \"#utility.yul\":1885:1934   */\n  tag_19\n  jump\t// in\ntag_64:\n    /* \"#utility.yul\":1869:1935   */\n  tag_18\n  jump\t// in\ntag_63:\n    /* \"#utility.yul\":1860:1935   */\n  swap1\n  pop\n    /* \"#utility.yul\":1958:1964   */\n  dup3\n    /* \"#utility.yul\":1951:1956   */\n  dup2\n    /* \"#utility.yul\":1944:1965   */\n  mstore\n    /* \"#utility.yul\":1996:2000   */\n  0x20\n    /* \"#utility.yul\":1989:1994   */\n  dup2\n    /* \"#utility.yul\":1985:2001   */\n  add\n    /* \"#utility.yul\":2034:2037   */\n  dup5\n    /* \"#utility.yul\":2025:2031   */\n  dup5\n    /* \"#utility.yul\":2020:2023   */\n  dup5\n    /* \"#utility.yul\":2016:2032   */\n  add\n    /* \"#utility.yul\":2013:2038   */\n  gt\n    /* \"#utility.yul\":2010:2122   */\n  iszero\n  tag_65\n  jumpi\n    /* \"#utility.yul\":2041:2120   */\n  tag_66\n  tag_14\n  jump\t// in\ntag_66:\n    /* \"#utility.yul\":2010:2122   */\ntag_65:\n    /* \"#utility.yul\":2131:2183   */\n  tag_67\n    /* \"#utility.yul\":2176:2182   */\n  dup5\n    /* \"#utility.yul\":2171:2174   */\n  dup3\n    /* \"#utility.yul\":2166:2169   */\n  dup6\n    /* \"#utility.yul\":2131:2183   */\n  tag_20\n  jump\t// in\ntag_67:\n    /* \"#utility.yul\":1850:2189   */\n  pop\n    /* \"#utility.yul\":1755:2189   */\n  swap4\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2209:2564   */\ntag_22:\n    /* \"#utility.yul\":2276:2281   */\n  0x00\n    /* \"#utility.yul\":2325:2328   */\n  dup3\n    /* \"#utility.yul\":2318:2322   */\n  0x1f\n    /* \"#utility.yul\":2310:2316   */\n  dup4\n    /* \"#utility.yul\":2306:2323   */\n  add\n    /* \"#utility.yul\":2302:2329   */\n  slt\n    /* \"#utility.yul\":2292:2414   */\n  tag_69\n  jumpi\n    /* \"#utility.yul\":2333:2412   */\n  tag_70\n  tag_13\n  jump\t// in\ntag_70:\n    /* \"#utility.yul\":2292:2414   */\ntag_69:\n    /* \"#utility.yul\":2443:2449   */\n  dup2\n    /* \"#utility.yul\":2437:2450   */\n  mload\n    /* \"#utility.yul\":2468:2558   */\n  tag_71\n    /* \"#utility.yul\":2554:2557   */\n  dup5\n    /* \"#utility.yul\":2546:2552   */\n  dup3\n    /* \"#utility.yul\":2539:2543   */\n  0x20\n    /* \"#utility.yul\":2531:2537   */\n  dup7\n    /* \"#utility.yul\":2527:2544   */\n  add\n    /* \"#utility.yul\":2468:2558   */\n  tag_21\n  jump\t// in\ntag_71:\n    /* \"#utility.yul\":2459:2558   */\n  swap2\n  pop\n    /* \"#utility.yul\":2282:2564   */\n  pop\n    /* \"#utility.yul\":2209:2564   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2570:3423   */\ntag_3:\n    /* \"#utility.yul\":2669:2675   */\n  0x00\n    /* \"#utility.yul\":2677:2683   */\n  dup1\n    /* \"#utility.yul\":2726:2728   */\n  0x40\n    /* \"#utility.yul\":2714:2723   */\n  dup4\n    /* \"#utility.yul\":2705:2712   */\n  dup6\n    /* \"#utility.yul\":2701:2724   */\n  sub\n    /* \"#utility.yul\":2697:2729   */\n  slt\n    /* \"#utility.yul\":2694:2813   */\n  iszero\n  tag_73\n  jumpi\n    /* \"#utility.yul\":2732:2811   */\n  tag_74\n  tag_11\n  jump\t// in\ntag_74:\n    /* \"#utility.yul\":2694:2813   */\ntag_73:\n    /* \"#utility.yul\":2873:2874   */\n  0x00\n    /* \"#utility.yul\":2862:2871   */\n  dup4\n    /* \"#utility.yul\":2858:2875   */\n  add\n    /* \"#utility.yul\":2852:2876   */\n  mload\n    /* \"#utility.yul\":2903:2921   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":2895:2901   */\n  dup2\n    /* \"#utility.yul\":2892:2922   */\n  gt\n    /* \"#utility.yul\":2889:3006   */\n  iszero\n  tag_75\n  jumpi\n    /* \"#utility.yul\":2925:3004   */\n  tag_76\n  tag_12\n  jump\t// in\ntag_76:\n    /* \"#utility.yul\":2889:3006   */\ntag_75:\n    /* \"#utility.yul\":3030:3104   */\n  tag_77\n    /* \"#utility.yul\":3096:3103   */\n  dup6\n    /* \"#utility.yul\":3087:3093   */\n  dup3\n    /* \"#utility.yul\":3076:3085   */\n  dup7\n    /* \"#utility.yul\":3072:3094   */\n  add\n    /* \"#utility.yul\":3030:3104   */\n  tag_22\n  jump\t// in\ntag_77:\n    /* \"#utility.yul\":3020:3104   */\n  swap3\n  pop\n    /* \"#utility.yul\":2823:3114   */\n  pop\n    /* \"#utility.yul\":3174:3176   */\n  0x20\n    /* \"#utility.yul\":3163:3172   */\n  dup4\n    /* \"#utility.yul\":3159:3177   */\n  add\n    /* \"#utility.yul\":3153:3178   */\n  mload\n    /* \"#utility.yul\":3205:3223   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":3197:3203   */\n  dup2\n    /* \"#utility.yul\":3194:3224   */\n  gt\n    /* \"#utility.yul\":3191:3308   */\n  iszero\n  tag_78\n  jumpi\n    /* \"#utility.yul\":3227:3306   */\n  tag_79\n  tag_12\n  jump\t// in\ntag_79:\n    /* \"#utility.yul\":3191:3308   */\ntag_78:\n    /* \"#utility.yul\":3332:3406   */\n  tag_80\n    /* \"#utility.yul\":3398:3405   */\n  dup6\n    /* \"#utility.yul\":3389:3395   */\n  dup3\n    /* \"#utility.yul\":3378:3387   */\n  dup7\n    /* \"#utility.yul\":3374:3396   */\n  add\n    /* \"#utility.yul\":3332:3406   */\n  tag_22\n  jump\t// in\ntag_80:\n    /* \"#utility.yul\":3322:3406   */\n  swap2\n  pop\n    /* \"#utility.yul\":3124:3416   */\n  pop\n    /* \"#utility.yul\":2570:3423   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3429:3528   */\ntag_23:\n    /* \"#utility.yul\":3481:3487   */\n  0x00\n    /* \"#utility.yul\":3515:3520   */\n  dup2\n    /* \"#utility.yul\":3509:3521   */\n  mload\n    /* \"#utility.yul\":3499:3521   */\n  swap1\n  pop\n    /* \"#utility.yul\":3429:3528   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3534:3714   */\ntag_24:\n    /* \"#utility.yul\":3582:3659   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":3579:3580   */\n  0x00\n    /* \"#utility.yul\":3572:3660   */\n  mstore\n    /* \"#utility.yul\":3679:3683   */\n  0x22\n    /* \"#utility.yul\":3676:3677   */\n  0x04\n    /* \"#utility.yul\":3669:3684   */\n  mstore\n    /* \"#utility.yul\":3703:3707   */\n  0x24\n    /* \"#utility.yul\":3700:3701   */\n  0x00\n    /* \"#utility.yul\":3693:3708   */\n  revert\n    /* \"#utility.yul\":3720:4040   */\ntag_25:\n    /* \"#utility.yul\":3764:3770   */\n  0x00\n    /* \"#utility.yul\":3801:3802   */\n  0x02\n    /* \"#utility.yul\":3795:3799   */\n  dup3\n    /* \"#utility.yul\":3791:3803   */\n  div\n    /* \"#utility.yul\":3781:3803   */\n  swap1\n  pop\n    /* \"#utility.yul\":3848:3849   */\n  0x01\n    /* \"#utility.yul\":3842:3846   */\n  dup3\n    /* \"#utility.yul\":3838:3850   */\n  and\n    /* \"#utility.yul\":3869:3887   */\n  dup1\n    /* \"#utility.yul\":3859:3940   */\n  tag_84\n  jumpi\n    /* \"#utility.yul\":3925:3929   */\n  0x7f\n    /* \"#utility.yul\":3917:3923   */\n  dup3\n    /* \"#utility.yul\":3913:3930   */\n  and\n    /* \"#utility.yul\":3903:3930   */\n  swap2\n  pop\n    /* \"#utility.yul\":3859:3940   */\ntag_84:\n    /* \"#utility.yul\":3987:3989   */\n  0x20\n    /* \"#utility.yul\":3979:3985   */\n  dup3\n    /* \"#utility.yul\":3976:3990   */\n  lt\n    /* \"#utility.yul\":3956:3974   */\n  dup2\n    /* \"#utility.yul\":3953:3991   */\n  sub\n    /* \"#utility.yul\":3950:4034   */\n  tag_85\n  jumpi\n    /* \"#utility.yul\":4006:4024   */\n  tag_86\n  tag_24\n  jump\t// in\ntag_86:\n    /* \"#utility.yul\":3950:4034   */\ntag_85:\n    /* \"#utility.yul\":3771:4040   */\n  pop\n    /* \"#utility.yul\":3720:4040   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4046:4187   */\ntag_26:\n    /* \"#utility.yul\":4095:4099   */\n  0x00\n    /* \"#utility.yul\":4118:4121   */\n  dup2\n    /* \"#utility.yul\":4110:4121   */\n  swap1\n  pop\n    /* \"#utility.yul\":4141:4144   */\n  dup2\n    /* \"#utility.yul\":4138:4139   */\n  0x00\n    /* \"#utility.yul\":4131:4145   */\n  mstore\n    /* \"#utility.yul\":4175:4179   */\n  0x20\n    /* \"#utility.yul\":4172:4173   */\n  0x00\n    /* \"#utility.yul\":4162:4180   */\n  keccak256\n    /* \"#utility.yul\":4154:4180   */\n  swap1\n  pop\n    /* \"#utility.yul\":4046:4187   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4193:4286   */\ntag_27:\n    /* \"#utility.yul\":4230:4236   */\n  0x00\n    /* \"#utility.yul\":4277:4279   */\n  0x20\n    /* \"#utility.yul\":4272:4274   */\n  0x1f\n    /* \"#utility.yul\":4265:4270   */\n  dup4\n    /* \"#utility.yul\":4261:4275   */\n  add\n    /* \"#utility.yul\":4257:4280   */\n  div\n    /* \"#utility.yul\":4247:4280   */\n  swap1\n  pop\n    /* \"#utility.yul\":4193:4286   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4292:4399   */\ntag_28:\n    /* \"#utility.yul\":4336:4344   */\n  0x00\n    /* \"#utility.yul\":4386:4391   */\n  dup3\n    /* \"#utility.yul\":4380:4384   */\n  dup3\n    /* \"#utility.yul\":4376:4392   */\n  shl\n    /* \"#utility.yul\":4355:4392   */\n  swap1\n  pop\n    /* \"#utility.yul\":4292:4399   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4405:4798   */\ntag_29:\n    /* \"#utility.yul\":4474:4480   */\n  0x00\n    /* \"#utility.yul\":4524:4525   */\n  0x08\n    /* \"#utility.yul\":4512:4522   */\n  dup4\n    /* \"#utility.yul\":4508:4526   */\n  mul\n    /* \"#utility.yul\":4547:4644   */\n  tag_91\n    /* \"#utility.yul\":4577:4643   */\n  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":4566:4575   */\n  dup3\n    /* \"#utility.yul\":4547:4644   */\n  tag_28\n  jump\t// in\ntag_91:\n    /* \"#utility.yul\":4665:4704   */\n  tag_92\n    /* \"#utility.yul\":4695:4703   */\n  dup7\n    /* \"#utility.yul\":4684:4693   */\n  dup4\n    /* \"#utility.yul\":4665:4704   */\n  tag_28\n  jump\t// in\ntag_92:\n    /* \"#utility.yul\":4653:4704   */\n  swap6\n  pop\n    /* \"#utility.yul\":4737:4741   */\n  dup1\n    /* \"#utility.yul\":4733:4742   */\n  not\n    /* \"#utility.yul\":4726:4731   */\n  dup5\n    /* \"#utility.yul\":4722:4743   */\n  and\n    /* \"#utility.yul\":4713:4743   */\n  swap4\n  pop\n    /* \"#utility.yul\":4786:4790   */\n  dup1\n    /* \"#utility.yul\":4776:4784   */\n  dup7\n    /* \"#utility.yul\":4772:4791   */\n  and\n    /* \"#utility.yul\":4765:4770   */\n  dup5\n    /* \"#utility.yul\":4762:4792   */\n  or\n    /* \"#utility.yul\":4752:4792   */\n  swap3\n  pop\n    /* \"#utility.yul\":4481:4798   */\n  pop\n  pop\n    /* \"#utility.yul\":4405:4798   */\n  swap4\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4804:4881   */\ntag_30:\n    /* \"#utility.yul\":4841:4848   */\n  0x00\n    /* \"#utility.yul\":4870:4875   */\n  dup2\n    /* \"#utility.yul\":4859:4875   */\n  swap1\n  pop\n    /* \"#utility.yul\":4804:4881   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4887:4947   */\ntag_31:\n    /* \"#utility.yul\":4915:4918   */\n  0x00\n    /* \"#utility.yul\":4936:4941   */\n  dup2\n    /* \"#utility.yul\":4929:4941   */\n  swap1\n  pop\n    /* \"#utility.yul\":4887:4947   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4953:5095   */\ntag_32:\n    /* \"#utility.yul\":5003:5012   */\n  0x00\n    /* \"#utility.yul\":5036:5089   */\n  tag_96\n    /* \"#utility.yul\":5054:5088   */\n  tag_97\n    /* \"#utility.yul\":5063:5087   */\n  tag_98\n    /* \"#utility.yul\":5081:5086   */\n  dup5\n    /* \"#utility.yul\":5063:5087   */\n  tag_30\n  jump\t// in\ntag_98:\n    /* \"#utility.yul\":5054:5088   */\n  tag_31\n  jump\t// in\ntag_97:\n    /* \"#utility.yul\":5036:5089   */\n  tag_30\n  jump\t// in\ntag_96:\n    /* \"#utility.yul\":5023:5089   */\n  swap1\n  pop\n    /* \"#utility.yul\":4953:5095   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5101:5176   */\ntag_33:\n    /* \"#utility.yul\":5144:5147   */\n  0x00\n    /* \"#utility.yul\":5165:5170   */\n  dup2\n    /* \"#utility.yul\":5158:5170   */\n  swap1\n  pop\n    /* \"#utility.yul\":5101:5176   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5182:5451   */\ntag_34:\n    /* \"#utility.yul\":5292:5331   */\n  tag_101\n    /* \"#utility.yul\":5323:5330   */\n  dup4\n    /* \"#utility.yul\":5292:5331   */\n  tag_32\n  jump\t// in\ntag_101:\n    /* \"#utility.yul\":5353:5444   */\n  tag_102\n    /* \"#utility.yul\":5402:5443   */\n  tag_103\n    /* \"#utility.yul\":5426:5442   */\n  dup3\n    /* \"#utility.yul\":5402:5443   */\n  tag_33\n  jump\t// in\ntag_103:\n    /* \"#utility.yul\":5394:5400   */\n  dup5\n    /* \"#utility.yul\":5387:5391   */\n  dup5\n    /* \"#utility.yul\":5381:5392   */\n  sload\n    /* \"#utility.yul\":5353:5444   */\n  tag_29\n  jump\t// in\ntag_102:\n    /* \"#utility.yul\":5347:5351   */\n  dup3\n    /* \"#utility.yul\":5340:5445   */\n  sstore\n    /* \"#utility.yul\":5258:5451   */\n  pop\n    /* \"#utility.yul\":5182:5451   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5457:5530   */\ntag_35:\n    /* \"#utility.yul\":5502:5505   */\n  0x00\n    /* \"#utility.yul\":5457:5530   */\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":5536:5725   */\ntag_36:\n    /* \"#utility.yul\":5613:5645   */\n  tag_106\n  tag_35\n  jump\t// in\ntag_106:\n    /* \"#utility.yul\":5654:5719   */\n  tag_107\n    /* \"#utility.yul\":5712:5718   */\n  dup2\n    /* \"#utility.yul\":5704:5710   */\n  dup5\n    /* \"#utility.yul\":5698:5702   */\n  dup5\n    /* \"#utility.yul\":5654:5719   */\n  tag_34\n  jump\t// in\ntag_107:\n    /* \"#utility.yul\":5589:5725   */\n  pop\n    /* \"#utility.yul\":5536:5725   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5731:5917   */\ntag_37:\n    /* \"#utility.yul\":5791:5911   */\ntag_109:\n    /* \"#utility.yul\":5808:5811   */\n  dup2\n    /* \"#utility.yul\":5801:5806   */\n  dup2\n    /* \"#utility.yul\":5798:5812   */\n  lt\n    /* \"#utility.yul\":5791:5911   */\n  iszero\n  tag_111\n  jumpi\n    /* \"#utility.yul\":5862:5901   */\n  tag_112\n    /* \"#utility.yul\":5899:5900   */\n  0x00\n    /* \"#utility.yul\":5892:5897   */\n  dup3\n    /* \"#utility.yul\":5862:5901   */\n  tag_36\n  jump\t// in\ntag_112:\n    /* \"#utility.yul\":5835:5836   */\n  0x01\n    /* \"#utility.yul\":5828:5833   */\n  dup2\n    /* \"#utility.yul\":5824:5837   */\n  add\n    /* \"#utility.yul\":5815:5837   */\n  swap1\n  pop\n    /* \"#utility.yul\":5791:5911   */\n  jump(tag_109)\ntag_111:\n    /* \"#utility.yul\":5731:5917   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5923:6466   */\ntag_38:\n    /* \"#utility.yul\":6024:6026   */\n  0x1f\n    /* \"#utility.yul\":6019:6022   */\n  dup3\n    /* \"#utility.yul\":6016:6027   */\n  gt\n    /* \"#utility.yul\":6013:6459   */\n  iszero\n  tag_114\n  jumpi\n    /* \"#utility.yul\":6058:6096   */\n  tag_115\n    /* \"#utility.yul\":6090:6095   */\n  dup2\n    /* \"#utility.yul\":6058:6096   */\n  tag_26\n  jump\t// in\ntag_115:\n    /* \"#utility.yul\":6142:6171   */\n  tag_116\n    /* \"#utility.yul\":6160:6170   */\n  dup5\n    /* \"#utility.yul\":6142:6171   */\n  tag_27\n  jump\t// in\ntag_116:\n    /* \"#utility.yul\":6132:6140   */\n  dup2\n    /* \"#utility.yul\":6128:6172   */\n  add\n    /* \"#utility.yul\":6325:6327   */\n  0x20\n    /* \"#utility.yul\":6313:6323   */\n  dup6\n    /* \"#utility.yul\":6310:6328   */\n  lt\n    /* \"#utility.yul\":6307:6356   */\n  iszero\n  tag_117\n  jumpi\n    /* \"#utility.yul\":6346:6354   */\n  dup2\n    /* \"#utility.yul\":6331:6354   */\n  swap1\n  pop\n    /* \"#utility.yul\":6307:6356   */\ntag_117:\n    /* \"#utility.yul\":6369:6449   */\n  tag_118\n    /* \"#utility.yul\":6425:6447   */\n  tag_119\n    /* \"#utility.yul\":6443:6446   */\n  dup6\n    /* \"#utility.yul\":6425:6447   */\n  tag_27\n  jump\t// in\ntag_119:\n    /* \"#utility.yul\":6415:6423   */\n  dup4\n    /* \"#utility.yul\":6411:6448   */\n  add\n    /* \"#utility.yul\":6398:6409   */\n  dup3\n    /* \"#utility.yul\":6369:6449   */\n  tag_37\n  jump\t// in\ntag_118:\n    /* \"#utility.yul\":6028:6459   */\n  pop\n  pop\n    /* \"#utility.yul\":6013:6459   */\ntag_114:\n    /* \"#utility.yul\":5923:6466   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6472:6589   */\ntag_39:\n    /* \"#utility.yul\":6526:6534   */\n  0x00\n    /* \"#utility.yul\":6576:6581   */\n  dup3\n    /* \"#utility.yul\":6570:6574   */\n  dup3\n    /* \"#utility.yul\":6566:6582   */\n  shr\n    /* \"#utility.yul\":6545:6582   */\n  swap1\n  pop\n    /* \"#utility.yul\":6472:6589   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6595:6764   */\ntag_40:\n    /* \"#utility.yul\":6639:6645   */\n  0x00\n    /* \"#utility.yul\":6672:6723   */\n  tag_122\n    /* \"#utility.yul\":6720:6721   */\n  0x00\n    /* \"#utility.yul\":6716:6722   */\n  not\n    /* \"#utility.yul\":6708:6713   */\n  dup5\n    /* \"#utility.yul\":6705:6706   */\n  0x08\n    /* \"#utility.yul\":6701:6714   */\n  mul\n    /* \"#utility.yul\":6672:6723   */\n  tag_39\n  jump\t// in\ntag_122:\n    /* \"#utility.yul\":6668:6724   */\n  not\n    /* \"#utility.yul\":6753:6757   */\n  dup1\n    /* \"#utility.yul\":6747:6751   */\n  dup4\n    /* \"#utility.yul\":6743:6758   */\n  and\n    /* \"#utility.yul\":6733:6758   */\n  swap2\n  pop\n    /* \"#utility.yul\":6646:6764   */\n  pop\n    /* \"#utility.yul\":6595:6764   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6769:7064   */\ntag_41:\n    /* \"#utility.yul\":6845:6849   */\n  0x00\n    /* \"#utility.yul\":6991:7020   */\n  tag_124\n    /* \"#utility.yul\":7016:7019   */\n  dup4\n    /* \"#utility.yul\":7010:7014   */\n  dup4\n    /* \"#utility.yul\":6991:7020   */\n  tag_40\n  jump\t// in\ntag_124:\n    /* \"#utility.yul\":6983:7020   */\n  swap2\n  pop\n    /* \"#utility.yul\":7053:7056   */\n  dup3\n    /* \"#utility.yul\":7050:7051   */\n  0x02\n    /* \"#utility.yul\":7046:7057   */\n  mul\n    /* \"#utility.yul\":7040:7044   */\n  dup3\n    /* \"#utility.yul\":7037:7058   */\n  or\n    /* \"#utility.yul\":7029:7058   */\n  swap1\n  pop\n    /* \"#utility.yul\":6769:7064   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7069:8464   */\ntag_7:\n    /* \"#utility.yul\":7186:7223   */\n  tag_126\n    /* \"#utility.yul\":7219:7222   */\n  dup3\n    /* \"#utility.yul\":7186:7223   */\n  tag_23\n  jump\t// in\ntag_126:\n    /* \"#utility.yul\":7288:7306   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":7280:7286   */\n  dup2\n    /* \"#utility.yul\":7277:7307   */\n  gt\n    /* \"#utility.yul\":7274:7330   */\n  iszero\n  tag_127\n  jumpi\n    /* \"#utility.yul\":7310:7328   */\n  tag_128\n  tag_16\n  jump\t// in\ntag_128:\n    /* \"#utility.yul\":7274:7330   */\ntag_127:\n    /* \"#utility.yul\":7354:7392   */\n  tag_129\n    /* \"#utility.yul\":7386:7390   */\n  dup3\n    /* \"#utility.yul\":7380:7391   */\n  sload\n    /* \"#utility.yul\":7354:7392   */\n  tag_25\n  jump\t// in\ntag_129:\n    /* \"#utility.yul\":7439:7506   */\n  tag_130\n    /* \"#utility.yul\":7499:7505   */\n  dup3\n    /* \"#utility.yul\":7491:7497   */\n  dup3\n    /* \"#utility.yul\":7485:7489   */\n  dup6\n    /* \"#utility.yul\":7439:7506   */\n  tag_38\n  jump\t// in\ntag_130:\n    /* \"#utility.yul\":7533:7534   */\n  0x00\n    /* \"#utility.yul\":7557:7561   */\n  0x20\n    /* \"#utility.yul\":7544:7561   */\n  swap1\n  pop\n    /* \"#utility.yul\":7589:7591   */\n  0x1f\n    /* \"#utility.yul\":7581:7587   */\n  dup4\n    /* \"#utility.yul\":7578:7592   */\n  gt\n    /* \"#utility.yul\":7606:7607   */\n  0x01\n    /* \"#utility.yul\":7601:8219   */\n  dup2\n  eq\n  tag_132\n  jumpi\n    /* \"#utility.yul\":8263:8264   */\n  0x00\n    /* \"#utility.yul\":8280:8286   */\n  dup5\n    /* \"#utility.yul\":8277:8354   */\n  iszero\n  tag_133\n  jumpi\n    /* \"#utility.yul\":8329:8338   */\n  dup3\n    /* \"#utility.yul\":8324:8327   */\n  dup8\n    /* \"#utility.yul\":8320:8339   */\n  add\n    /* \"#utility.yul\":8314:8340   */\n  mload\n    /* \"#utility.yul\":8305:8340   */\n  swap1\n  pop\n    /* \"#utility.yul\":8277:8354   */\ntag_133:\n    /* \"#utility.yul\":8380:8447   */\n  tag_134\n    /* \"#utility.yul\":8440:8446   */\n  dup6\n    /* \"#utility.yul\":8433:8438   */\n  dup3\n    /* \"#utility.yul\":8380:8447   */\n  tag_41\n  jump\t// in\ntag_134:\n    /* \"#utility.yul\":8374:8378   */\n  dup7\n    /* \"#utility.yul\":8367:8448   */\n  sstore\n    /* \"#utility.yul\":8236:8458   */\n  pop\n    /* \"#utility.yul\":7571:8458   */\n  jump(tag_131)\n    /* \"#utility.yul\":7601:8219   */\ntag_132:\n    /* \"#utility.yul\":7653:7657   */\n  0x1f\n    /* \"#utility.yul\":7649:7658   */\n  not\n    /* \"#utility.yul\":7641:7647   */\n  dup5\n    /* \"#utility.yul\":7637:7659   */\n  and\n    /* \"#utility.yul\":7687:7724   */\n  tag_135\n    /* \"#utility.yul\":7719:7723   */\n  dup7\n    /* \"#utility.yul\":7687:7724   */\n  tag_26\n  jump\t// in\ntag_135:\n    /* \"#utility.yul\":7746:7747   */\n  0x00\n    /* \"#utility.yul\":7760:7968   */\ntag_136:\n    /* \"#utility.yul\":7774:7781   */\n  dup3\n    /* \"#utility.yul\":7771:7772   */\n  dup2\n    /* \"#utility.yul\":7768:7782   */\n  lt\n    /* \"#utility.yul\":7760:7968   */\n  iszero\n  tag_138\n  jumpi\n    /* \"#utility.yul\":7853:7862   */\n  dup5\n    /* \"#utility.yul\":7848:7851   */\n  dup10\n    /* \"#utility.yul\":7844:7863   */\n  add\n    /* \"#utility.yul\":7838:7864   */\n  mload\n    /* \"#utility.yul\":7830:7836   */\n  dup3\n    /* \"#utility.yul\":7823:7865   */\n  sstore\n    /* \"#utility.yul\":7904:7905   */\n  0x01\n    /* \"#utility.yul\":7896:7902   */\n  dup3\n    /* \"#utility.yul\":7892:7906   */\n  add\n    /* \"#utility.yul\":7882:7906   */\n  swap2\n  pop\n    /* \"#utility.yul\":7951:7953   */\n  0x20\n    /* \"#utility.yul\":7940:7949   */\n  dup6\n    /* \"#utility.yul\":7936:7954   */\n  add\n    /* \"#utility.yul\":7923:7954   */\n  swap5\n  pop\n    /* \"#utility.yul\":7797:7801   */\n  0x20\n    /* \"#utility.yul\":7794:7795   */\n  dup2\n    /* \"#utility.yul\":7790:7802   */\n  add\n    /* \"#utility.yul\":7785:7802   */\n  swap1\n  pop\n    /* \"#utility.yul\":7760:7968   */\n  jump(tag_136)\ntag_138:\n    /* \"#utility.yul\":7996:8002   */\n  dup7\n    /* \"#utility.yul\":7987:7994   */\n  dup4\n    /* \"#utility.yul\":7984:8003   */\n  lt\n    /* \"#utility.yul\":7981:8160   */\n  iszero\n  tag_139\n  jumpi\n    /* \"#utility.yul\":8054:8063   */\n  dup5\n    /* \"#utility.yul\":8049:8052   */\n  dup10\n    /* \"#utility.yul\":8045:8064   */\n  add\n    /* \"#utility.yul\":8039:8065   */\n  mload\n    /* \"#utility.yul\":8097:8145   */\n  tag_140\n    /* \"#utility.yul\":8139:8143   */\n  0x1f\n    /* \"#utility.yul\":8131:8137   */\n  dup10\n    /* \"#utility.yul\":8127:8144   */\n  and\n    /* \"#utility.yul\":8116:8125   */\n  dup3\n    /* \"#utility.yul\":8097:8145   */\n  tag_40\n  jump\t// in\ntag_140:\n    /* \"#utility.yul\":8089:8095   */\n  dup4\n    /* \"#utility.yul\":8082:8146   */\n  sstore\n    /* \"#utility.yul\":8004:8160   */\n  pop\n    /* \"#utility.yul\":7981:8160   */\ntag_139:\n    /* \"#utility.yul\":8206:8207   */\n  0x01\n    /* \"#utility.yul\":8202:8203   */\n  0x02\n    /* \"#utility.yul\":8194:8200   */\n  dup9\n    /* \"#utility.yul\":8190:8204   */\n  mul\n    /* \"#utility.yul\":8186:8208   */\n  add\n    /* \"#utility.yul\":8180:8184   */\n  dup9\n    /* \"#utility.yul\":8173:8209   */\n  sstore\n    /* \"#utility.yul\":7608:8219   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":7571:8458   */\ntag_131:\n  pop\n    /* \"#utility.yul\":7161:8464   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":7069:8464   */\n  pop\n  pop\n  jump\t// out\n    /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":2664:14274  contract ERC20 is Context, IERC20, IERC20Metadata {... */\ntag_9:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":2664:14274  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":3417:3515  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5694:5891  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_19\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_20\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4505:4611  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n      tag_25\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      tag_27\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6453:6739  function transferFrom(... */\n    tag_6:\n      tag_29\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_30\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      tag_33\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_33:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4354:4445  function decimals() public view virtual override returns (uint8) {... */\n    tag_7:\n      tag_34\n      tag_35\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      tag_36\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_36:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7134:7368  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_38\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_39\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n    tag_38:\n      mload(0x40)\n      tag_41\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_41:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4669:4794  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_42\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_43\n      swap2\n      swap1\n      tag_44\n      jump\t// in\n    tag_43:\n      tag_45\n      jump\t// in\n    tag_42:\n      mload(0x40)\n      tag_46\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_46:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":3628:3730  function symbol() public view virtual override returns (string memory) {... */\n    tag_10:\n      tag_47\n      tag_48\n      jump\t// in\n    tag_47:\n      mload(0x40)\n      tag_49\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_49:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7855:8282  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_50\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_51\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n    tag_50:\n      mload(0x40)\n      tag_53\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4990:5179  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_54\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_55\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n    tag_54:\n      mload(0x40)\n      tag_57\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_57:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5237:5386  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_58\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_59\n      swap2\n      swap1\n      tag_60\n      jump\t// in\n    tag_59:\n      tag_61\n      jump\t// in\n    tag_58:\n      mload(0x40)\n      tag_62\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_62:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":3417:3515  function name() public view virtual override returns (string memory) {... */\n    tag_16:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":3471:3484  string memory */\n      0x60\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":3503:3508  _name */\n      0x03\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":3496:3508  return _name */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_66\n      swap1\n      tag_65\n      jump\t// in\n    tag_66:\n      dup1\n      iszero\n      tag_67\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_68\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_67)\n    tag_68:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_69:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_69\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_67:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":3417:3515  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5694:5891  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_22:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5777:5781  bool */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5793:5806  address owner */\n      dup1\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5809:5821  _msgSender() */\n      tag_71\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5809:5819  _msgSender */\n      tag_72\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5809:5821  _msgSender() */\n      jump\t// in\n    tag_71:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5793:5821  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5831:5863  _approve(owner, spender, amount) */\n      tag_73\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5840:5845  owner */\n      dup2\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5847:5854  spender */\n      dup6\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5856:5862  amount */\n      dup6\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5831:5839  _approve */\n      tag_74\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5831:5863  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_73:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5880:5884  true */\n      0x01\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:5884  return true */\n      swap2\n      pop\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5694:5891  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4505:4611  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_26:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4566:4573  uint256 */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4592:4604  _totalSupply */\n      sload(0x02)\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4585:4604  return _totalSupply */\n      swap1\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4505:4611  function totalSupply() public view virtual override returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6453:6739  function transferFrom(... */\n    tag_32:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6580:6584  bool */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6596:6611  address spender */\n      dup1\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6614:6626  _msgSender() */\n      tag_77\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6614:6624  _msgSender */\n      tag_72\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6614:6626  _msgSender() */\n      jump\t// in\n    tag_77:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6596:6626  address spender = _msgSender() */\n      swap1\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6636:6674  _spendAllowance(from, spender, amount) */\n      tag_78\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6652:6656  from */\n      dup6\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6658:6665  spender */\n      dup3\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6667:6673  amount */\n      dup6\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6636:6651  _spendAllowance */\n      tag_79\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6636:6674  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_78:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6684:6711  _transfer(from, to, amount) */\n      tag_80\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6694:6698  from */\n      dup6\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6700:6702  to */\n      dup6\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6704:6710  amount */\n      dup6\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6684:6693  _transfer */\n      tag_81\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6684:6711  _transfer(from, to, amount) */\n      jump\t// in\n    tag_80:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6728:6732  true */\n      0x01\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6721:6732  return true */\n      swap2\n      pop\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":6453:6739  function transferFrom(... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4354:4445  function decimals() public view virtual override returns (uint8) {... */\n    tag_35:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4412:4417  uint8 */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4436:4438  18 */\n      0x12\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4429:4438  return 18 */\n      swap1\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4354:4445  function decimals() public view virtual override returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7134:7368  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_40:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7222:7226  bool */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7238:7251  address owner */\n      dup1\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7254:7266  _msgSender() */\n      tag_84\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7254:7264  _msgSender */\n      tag_72\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7254:7266  _msgSender() */\n      jump\t// in\n    tag_84:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7238:7266  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7276:7340  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_85\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7285:7290  owner */\n      dup2\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7292:7299  spender */\n      dup6\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7329:7339  addedValue */\n      dup6\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7301:7326  allowance(owner, spender) */\n      tag_86\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7311:7316  owner */\n      dup6\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7318:7325  spender */\n      dup10\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7301:7310  allowance */\n      tag_61\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7301:7326  allowance(owner, spender) */\n      jump\t// in\n    tag_86:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7301:7339  allowance(owner, spender) + addedValue */\n      tag_87\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7276:7284  _approve */\n      tag_74\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7276:7340  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n    tag_85:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7357:7361  true */\n      0x01\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7350:7361  return true */\n      swap2\n      pop\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7134:7368  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4669:4794  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_45:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4743:4750  uint256 */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4769:4778  _balances */\n      dup1\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4769:4787  _balances[account] */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4779:4786  account */\n      dup4\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4769:4787  _balances[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4762:4787  return _balances[account] */\n      swap1\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4669:4794  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":3628:3730  function symbol() public view virtual override returns (string memory) {... */\n    tag_48:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":3684:3697  string memory */\n      0x60\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":3716:3723  _symbol */\n      0x04\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":3709:3723  return _symbol */\n      dup1\n      sload\n      tag_91\n      swap1\n      tag_65\n      jump\t// in\n    tag_91:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_92\n      swap1\n      tag_65\n      jump\t// in\n    tag_92:\n      dup1\n      iszero\n      tag_93\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_94\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_93)\n    tag_94:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_95:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_95\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_93:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":3628:3730  function symbol() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7855:8282  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_52:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7948:7952  bool */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7964:7977  address owner */\n      dup1\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7980:7992  _msgSender() */\n      tag_97\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7980:7990  _msgSender */\n      tag_72\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7980:7992  _msgSender() */\n      jump\t// in\n    tag_97:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7964:7992  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8002:8026  uint256 currentAllowance */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8029:8054  allowance(owner, spender) */\n      tag_98\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8039:8044  owner */\n      dup3\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8046:8053  spender */\n      dup7\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8029:8038  allowance */\n      tag_61\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8029:8054  allowance(owner, spender) */\n      jump\t// in\n    tag_98:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8002:8054  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8092:8107  subtractedValue */\n      dup4\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8072:8088  currentAllowance */\n      dup2\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8072:8107  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8064:8149  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_99\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_100\n      swap1\n      tag_101\n      jump\t// in\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_99:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8183:8243  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_102\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8192:8197  owner */\n      dup3\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8199:8206  spender */\n      dup7\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8227:8242  subtractedValue */\n      dup7\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8208:8224  currentAllowance */\n      dup5\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8208:8242  currentAllowance - subtractedValue */\n      sub\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8183:8191  _approve */\n      tag_74\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8183:8243  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n    tag_102:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8271:8275  true */\n      0x01\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8264:8275  return true */\n      swap3\n      pop\n      pop\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":7855:8282  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4990:5179  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_56:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5069:5073  bool */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5085:5098  address owner */\n      dup1\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5101:5113  _msgSender() */\n      tag_104\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5101:5111  _msgSender */\n      tag_72\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5101:5113  _msgSender() */\n      jump\t// in\n    tag_104:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5085:5113  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5123:5151  _transfer(owner, to, amount) */\n      tag_105\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5133:5138  owner */\n      dup2\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5140:5142  to */\n      dup6\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5144:5150  amount */\n      dup6\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5123:5132  _transfer */\n      tag_81\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5123:5151  _transfer(owner, to, amount) */\n      jump\t// in\n    tag_105:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5168:5172  true */\n      0x01\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5161:5172  return true */\n      swap2\n      pop\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":4990:5179  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5237:5386  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_61:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5326:5333  uint256 */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5352:5363  _allowances */\n      0x01\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5352:5370  _allowances[owner] */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5364:5369  owner */\n      dup5\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5352:5370  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5352:5379  _allowances[owner][spender] */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5371:5378  spender */\n      dup4\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5352:5379  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5345:5379  return _allowances[owner][spender] */\n      swap1\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":5237:5386  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"0x/@openzeppelin/contracts/utils/Context.sol\":1903:1999  function _msgSender() internal view virtual returns (address) {... */\n    tag_72:\n        /* \"0x/@openzeppelin/contracts/utils/Context.sol\":1956:1963  address */\n      0x00\n        /* \"0x/@openzeppelin/contracts/utils/Context.sol\":1982:1992  msg.sender */\n      caller\n        /* \"0x/@openzeppelin/contracts/utils/Context.sol\":1975:1992  return msg.sender */\n      swap1\n      pop\n        /* \"0x/@openzeppelin/contracts/utils/Context.sol\":1903:1999  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":11767:12137  function _approve(... */\n    tag_74:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":11915:11916  0 */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":11898:11917  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":11898:11903  owner */\n      dup4\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":11898:11917  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":11890:11958  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_110\n      swap1\n      tag_111\n      jump\t// in\n    tag_110:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_109:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":11995:11996  0 */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":11976:11997  spender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":11976:11983  spender */\n      dup3\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":11976:11997  spender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":11968:12036  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_112\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_113\n      swap1\n      tag_114\n      jump\t// in\n    tag_113:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_112:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12077:12083  amount */\n      dup1\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12047:12058  _allowances */\n      0x01\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12047:12065  _allowances[owner] */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12059:12064  owner */\n      dup6\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12047:12065  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12047:12074  _allowances[owner][spender] */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12066:12073  spender */\n      dup5\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12047:12074  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12047:12083  _allowances[owner][spender] = amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12114:12121  spender */\n      dup2\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12098:12130  Approval(owner, spender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12107:12112  owner */\n      dup4\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12098:12130  Approval(owner, spender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12123:12129  amount */\n      dup4\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12098:12130  Approval(owner, spender, amount) */\n      mload(0x40)\n      tag_115\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_115:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":11767:12137  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12418:12859  function _spendAllowance(... */\n    tag_79:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12548:12572  uint256 currentAllowance */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12575:12600  allowance(owner, spender) */\n      tag_117\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12585:12590  owner */\n      dup5\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12592:12599  spender */\n      dup5\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12575:12584  allowance */\n      tag_61\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12575:12600  allowance(owner, spender) */\n      jump\t// in\n    tag_117:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12548:12600  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12634:12651  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12614:12630  currentAllowance */\n      dup2\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12614:12651  currentAllowance != type(uint256).max */\n      eq\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12610:12853  if (currentAllowance != type(uint256).max) {... */\n      tag_118\n      jumpi\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12695:12701  amount */\n      dup2\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12675:12691  currentAllowance */\n      dup2\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12675:12701  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12667:12735  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_120\n      swap1\n      tag_121\n      jump\t// in\n    tag_120:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_119:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12777:12828  _approve(owner, spender, currentAllowance - amount) */\n      tag_122\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12786:12791  owner */\n      dup5\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12793:12800  spender */\n      dup5\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12821:12827  amount */\n      dup5\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12802:12818  currentAllowance */\n      dup5\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12802:12827  currentAllowance - amount */\n      sub\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12777:12785  _approve */\n      tag_74\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12777:12828  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_122:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12610:12853  if (currentAllowance != type(uint256).max) {... */\n    tag_118:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12538:12859  {... */\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":12418:12859  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8736:9554  function _transfer(... */\n    tag_81:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8878:8879  0 */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8862:8880  from != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8862:8866  from */\n      dup4\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8862:8880  from != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8854:8922  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_124\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_125\n      swap1\n      tag_126\n      jump\t// in\n    tag_125:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_124:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8954:8955  0 */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8940:8956  to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8940:8942  to */\n      dup3\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8940:8956  to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8932:8996  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_128\n      swap1\n      tag_129\n      jump\t// in\n    tag_128:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_127:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9007:9045  _beforeTokenTransfer(from, to, amount) */\n      tag_130\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9028:9032  from */\n      dup4\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9034:9036  to */\n      dup4\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9038:9044  amount */\n      dup4\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9007:9027  _beforeTokenTransfer */\n      tag_131\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9007:9045  _beforeTokenTransfer(from, to, amount) */\n      jump\t// in\n    tag_130:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9056:9075  uint256 fromBalance */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9078:9087  _balances */\n      dup1\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9078:9093  _balances[from] */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9088:9092  from */\n      dup6\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9078:9093  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9056:9093  uint256 fromBalance = _balances[from] */\n      swap1\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9126:9132  amount */\n      dup2\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9111:9122  fromBalance */\n      dup2\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9111:9132  fromBalance >= amount */\n      lt\n      iszero\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9103:9175  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_132\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_133\n      swap1\n      tag_134\n      jump\t// in\n    tag_133:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_132:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9241:9247  amount */\n      dup2\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9227:9238  fromBalance */\n      dup2\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9227:9247  fromBalance - amount */\n      sub\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9209:9218  _balances */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9209:9224  _balances[from] */\n      dup1\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9219:9223  from */\n      dup7\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9209:9224  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9209:9247  _balances[from] = fromBalance - amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9441:9447  amount */\n      dup2\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9424:9433  _balances */\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9424:9437  _balances[to] */\n      dup1\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9434:9436  to */\n      dup6\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9424:9437  _balances[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9424:9447  _balances[to] += amount */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9488:9490  to */\n      dup3\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9473:9499  Transfer(from, to, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9482:9486  from */\n      dup5\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9473:9499  Transfer(from, to, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9492:9498  amount */\n      dup5\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9473:9499  Transfer(from, to, amount) */\n      mload(0x40)\n      tag_135\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_135:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9510:9547  _afterTokenTransfer(from, to, amount) */\n      tag_136\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9530:9534  from */\n      dup5\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9536:9538  to */\n      dup5\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9540:9546  amount */\n      dup5\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9510:9529  _afterTokenTransfer */\n      tag_137\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":9510:9547  _afterTokenTransfer(from, to, amount) */\n      jump\t// in\n    tag_136:\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8844:9554  {... */\n      pop\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":8736:9554  function _transfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":13443:13564  function _beforeTokenTransfer(... */\n    tag_131:\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":14152:14272  function _afterTokenTransfer(... */\n    tag_137:\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:106   */\n    tag_140:\n        /* \"#utility.yul\":59:65   */\n      0x00\n        /* \"#utility.yul\":93:98   */\n      dup2\n        /* \"#utility.yul\":87:99   */\n      mload\n        /* \"#utility.yul\":77:99   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:106   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":112:281   */\n    tag_141:\n        /* \"#utility.yul\":196:207   */\n      0x00\n        /* \"#utility.yul\":230:236   */\n      dup3\n        /* \"#utility.yul\":225:228   */\n      dup3\n        /* \"#utility.yul\":218:237   */\n      mstore\n        /* \"#utility.yul\":270:274   */\n      0x20\n        /* \"#utility.yul\":265:268   */\n      dup3\n        /* \"#utility.yul\":261:275   */\n      add\n        /* \"#utility.yul\":246:275   */\n      swap1\n      pop\n        /* \"#utility.yul\":112:281   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":287:426   */\n    tag_142:\n        /* \"#utility.yul\":376:382   */\n      dup3\n        /* \"#utility.yul\":371:374   */\n      dup2\n        /* \"#utility.yul\":366:369   */\n      dup4\n        /* \"#utility.yul\":360:383   */\n      mcopy\n        /* \"#utility.yul\":417:418   */\n      0x00\n        /* \"#utility.yul\":408:414   */\n      dup4\n        /* \"#utility.yul\":403:406   */\n      dup4\n        /* \"#utility.yul\":399:415   */\n      add\n        /* \"#utility.yul\":392:419   */\n      mstore\n        /* \"#utility.yul\":287:426   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":432:534   */\n    tag_143:\n        /* \"#utility.yul\":473:479   */\n      0x00\n        /* \"#utility.yul\":524:526   */\n      0x1f\n        /* \"#utility.yul\":520:527   */\n      not\n        /* \"#utility.yul\":515:517   */\n      0x1f\n        /* \"#utility.yul\":508:513   */\n      dup4\n        /* \"#utility.yul\":504:518   */\n      add\n        /* \"#utility.yul\":500:528   */\n      and\n        /* \"#utility.yul\":490:528   */\n      swap1\n      pop\n        /* \"#utility.yul\":432:534   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":540:917   */\n    tag_144:\n        /* \"#utility.yul\":628:631   */\n      0x00\n        /* \"#utility.yul\":656:695   */\n      tag_182\n        /* \"#utility.yul\":689:694   */\n      dup3\n        /* \"#utility.yul\":656:695   */\n      tag_140\n      jump\t// in\n    tag_182:\n        /* \"#utility.yul\":711:782   */\n      tag_183\n        /* \"#utility.yul\":775:781   */\n      dup2\n        /* \"#utility.yul\":770:773   */\n      dup6\n        /* \"#utility.yul\":711:782   */\n      tag_141\n      jump\t// in\n    tag_183:\n        /* \"#utility.yul\":704:782   */\n      swap4\n      pop\n        /* \"#utility.yul\":791:856   */\n      tag_184\n        /* \"#utility.yul\":849:855   */\n      dup2\n        /* \"#utility.yul\":844:847   */\n      dup6\n        /* \"#utility.yul\":837:841   */\n      0x20\n        /* \"#utility.yul\":830:835   */\n      dup7\n        /* \"#utility.yul\":826:842   */\n      add\n        /* \"#utility.yul\":791:856   */\n      tag_142\n      jump\t// in\n    tag_184:\n        /* \"#utility.yul\":881:910   */\n      tag_185\n        /* \"#utility.yul\":903:909   */\n      dup2\n        /* \"#utility.yul\":881:910   */\n      tag_143\n      jump\t// in\n    tag_185:\n        /* \"#utility.yul\":876:879   */\n      dup5\n        /* \"#utility.yul\":872:911   */\n      add\n        /* \"#utility.yul\":865:911   */\n      swap2\n      pop\n        /* \"#utility.yul\":632:917   */\n      pop\n        /* \"#utility.yul\":540:917   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":923:1236   */\n    tag_18:\n        /* \"#utility.yul\":1036:1040   */\n      0x00\n        /* \"#utility.yul\":1074:1076   */\n      0x20\n        /* \"#utility.yul\":1063:1072   */\n      dup3\n        /* \"#utility.yul\":1059:1077   */\n      add\n        /* \"#utility.yul\":1051:1077   */\n      swap1\n      pop\n        /* \"#utility.yul\":1123:1132   */\n      dup2\n        /* \"#utility.yul\":1117:1121   */\n      dup2\n        /* \"#utility.yul\":1113:1133   */\n      sub\n        /* \"#utility.yul\":1109:1110   */\n      0x00\n        /* \"#utility.yul\":1098:1107   */\n      dup4\n        /* \"#utility.yul\":1094:1111   */\n      add\n        /* \"#utility.yul\":1087:1134   */\n      mstore\n        /* \"#utility.yul\":1151:1229   */\n      tag_187\n        /* \"#utility.yul\":1224:1228   */\n      dup2\n        /* \"#utility.yul\":1215:1221   */\n      dup5\n        /* \"#utility.yul\":1151:1229   */\n      tag_144\n      jump\t// in\n    tag_187:\n        /* \"#utility.yul\":1143:1229   */\n      swap1\n      pop\n        /* \"#utility.yul\":923:1236   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1323:1440   */\n    tag_146:\n        /* \"#utility.yul\":1432:1433   */\n      0x00\n        /* \"#utility.yul\":1429:1430   */\n      dup1\n        /* \"#utility.yul\":1422:1434   */\n      revert\n        /* \"#utility.yul\":1569:1695   */\n    tag_148:\n        /* \"#utility.yul\":1606:1613   */\n      0x00\n        /* \"#utility.yul\":1646:1688   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":1639:1644   */\n      dup3\n        /* \"#utility.yul\":1635:1689   */\n      and\n        /* \"#utility.yul\":1624:1689   */\n      swap1\n      pop\n        /* \"#utility.yul\":1569:1695   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1701:1797   */\n    tag_149:\n        /* \"#utility.yul\":1738:1745   */\n      0x00\n        /* \"#utility.yul\":1767:1791   */\n      tag_193\n        /* \"#utility.yul\":1785:1790   */\n      dup3\n        /* \"#utility.yul\":1767:1791   */\n      tag_148\n      jump\t// in\n    tag_193:\n        /* \"#utility.yul\":1756:1791   */\n      swap1\n      pop\n        /* \"#utility.yul\":1701:1797   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1803:1925   */\n    tag_150:\n        /* \"#utility.yul\":1876:1900   */\n      tag_195\n        /* \"#utility.yul\":1894:1899   */\n      dup2\n        /* \"#utility.yul\":1876:1900   */\n      tag_149\n      jump\t// in\n    tag_195:\n        /* \"#utility.yul\":1869:1874   */\n      dup2\n        /* \"#utility.yul\":1866:1901   */\n      eq\n        /* \"#utility.yul\":1856:1919   */\n      tag_196\n      jumpi\n        /* \"#utility.yul\":1915:1916   */\n      0x00\n        /* \"#utility.yul\":1912:1913   */\n      dup1\n        /* \"#utility.yul\":1905:1917   */\n      revert\n        /* \"#utility.yul\":1856:1919   */\n    tag_196:\n        /* \"#utility.yul\":1803:1925   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1931:2070   */\n    tag_151:\n        /* \"#utility.yul\":1977:1982   */\n      0x00\n        /* \"#utility.yul\":2015:2021   */\n      dup2\n        /* \"#utility.yul\":2002:2022   */\n      calldataload\n        /* \"#utility.yul\":1993:2022   */\n      swap1\n      pop\n        /* \"#utility.yul\":2031:2064   */\n      tag_198\n        /* \"#utility.yul\":2058:2063   */\n      dup2\n        /* \"#utility.yul\":2031:2064   */\n      tag_150\n      jump\t// in\n    tag_198:\n        /* \"#utility.yul\":1931:2070   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2076:2153   */\n    tag_152:\n        /* \"#utility.yul\":2113:2120   */\n      0x00\n        /* \"#utility.yul\":2142:2147   */\n      dup2\n        /* \"#utility.yul\":2131:2147   */\n      swap1\n      pop\n        /* \"#utility.yul\":2076:2153   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2159:2281   */\n    tag_153:\n        /* \"#utility.yul\":2232:2256   */\n      tag_201\n        /* \"#utility.yul\":2250:2255   */\n      dup2\n        /* \"#utility.yul\":2232:2256   */\n      tag_152\n      jump\t// in\n    tag_201:\n        /* \"#utility.yul\":2225:2230   */\n      dup2\n        /* \"#utility.yul\":2222:2257   */\n      eq\n        /* \"#utility.yul\":2212:2275   */\n      tag_202\n      jumpi\n        /* \"#utility.yul\":2271:2272   */\n      0x00\n        /* \"#utility.yul\":2268:2269   */\n      dup1\n        /* \"#utility.yul\":2261:2273   */\n      revert\n        /* \"#utility.yul\":2212:2275   */\n    tag_202:\n        /* \"#utility.yul\":2159:2281   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2287:2426   */\n    tag_154:\n        /* \"#utility.yul\":2333:2338   */\n      0x00\n        /* \"#utility.yul\":2371:2377   */\n      dup2\n        /* \"#utility.yul\":2358:2378   */\n      calldataload\n        /* \"#utility.yul\":2349:2378   */\n      swap1\n      pop\n        /* \"#utility.yul\":2387:2420   */\n      tag_204\n        /* \"#utility.yul\":2414:2419   */\n      dup2\n        /* \"#utility.yul\":2387:2420   */\n      tag_153\n      jump\t// in\n    tag_204:\n        /* \"#utility.yul\":2287:2426   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2432:2906   */\n    tag_21:\n        /* \"#utility.yul\":2500:2506   */\n      0x00\n        /* \"#utility.yul\":2508:2514   */\n      dup1\n        /* \"#utility.yul\":2557:2559   */\n      0x40\n        /* \"#utility.yul\":2545:2554   */\n      dup4\n        /* \"#utility.yul\":2536:2543   */\n      dup6\n        /* \"#utility.yul\":2532:2555   */\n      sub\n        /* \"#utility.yul\":2528:2560   */\n      slt\n        /* \"#utility.yul\":2525:2644   */\n      iszero\n      tag_206\n      jumpi\n        /* \"#utility.yul\":2563:2642   */\n      tag_207\n      tag_146\n      jump\t// in\n    tag_207:\n        /* \"#utility.yul\":2525:2644   */\n    tag_206:\n        /* \"#utility.yul\":2683:2684   */\n      0x00\n        /* \"#utility.yul\":2708:2761   */\n      tag_208\n        /* \"#utility.yul\":2753:2760   */\n      dup6\n        /* \"#utility.yul\":2744:2750   */\n      dup3\n        /* \"#utility.yul\":2733:2742   */\n      dup7\n        /* \"#utility.yul\":2729:2751   */\n      add\n        /* \"#utility.yul\":2708:2761   */\n      tag_151\n      jump\t// in\n    tag_208:\n        /* \"#utility.yul\":2698:2761   */\n      swap3\n      pop\n        /* \"#utility.yul\":2654:2771   */\n      pop\n        /* \"#utility.yul\":2810:2812   */\n      0x20\n        /* \"#utility.yul\":2836:2889   */\n      tag_209\n        /* \"#utility.yul\":2881:2888   */\n      dup6\n        /* \"#utility.yul\":2872:2878   */\n      dup3\n        /* \"#utility.yul\":2861:2870   */\n      dup7\n        /* \"#utility.yul\":2857:2879   */\n      add\n        /* \"#utility.yul\":2836:2889   */\n      tag_154\n      jump\t// in\n    tag_209:\n        /* \"#utility.yul\":2826:2889   */\n      swap2\n      pop\n        /* \"#utility.yul\":2781:2899   */\n      pop\n        /* \"#utility.yul\":2432:2906   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2912:3002   */\n    tag_155:\n        /* \"#utility.yul\":2946:2953   */\n      0x00\n        /* \"#utility.yul\":2989:2994   */\n      dup2\n        /* \"#utility.yul\":2982:2995   */\n      iszero\n        /* \"#utility.yul\":2975:2996   */\n      iszero\n        /* \"#utility.yul\":2964:2996   */\n      swap1\n      pop\n        /* \"#utility.yul\":2912:3002   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3008:3117   */\n    tag_156:\n        /* \"#utility.yul\":3089:3110   */\n      tag_212\n        /* \"#utility.yul\":3104:3109   */\n      dup2\n        /* \"#utility.yul\":3089:3110   */\n      tag_155\n      jump\t// in\n    tag_212:\n        /* \"#utility.yul\":3084:3087   */\n      dup3\n        /* \"#utility.yul\":3077:3111   */\n      mstore\n        /* \"#utility.yul\":3008:3117   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3123:3333   */\n    tag_24:\n        /* \"#utility.yul\":3210:3214   */\n      0x00\n        /* \"#utility.yul\":3248:3250   */\n      0x20\n        /* \"#utility.yul\":3237:3246   */\n      dup3\n        /* \"#utility.yul\":3233:3251   */\n      add\n        /* \"#utility.yul\":3225:3251   */\n      swap1\n      pop\n        /* \"#utility.yul\":3261:3326   */\n      tag_214\n        /* \"#utility.yul\":3323:3324   */\n      0x00\n        /* \"#utility.yul\":3312:3321   */\n      dup4\n        /* \"#utility.yul\":3308:3325   */\n      add\n        /* \"#utility.yul\":3299:3305   */\n      dup5\n        /* \"#utility.yul\":3261:3326   */\n      tag_156\n      jump\t// in\n    tag_214:\n        /* \"#utility.yul\":3123:3333   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3339:3457   */\n    tag_157:\n        /* \"#utility.yul\":3426:3450   */\n      tag_216\n        /* \"#utility.yul\":3444:3449   */\n      dup2\n        /* \"#utility.yul\":3426:3450   */\n      tag_152\n      jump\t// in\n    tag_216:\n        /* \"#utility.yul\":3421:3424   */\n      dup3\n        /* \"#utility.yul\":3414:3451   */\n      mstore\n        /* \"#utility.yul\":3339:3457   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3463:3685   */\n    tag_28:\n        /* \"#utility.yul\":3556:3560   */\n      0x00\n        /* \"#utility.yul\":3594:3596   */\n      0x20\n        /* \"#utility.yul\":3583:3592   */\n      dup3\n        /* \"#utility.yul\":3579:3597   */\n      add\n        /* \"#utility.yul\":3571:3597   */\n      swap1\n      pop\n        /* \"#utility.yul\":3607:3678   */\n      tag_218\n        /* \"#utility.yul\":3675:3676   */\n      0x00\n        /* \"#utility.yul\":3664:3673   */\n      dup4\n        /* \"#utility.yul\":3660:3677   */\n      add\n        /* \"#utility.yul\":3651:3657   */\n      dup5\n        /* \"#utility.yul\":3607:3678   */\n      tag_157\n      jump\t// in\n    tag_218:\n        /* \"#utility.yul\":3463:3685   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3691:4310   */\n    tag_31:\n        /* \"#utility.yul\":3768:3774   */\n      0x00\n        /* \"#utility.yul\":3776:3782   */\n      dup1\n        /* \"#utility.yul\":3784:3790   */\n      0x00\n        /* \"#utility.yul\":3833:3835   */\n      0x60\n        /* \"#utility.yul\":3821:3830   */\n      dup5\n        /* \"#utility.yul\":3812:3819   */\n      dup7\n        /* \"#utility.yul\":3808:3831   */\n      sub\n        /* \"#utility.yul\":3804:3836   */\n      slt\n        /* \"#utility.yul\":3801:3920   */\n      iszero\n      tag_220\n      jumpi\n        /* \"#utility.yul\":3839:3918   */\n      tag_221\n      tag_146\n      jump\t// in\n    tag_221:\n        /* \"#utility.yul\":3801:3920   */\n    tag_220:\n        /* \"#utility.yul\":3959:3960   */\n      0x00\n        /* \"#utility.yul\":3984:4037   */\n      tag_222\n        /* \"#utility.yul\":4029:4036   */\n      dup7\n        /* \"#utility.yul\":4020:4026   */\n      dup3\n        /* \"#utility.yul\":4009:4018   */\n      dup8\n        /* \"#utility.yul\":4005:4027   */\n      add\n        /* \"#utility.yul\":3984:4037   */\n      tag_151\n      jump\t// in\n    tag_222:\n        /* \"#utility.yul\":3974:4037   */\n      swap4\n      pop\n        /* \"#utility.yul\":3930:4047   */\n      pop\n        /* \"#utility.yul\":4086:4088   */\n      0x20\n        /* \"#utility.yul\":4112:4165   */\n      tag_223\n        /* \"#utility.yul\":4157:4164   */\n      dup7\n        /* \"#utility.yul\":4148:4154   */\n      dup3\n        /* \"#utility.yul\":4137:4146   */\n      dup8\n        /* \"#utility.yul\":4133:4155   */\n      add\n        /* \"#utility.yul\":4112:4165   */\n      tag_151\n      jump\t// in\n    tag_223:\n        /* \"#utility.yul\":4102:4165   */\n      swap3\n      pop\n        /* \"#utility.yul\":4057:4175   */\n      pop\n        /* \"#utility.yul\":4214:4216   */\n      0x40\n        /* \"#utility.yul\":4240:4293   */\n      tag_224\n        /* \"#utility.yul\":4285:4292   */\n      dup7\n        /* \"#utility.yul\":4276:4282   */\n      dup3\n        /* \"#utility.yul\":4265:4274   */\n      dup8\n        /* \"#utility.yul\":4261:4283   */\n      add\n        /* \"#utility.yul\":4240:4293   */\n      tag_154\n      jump\t// in\n    tag_224:\n        /* \"#utility.yul\":4230:4293   */\n      swap2\n      pop\n        /* \"#utility.yul\":4185:4303   */\n      pop\n        /* \"#utility.yul\":3691:4310   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":4316:4402   */\n    tag_158:\n        /* \"#utility.yul\":4351:4358   */\n      0x00\n        /* \"#utility.yul\":4391:4395   */\n      0xff\n        /* \"#utility.yul\":4384:4389   */\n      dup3\n        /* \"#utility.yul\":4380:4396   */\n      and\n        /* \"#utility.yul\":4369:4396   */\n      swap1\n      pop\n        /* \"#utility.yul\":4316:4402   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4408:4520   */\n    tag_159:\n        /* \"#utility.yul\":4491:4513   */\n      tag_227\n        /* \"#utility.yul\":4507:4512   */\n      dup2\n        /* \"#utility.yul\":4491:4513   */\n      tag_158\n      jump\t// in\n    tag_227:\n        /* \"#utility.yul\":4486:4489   */\n      dup3\n        /* \"#utility.yul\":4479:4514   */\n      mstore\n        /* \"#utility.yul\":4408:4520   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4526:4740   */\n    tag_37:\n        /* \"#utility.yul\":4615:4619   */\n      0x00\n        /* \"#utility.yul\":4653:4655   */\n      0x20\n        /* \"#utility.yul\":4642:4651   */\n      dup3\n        /* \"#utility.yul\":4638:4656   */\n      add\n        /* \"#utility.yul\":4630:4656   */\n      swap1\n      pop\n        /* \"#utility.yul\":4666:4733   */\n      tag_229\n        /* \"#utility.yul\":4730:4731   */\n      0x00\n        /* \"#utility.yul\":4719:4728   */\n      dup4\n        /* \"#utility.yul\":4715:4732   */\n      add\n        /* \"#utility.yul\":4706:4712   */\n      dup5\n        /* \"#utility.yul\":4666:4733   */\n      tag_159\n      jump\t// in\n    tag_229:\n        /* \"#utility.yul\":4526:4740   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4746:5075   */\n    tag_44:\n        /* \"#utility.yul\":4805:4811   */\n      0x00\n        /* \"#utility.yul\":4854:4856   */\n      0x20\n        /* \"#utility.yul\":4842:4851   */\n      dup3\n        /* \"#utility.yul\":4833:4840   */\n      dup5\n        /* \"#utility.yul\":4829:4852   */\n      sub\n        /* \"#utility.yul\":4825:4857   */\n      slt\n        /* \"#utility.yul\":4822:4941   */\n      iszero\n      tag_231\n      jumpi\n        /* \"#utility.yul\":4860:4939   */\n      tag_232\n      tag_146\n      jump\t// in\n    tag_232:\n        /* \"#utility.yul\":4822:4941   */\n    tag_231:\n        /* \"#utility.yul\":4980:4981   */\n      0x00\n        /* \"#utility.yul\":5005:5058   */\n      tag_233\n        /* \"#utility.yul\":5050:5057   */\n      dup5\n        /* \"#utility.yul\":5041:5047   */\n      dup3\n        /* \"#utility.yul\":5030:5039   */\n      dup6\n        /* \"#utility.yul\":5026:5048   */\n      add\n        /* \"#utility.yul\":5005:5058   */\n      tag_151\n      jump\t// in\n    tag_233:\n        /* \"#utility.yul\":4995:5058   */\n      swap2\n      pop\n        /* \"#utility.yul\":4951:5068   */\n      pop\n        /* \"#utility.yul\":4746:5075   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5081:5555   */\n    tag_60:\n        /* \"#utility.yul\":5149:5155   */\n      0x00\n        /* \"#utility.yul\":5157:5163   */\n      dup1\n        /* \"#utility.yul\":5206:5208   */\n      0x40\n        /* \"#utility.yul\":5194:5203   */\n      dup4\n        /* \"#utility.yul\":5185:5192   */\n      dup6\n        /* \"#utility.yul\":5181:5204   */\n      sub\n        /* \"#utility.yul\":5177:5209   */\n      slt\n        /* \"#utility.yul\":5174:5293   */\n      iszero\n      tag_235\n      jumpi\n        /* \"#utility.yul\":5212:5291   */\n      tag_236\n      tag_146\n      jump\t// in\n    tag_236:\n        /* \"#utility.yul\":5174:5293   */\n    tag_235:\n        /* \"#utility.yul\":5332:5333   */\n      0x00\n        /* \"#utility.yul\":5357:5410   */\n      tag_237\n        /* \"#utility.yul\":5402:5409   */\n      dup6\n        /* \"#utility.yul\":5393:5399   */\n      dup3\n        /* \"#utility.yul\":5382:5391   */\n      dup7\n        /* \"#utility.yul\":5378:5400   */\n      add\n        /* \"#utility.yul\":5357:5410   */\n      tag_151\n      jump\t// in\n    tag_237:\n        /* \"#utility.yul\":5347:5410   */\n      swap3\n      pop\n        /* \"#utility.yul\":5303:5420   */\n      pop\n        /* \"#utility.yul\":5459:5461   */\n      0x20\n        /* \"#utility.yul\":5485:5538   */\n      tag_238\n        /* \"#utility.yul\":5530:5537   */\n      dup6\n        /* \"#utility.yul\":5521:5527   */\n      dup3\n        /* \"#utility.yul\":5510:5519   */\n      dup7\n        /* \"#utility.yul\":5506:5528   */\n      add\n        /* \"#utility.yul\":5485:5538   */\n      tag_151\n      jump\t// in\n    tag_238:\n        /* \"#utility.yul\":5475:5538   */\n      swap2\n      pop\n        /* \"#utility.yul\":5430:5548   */\n      pop\n        /* \"#utility.yul\":5081:5555   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5561:5741   */\n    tag_160:\n        /* \"#utility.yul\":5609:5686   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":5606:5607   */\n      0x00\n        /* \"#utility.yul\":5599:5687   */\n      mstore\n        /* \"#utility.yul\":5706:5710   */\n      0x22\n        /* \"#utility.yul\":5703:5704   */\n      0x04\n        /* \"#utility.yul\":5696:5711   */\n      mstore\n        /* \"#utility.yul\":5730:5734   */\n      0x24\n        /* \"#utility.yul\":5727:5728   */\n      0x00\n        /* \"#utility.yul\":5720:5735   */\n      revert\n        /* \"#utility.yul\":5747:6067   */\n    tag_65:\n        /* \"#utility.yul\":5791:5797   */\n      0x00\n        /* \"#utility.yul\":5828:5829   */\n      0x02\n        /* \"#utility.yul\":5822:5826   */\n      dup3\n        /* \"#utility.yul\":5818:5830   */\n      div\n        /* \"#utility.yul\":5808:5830   */\n      swap1\n      pop\n        /* \"#utility.yul\":5875:5876   */\n      0x01\n        /* \"#utility.yul\":5869:5873   */\n      dup3\n        /* \"#utility.yul\":5865:5877   */\n      and\n        /* \"#utility.yul\":5896:5914   */\n      dup1\n        /* \"#utility.yul\":5886:5967   */\n      tag_241\n      jumpi\n        /* \"#utility.yul\":5952:5956   */\n      0x7f\n        /* \"#utility.yul\":5944:5950   */\n      dup3\n        /* \"#utility.yul\":5940:5957   */\n      and\n        /* \"#utility.yul\":5930:5957   */\n      swap2\n      pop\n        /* \"#utility.yul\":5886:5967   */\n    tag_241:\n        /* \"#utility.yul\":6014:6016   */\n      0x20\n        /* \"#utility.yul\":6006:6012   */\n      dup3\n        /* \"#utility.yul\":6003:6017   */\n      lt\n        /* \"#utility.yul\":5983:6001   */\n      dup2\n        /* \"#utility.yul\":5980:6018   */\n      sub\n        /* \"#utility.yul\":5977:6061   */\n      tag_242\n      jumpi\n        /* \"#utility.yul\":6033:6051   */\n      tag_243\n      tag_160\n      jump\t// in\n    tag_243:\n        /* \"#utility.yul\":5977:6061   */\n    tag_242:\n        /* \"#utility.yul\":5798:6067   */\n      pop\n        /* \"#utility.yul\":5747:6067   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6073:6253   */\n    tag_161:\n        /* \"#utility.yul\":6121:6198   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":6118:6119   */\n      0x00\n        /* \"#utility.yul\":6111:6199   */\n      mstore\n        /* \"#utility.yul\":6218:6222   */\n      0x11\n        /* \"#utility.yul\":6215:6216   */\n      0x04\n        /* \"#utility.yul\":6208:6223   */\n      mstore\n        /* \"#utility.yul\":6242:6246   */\n      0x24\n        /* \"#utility.yul\":6239:6240   */\n      0x00\n        /* \"#utility.yul\":6232:6247   */\n      revert\n        /* \"#utility.yul\":6259:6450   */\n    tag_88:\n        /* \"#utility.yul\":6299:6302   */\n      0x00\n        /* \"#utility.yul\":6318:6338   */\n      tag_246\n        /* \"#utility.yul\":6336:6337   */\n      dup3\n        /* \"#utility.yul\":6318:6338   */\n      tag_152\n      jump\t// in\n    tag_246:\n        /* \"#utility.yul\":6313:6338   */\n      swap2\n      pop\n        /* \"#utility.yul\":6352:6372   */\n      tag_247\n        /* \"#utility.yul\":6370:6371   */\n      dup4\n        /* \"#utility.yul\":6352:6372   */\n      tag_152\n      jump\t// in\n    tag_247:\n        /* \"#utility.yul\":6347:6372   */\n      swap3\n      pop\n        /* \"#utility.yul\":6395:6396   */\n      dup3\n        /* \"#utility.yul\":6392:6393   */\n      dup3\n        /* \"#utility.yul\":6388:6397   */\n      add\n        /* \"#utility.yul\":6381:6397   */\n      swap1\n      pop\n        /* \"#utility.yul\":6416:6419   */\n      dup1\n        /* \"#utility.yul\":6413:6414   */\n      dup3\n        /* \"#utility.yul\":6410:6420   */\n      gt\n        /* \"#utility.yul\":6407:6443   */\n      iszero\n      tag_248\n      jumpi\n        /* \"#utility.yul\":6423:6441   */\n      tag_249\n      tag_161\n      jump\t// in\n    tag_249:\n        /* \"#utility.yul\":6407:6443   */\n    tag_248:\n        /* \"#utility.yul\":6259:6450   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6456:6680   */\n    tag_162:\n        /* \"#utility.yul\":6596:6630   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":6592:6593   */\n      0x00\n        /* \"#utility.yul\":6584:6590   */\n      dup3\n        /* \"#utility.yul\":6580:6594   */\n      add\n        /* \"#utility.yul\":6573:6631   */\n      mstore\n        /* \"#utility.yul\":6665:6672   */\n      0x207a65726f000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":6660:6662   */\n      0x20\n        /* \"#utility.yul\":6652:6658   */\n      dup3\n        /* \"#utility.yul\":6648:6663   */\n      add\n        /* \"#utility.yul\":6641:6673   */\n      mstore\n        /* \"#utility.yul\":6456:6680   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6686:7052   */\n    tag_163:\n        /* \"#utility.yul\":6828:6831   */\n      0x00\n        /* \"#utility.yul\":6849:6916   */\n      tag_252\n        /* \"#utility.yul\":6913:6915   */\n      0x25\n        /* \"#utility.yul\":6908:6911   */\n      dup4\n        /* \"#utility.yul\":6849:6916   */\n      tag_141\n      jump\t// in\n    tag_252:\n        /* \"#utility.yul\":6842:6916   */\n      swap2\n      pop\n        /* \"#utility.yul\":6925:7018   */\n      tag_253\n        /* \"#utility.yul\":7014:7017   */\n      dup3\n        /* \"#utility.yul\":6925:7018   */\n      tag_162\n      jump\t// in\n    tag_253:\n        /* \"#utility.yul\":7043:7045   */\n      0x40\n        /* \"#utility.yul\":7038:7041   */\n      dup3\n        /* \"#utility.yul\":7034:7046   */\n      add\n        /* \"#utility.yul\":7027:7046   */\n      swap1\n      pop\n        /* \"#utility.yul\":6686:7052   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7058:7477   */\n    tag_101:\n        /* \"#utility.yul\":7224:7228   */\n      0x00\n        /* \"#utility.yul\":7262:7264   */\n      0x20\n        /* \"#utility.yul\":7251:7260   */\n      dup3\n        /* \"#utility.yul\":7247:7265   */\n      add\n        /* \"#utility.yul\":7239:7265   */\n      swap1\n      pop\n        /* \"#utility.yul\":7311:7320   */\n      dup2\n        /* \"#utility.yul\":7305:7309   */\n      dup2\n        /* \"#utility.yul\":7301:7321   */\n      sub\n        /* \"#utility.yul\":7297:7298   */\n      0x00\n        /* \"#utility.yul\":7286:7295   */\n      dup4\n        /* \"#utility.yul\":7282:7299   */\n      add\n        /* \"#utility.yul\":7275:7322   */\n      mstore\n        /* \"#utility.yul\":7339:7470   */\n      tag_255\n        /* \"#utility.yul\":7465:7469   */\n      dup2\n        /* \"#utility.yul\":7339:7470   */\n      tag_163\n      jump\t// in\n    tag_255:\n        /* \"#utility.yul\":7331:7470   */\n      swap1\n      pop\n        /* \"#utility.yul\":7058:7477   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7483:7706   */\n    tag_164:\n        /* \"#utility.yul\":7623:7657   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":7619:7620   */\n      0x00\n        /* \"#utility.yul\":7611:7617   */\n      dup3\n        /* \"#utility.yul\":7607:7621   */\n      add\n        /* \"#utility.yul\":7600:7658   */\n      mstore\n        /* \"#utility.yul\":7692:7698   */\n      0x7265737300000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":7687:7689   */\n      0x20\n        /* \"#utility.yul\":7679:7685   */\n      dup3\n        /* \"#utility.yul\":7675:7690   */\n      add\n        /* \"#utility.yul\":7668:7699   */\n      mstore\n        /* \"#utility.yul\":7483:7706   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7712:8078   */\n    tag_165:\n        /* \"#utility.yul\":7854:7857   */\n      0x00\n        /* \"#utility.yul\":7875:7942   */\n      tag_258\n        /* \"#utility.yul\":7939:7941   */\n      0x24\n        /* \"#utility.yul\":7934:7937   */\n      dup4\n        /* \"#utility.yul\":7875:7942   */\n      tag_141\n      jump\t// in\n    tag_258:\n        /* \"#utility.yul\":7868:7942   */\n      swap2\n      pop\n        /* \"#utility.yul\":7951:8044   */\n      tag_259\n        /* \"#utility.yul\":8040:8043   */\n      dup3\n        /* \"#utility.yul\":7951:8044   */\n      tag_164\n      jump\t// in\n    tag_259:\n        /* \"#utility.yul\":8069:8071   */\n      0x40\n        /* \"#utility.yul\":8064:8067   */\n      dup3\n        /* \"#utility.yul\":8060:8072   */\n      add\n        /* \"#utility.yul\":8053:8072   */\n      swap1\n      pop\n        /* \"#utility.yul\":7712:8078   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8084:8503   */\n    tag_111:\n        /* \"#utility.yul\":8250:8254   */\n      0x00\n        /* \"#utility.yul\":8288:8290   */\n      0x20\n        /* \"#utility.yul\":8277:8286   */\n      dup3\n        /* \"#utility.yul\":8273:8291   */\n      add\n        /* \"#utility.yul\":8265:8291   */\n      swap1\n      pop\n        /* \"#utility.yul\":8337:8346   */\n      dup2\n        /* \"#utility.yul\":8331:8335   */\n      dup2\n        /* \"#utility.yul\":8327:8347   */\n      sub\n        /* \"#utility.yul\":8323:8324   */\n      0x00\n        /* \"#utility.yul\":8312:8321   */\n      dup4\n        /* \"#utility.yul\":8308:8325   */\n      add\n        /* \"#utility.yul\":8301:8348   */\n      mstore\n        /* \"#utility.yul\":8365:8496   */\n      tag_261\n        /* \"#utility.yul\":8491:8495   */\n      dup2\n        /* \"#utility.yul\":8365:8496   */\n      tag_165\n      jump\t// in\n    tag_261:\n        /* \"#utility.yul\":8357:8496   */\n      swap1\n      pop\n        /* \"#utility.yul\":8084:8503   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8509:8730   */\n    tag_166:\n        /* \"#utility.yul\":8649:8683   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":8645:8646   */\n      0x00\n        /* \"#utility.yul\":8637:8643   */\n      dup3\n        /* \"#utility.yul\":8633:8647   */\n      add\n        /* \"#utility.yul\":8626:8684   */\n      mstore\n        /* \"#utility.yul\":8718:8722   */\n      0x7373000000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":8713:8715   */\n      0x20\n        /* \"#utility.yul\":8705:8711   */\n      dup3\n        /* \"#utility.yul\":8701:8716   */\n      add\n        /* \"#utility.yul\":8694:8723   */\n      mstore\n        /* \"#utility.yul\":8509:8730   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8736:9102   */\n    tag_167:\n        /* \"#utility.yul\":8878:8881   */\n      0x00\n        /* \"#utility.yul\":8899:8966   */\n      tag_264\n        /* \"#utility.yul\":8963:8965   */\n      0x22\n        /* \"#utility.yul\":8958:8961   */\n      dup4\n        /* \"#utility.yul\":8899:8966   */\n      tag_141\n      jump\t// in\n    tag_264:\n        /* \"#utility.yul\":8892:8966   */\n      swap2\n      pop\n        /* \"#utility.yul\":8975:9068   */\n      tag_265\n        /* \"#utility.yul\":9064:9067   */\n      dup3\n        /* \"#utility.yul\":8975:9068   */\n      tag_166\n      jump\t// in\n    tag_265:\n        /* \"#utility.yul\":9093:9095   */\n      0x40\n        /* \"#utility.yul\":9088:9091   */\n      dup3\n        /* \"#utility.yul\":9084:9096   */\n      add\n        /* \"#utility.yul\":9077:9096   */\n      swap1\n      pop\n        /* \"#utility.yul\":8736:9102   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9108:9527   */\n    tag_114:\n        /* \"#utility.yul\":9274:9278   */\n      0x00\n        /* \"#utility.yul\":9312:9314   */\n      0x20\n        /* \"#utility.yul\":9301:9310   */\n      dup3\n        /* \"#utility.yul\":9297:9315   */\n      add\n        /* \"#utility.yul\":9289:9315   */\n      swap1\n      pop\n        /* \"#utility.yul\":9361:9370   */\n      dup2\n        /* \"#utility.yul\":9355:9359   */\n      dup2\n        /* \"#utility.yul\":9351:9371   */\n      sub\n        /* \"#utility.yul\":9347:9348   */\n      0x00\n        /* \"#utility.yul\":9336:9345   */\n      dup4\n        /* \"#utility.yul\":9332:9349   */\n      add\n        /* \"#utility.yul\":9325:9372   */\n      mstore\n        /* \"#utility.yul\":9389:9520   */\n      tag_267\n        /* \"#utility.yul\":9515:9519   */\n      dup2\n        /* \"#utility.yul\":9389:9520   */\n      tag_167\n      jump\t// in\n    tag_267:\n        /* \"#utility.yul\":9381:9520   */\n      swap1\n      pop\n        /* \"#utility.yul\":9108:9527   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9533:9712   */\n    tag_168:\n        /* \"#utility.yul\":9673:9704   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":9669:9670   */\n      0x00\n        /* \"#utility.yul\":9661:9667   */\n      dup3\n        /* \"#utility.yul\":9657:9671   */\n      add\n        /* \"#utility.yul\":9650:9705   */\n      mstore\n        /* \"#utility.yul\":9533:9712   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9718:10084   */\n    tag_169:\n        /* \"#utility.yul\":9860:9863   */\n      0x00\n        /* \"#utility.yul\":9881:9948   */\n      tag_270\n        /* \"#utility.yul\":9945:9947   */\n      0x1d\n        /* \"#utility.yul\":9940:9943   */\n      dup4\n        /* \"#utility.yul\":9881:9948   */\n      tag_141\n      jump\t// in\n    tag_270:\n        /* \"#utility.yul\":9874:9948   */\n      swap2\n      pop\n        /* \"#utility.yul\":9957:10050   */\n      tag_271\n        /* \"#utility.yul\":10046:10049   */\n      dup3\n        /* \"#utility.yul\":9957:10050   */\n      tag_168\n      jump\t// in\n    tag_271:\n        /* \"#utility.yul\":10075:10077   */\n      0x20\n        /* \"#utility.yul\":10070:10073   */\n      dup3\n        /* \"#utility.yul\":10066:10078   */\n      add\n        /* \"#utility.yul\":10059:10078   */\n      swap1\n      pop\n        /* \"#utility.yul\":9718:10084   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10090:10509   */\n    tag_121:\n        /* \"#utility.yul\":10256:10260   */\n      0x00\n        /* \"#utility.yul\":10294:10296   */\n      0x20\n        /* \"#utility.yul\":10283:10292   */\n      dup3\n        /* \"#utility.yul\":10279:10297   */\n      add\n        /* \"#utility.yul\":10271:10297   */\n      swap1\n      pop\n        /* \"#utility.yul\":10343:10352   */\n      dup2\n        /* \"#utility.yul\":10337:10341   */\n      dup2\n        /* \"#utility.yul\":10333:10353   */\n      sub\n        /* \"#utility.yul\":10329:10330   */\n      0x00\n        /* \"#utility.yul\":10318:10327   */\n      dup4\n        /* \"#utility.yul\":10314:10331   */\n      add\n        /* \"#utility.yul\":10307:10354   */\n      mstore\n        /* \"#utility.yul\":10371:10502   */\n      tag_273\n        /* \"#utility.yul\":10497:10501   */\n      dup2\n        /* \"#utility.yul\":10371:10502   */\n      tag_169\n      jump\t// in\n    tag_273:\n        /* \"#utility.yul\":10363:10502   */\n      swap1\n      pop\n        /* \"#utility.yul\":10090:10509   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10515:10739   */\n    tag_170:\n        /* \"#utility.yul\":10655:10689   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":10651:10652   */\n      0x00\n        /* \"#utility.yul\":10643:10649   */\n      dup3\n        /* \"#utility.yul\":10639:10653   */\n      add\n        /* \"#utility.yul\":10632:10690   */\n      mstore\n        /* \"#utility.yul\":10724:10731   */\n      0x6472657373000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":10719:10721   */\n      0x20\n        /* \"#utility.yul\":10711:10717   */\n      dup3\n        /* \"#utility.yul\":10707:10722   */\n      add\n        /* \"#utility.yul\":10700:10732   */\n      mstore\n        /* \"#utility.yul\":10515:10739   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10745:11111   */\n    tag_171:\n        /* \"#utility.yul\":10887:10890   */\n      0x00\n        /* \"#utility.yul\":10908:10975   */\n      tag_276\n        /* \"#utility.yul\":10972:10974   */\n      0x25\n        /* \"#utility.yul\":10967:10970   */\n      dup4\n        /* \"#utility.yul\":10908:10975   */\n      tag_141\n      jump\t// in\n    tag_276:\n        /* \"#utility.yul\":10901:10975   */\n      swap2\n      pop\n        /* \"#utility.yul\":10984:11077   */\n      tag_277\n        /* \"#utility.yul\":11073:11076   */\n      dup3\n        /* \"#utility.yul\":10984:11077   */\n      tag_170\n      jump\t// in\n    tag_277:\n        /* \"#utility.yul\":11102:11104   */\n      0x40\n        /* \"#utility.yul\":11097:11100   */\n      dup3\n        /* \"#utility.yul\":11093:11105   */\n      add\n        /* \"#utility.yul\":11086:11105   */\n      swap1\n      pop\n        /* \"#utility.yul\":10745:11111   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11117:11536   */\n    tag_126:\n        /* \"#utility.yul\":11283:11287   */\n      0x00\n        /* \"#utility.yul\":11321:11323   */\n      0x20\n        /* \"#utility.yul\":11310:11319   */\n      dup3\n        /* \"#utility.yul\":11306:11324   */\n      add\n        /* \"#utility.yul\":11298:11324   */\n      swap1\n      pop\n        /* \"#utility.yul\":11370:11379   */\n      dup2\n        /* \"#utility.yul\":11364:11368   */\n      dup2\n        /* \"#utility.yul\":11360:11380   */\n      sub\n        /* \"#utility.yul\":11356:11357   */\n      0x00\n        /* \"#utility.yul\":11345:11354   */\n      dup4\n        /* \"#utility.yul\":11341:11358   */\n      add\n        /* \"#utility.yul\":11334:11381   */\n      mstore\n        /* \"#utility.yul\":11398:11529   */\n      tag_279\n        /* \"#utility.yul\":11524:11528   */\n      dup2\n        /* \"#utility.yul\":11398:11529   */\n      tag_171\n      jump\t// in\n    tag_279:\n        /* \"#utility.yul\":11390:11529   */\n      swap1\n      pop\n        /* \"#utility.yul\":11117:11536   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11542:11764   */\n    tag_172:\n        /* \"#utility.yul\":11682:11716   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":11678:11679   */\n      0x00\n        /* \"#utility.yul\":11670:11676   */\n      dup3\n        /* \"#utility.yul\":11666:11680   */\n      add\n        /* \"#utility.yul\":11659:11717   */\n      mstore\n        /* \"#utility.yul\":11751:11756   */\n      0x6573730000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":11746:11748   */\n      0x20\n        /* \"#utility.yul\":11738:11744   */\n      dup3\n        /* \"#utility.yul\":11734:11749   */\n      add\n        /* \"#utility.yul\":11727:11757   */\n      mstore\n        /* \"#utility.yul\":11542:11764   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11770:12136   */\n    tag_173:\n        /* \"#utility.yul\":11912:11915   */\n      0x00\n        /* \"#utility.yul\":11933:12000   */\n      tag_282\n        /* \"#utility.yul\":11997:11999   */\n      0x23\n        /* \"#utility.yul\":11992:11995   */\n      dup4\n        /* \"#utility.yul\":11933:12000   */\n      tag_141\n      jump\t// in\n    tag_282:\n        /* \"#utility.yul\":11926:12000   */\n      swap2\n      pop\n        /* \"#utility.yul\":12009:12102   */\n      tag_283\n        /* \"#utility.yul\":12098:12101   */\n      dup3\n        /* \"#utility.yul\":12009:12102   */\n      tag_172\n      jump\t// in\n    tag_283:\n        /* \"#utility.yul\":12127:12129   */\n      0x40\n        /* \"#utility.yul\":12122:12125   */\n      dup3\n        /* \"#utility.yul\":12118:12130   */\n      add\n        /* \"#utility.yul\":12111:12130   */\n      swap1\n      pop\n        /* \"#utility.yul\":11770:12136   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12142:12561   */\n    tag_129:\n        /* \"#utility.yul\":12308:12312   */\n      0x00\n        /* \"#utility.yul\":12346:12348   */\n      0x20\n        /* \"#utility.yul\":12335:12344   */\n      dup3\n        /* \"#utility.yul\":12331:12349   */\n      add\n        /* \"#utility.yul\":12323:12349   */\n      swap1\n      pop\n        /* \"#utility.yul\":12395:12404   */\n      dup2\n        /* \"#utility.yul\":12389:12393   */\n      dup2\n        /* \"#utility.yul\":12385:12405   */\n      sub\n        /* \"#utility.yul\":12381:12382   */\n      0x00\n        /* \"#utility.yul\":12370:12379   */\n      dup4\n        /* \"#utility.yul\":12366:12383   */\n      add\n        /* \"#utility.yul\":12359:12406   */\n      mstore\n        /* \"#utility.yul\":12423:12554   */\n      tag_285\n        /* \"#utility.yul\":12549:12553   */\n      dup2\n        /* \"#utility.yul\":12423:12554   */\n      tag_173\n      jump\t// in\n    tag_285:\n        /* \"#utility.yul\":12415:12554   */\n      swap1\n      pop\n        /* \"#utility.yul\":12142:12561   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12567:12792   */\n    tag_174:\n        /* \"#utility.yul\":12707:12741   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":12703:12704   */\n      0x00\n        /* \"#utility.yul\":12695:12701   */\n      dup3\n        /* \"#utility.yul\":12691:12705   */\n      add\n        /* \"#utility.yul\":12684:12742   */\n      mstore\n        /* \"#utility.yul\":12776:12784   */\n      0x616c616e63650000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":12771:12773   */\n      0x20\n        /* \"#utility.yul\":12763:12769   */\n      dup3\n        /* \"#utility.yul\":12759:12774   */\n      add\n        /* \"#utility.yul\":12752:12785   */\n      mstore\n        /* \"#utility.yul\":12567:12792   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12798:13164   */\n    tag_175:\n        /* \"#utility.yul\":12940:12943   */\n      0x00\n        /* \"#utility.yul\":12961:13028   */\n      tag_288\n        /* \"#utility.yul\":13025:13027   */\n      0x26\n        /* \"#utility.yul\":13020:13023   */\n      dup4\n        /* \"#utility.yul\":12961:13028   */\n      tag_141\n      jump\t// in\n    tag_288:\n        /* \"#utility.yul\":12954:13028   */\n      swap2\n      pop\n        /* \"#utility.yul\":13037:13130   */\n      tag_289\n        /* \"#utility.yul\":13126:13129   */\n      dup3\n        /* \"#utility.yul\":13037:13130   */\n      tag_174\n      jump\t// in\n    tag_289:\n        /* \"#utility.yul\":13155:13157   */\n      0x40\n        /* \"#utility.yul\":13150:13153   */\n      dup3\n        /* \"#utility.yul\":13146:13158   */\n      add\n        /* \"#utility.yul\":13139:13158   */\n      swap1\n      pop\n        /* \"#utility.yul\":12798:13164   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13170:13589   */\n    tag_134:\n        /* \"#utility.yul\":13336:13340   */\n      0x00\n        /* \"#utility.yul\":13374:13376   */\n      0x20\n        /* \"#utility.yul\":13363:13372   */\n      dup3\n        /* \"#utility.yul\":13359:13377   */\n      add\n        /* \"#utility.yul\":13351:13377   */\n      swap1\n      pop\n        /* \"#utility.yul\":13423:13432   */\n      dup2\n        /* \"#utility.yul\":13417:13421   */\n      dup2\n        /* \"#utility.yul\":13413:13433   */\n      sub\n        /* \"#utility.yul\":13409:13410   */\n      0x00\n        /* \"#utility.yul\":13398:13407   */\n      dup4\n        /* \"#utility.yul\":13394:13411   */\n      add\n        /* \"#utility.yul\":13387:13434   */\n      mstore\n        /* \"#utility.yul\":13451:13582   */\n      tag_291\n        /* \"#utility.yul\":13577:13581   */\n      dup2\n        /* \"#utility.yul\":13451:13582   */\n      tag_175\n      jump\t// in\n    tag_291:\n        /* \"#utility.yul\":13443:13582   */\n      swap1\n      pop\n        /* \"#utility.yul\":13170:13589   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212205c7b8c5f8721b076c916c8dbb5738d63065fca3641280c99b318c7d5db14527864736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_44": {
									"entryPoint": null,
									"id": 44,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_decode_available_length_t_string_memory_ptr_fromMemory": {
									"entryPoint": 311,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_t_string_memory_ptr_fromMemory": {
									"entryPoint": 376,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory": {
									"entryPoint": 421,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"allocate_memory": {
									"entryPoint": 223,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": 88,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_allocation_size_t_string_memory_ptr": {
									"entryPoint": 249,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_dataslot_t_string_storage": {
									"entryPoint": 642,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 539,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_t_string_storage": {
									"entryPoint": 927,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"cleanup_t_uint256": {
									"entryPoint": 768,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"clear_storage_range_t_bytes1": {
									"entryPoint": 893,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"convert_t_uint256_to_t_uint256": {
									"entryPoint": 786,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 1064,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 297,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"divide_by_32_ceil": {
									"entryPoint": 660,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 594,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": 1037,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 174,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"identity": {
									"entryPoint": 777,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mask_bytes_dynamic": {
									"entryPoint": 1009,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x22": {
									"entryPoint": 549,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 129,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"prepare_store_t_uint256": {
									"entryPoint": 819,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
									"entryPoint": 105,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
									"entryPoint": 109,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": 101,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 97,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 113,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"shift_left_dynamic": {
									"entryPoint": 675,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"shift_right_unsigned_dynamic": {
									"entryPoint": 997,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"storage_set_to_zero_t_uint256": {
									"entryPoint": 869,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"update_byte_slice_dynamic32": {
									"entryPoint": 687,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"update_storage_value_t_uint256_to_t_uint256": {
									"entryPoint": 828,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"zero_value_for_split_t_uint256": {
									"entryPoint": 865,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:8467:11",
										"nodeType": "YulBlock",
										"src": "0:8467:11",
										"statements": [
											{
												"body": {
													"nativeSrc": "47:35:11",
													"nodeType": "YulBlock",
													"src": "47:35:11",
													"statements": [
														{
															"nativeSrc": "57:19:11",
															"nodeType": "YulAssignment",
															"src": "57:19:11",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "73:2:11",
																		"nodeType": "YulLiteral",
																		"src": "73:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "67:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:11"
																},
																"nativeSrc": "67:9:11",
																"nodeType": "YulFunctionCall",
																"src": "67:9:11"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "57:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:11"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "7:75:11",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "40:6:11",
														"nodeType": "YulTypedName",
														"src": "40:6:11",
														"type": ""
													}
												],
												"src": "7:75:11"
											},
											{
												"body": {
													"nativeSrc": "177:28:11",
													"nodeType": "YulBlock",
													"src": "177:28:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "194:1:11",
																		"nodeType": "YulLiteral",
																		"src": "194:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "197:1:11",
																		"nodeType": "YulLiteral",
																		"src": "197:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "187:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:11"
																},
																"nativeSrc": "187:12:11",
																"nodeType": "YulFunctionCall",
																"src": "187:12:11"
															},
															"nativeSrc": "187:12:11",
															"nodeType": "YulExpressionStatement",
															"src": "187:12:11"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "88:117:11",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:11"
											},
											{
												"body": {
													"nativeSrc": "300:28:11",
													"nodeType": "YulBlock",
													"src": "300:28:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "317:1:11",
																		"nodeType": "YulLiteral",
																		"src": "317:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "320:1:11",
																		"nodeType": "YulLiteral",
																		"src": "320:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "310:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:11"
																},
																"nativeSrc": "310:12:11",
																"nodeType": "YulFunctionCall",
																"src": "310:12:11"
															},
															"nativeSrc": "310:12:11",
															"nodeType": "YulExpressionStatement",
															"src": "310:12:11"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "211:117:11",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:11"
											},
											{
												"body": {
													"nativeSrc": "423:28:11",
													"nodeType": "YulBlock",
													"src": "423:28:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "440:1:11",
																		"nodeType": "YulLiteral",
																		"src": "440:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "443:1:11",
																		"nodeType": "YulLiteral",
																		"src": "443:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "433:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "433:6:11"
																},
																"nativeSrc": "433:12:11",
																"nodeType": "YulFunctionCall",
																"src": "433:12:11"
															},
															"nativeSrc": "433:12:11",
															"nodeType": "YulExpressionStatement",
															"src": "433:12:11"
														}
													]
												},
												"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
												"nativeSrc": "334:117:11",
												"nodeType": "YulFunctionDefinition",
												"src": "334:117:11"
											},
											{
												"body": {
													"nativeSrc": "546:28:11",
													"nodeType": "YulBlock",
													"src": "546:28:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "563:1:11",
																		"nodeType": "YulLiteral",
																		"src": "563:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "566:1:11",
																		"nodeType": "YulLiteral",
																		"src": "566:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "556:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "556:6:11"
																},
																"nativeSrc": "556:12:11",
																"nodeType": "YulFunctionCall",
																"src": "556:12:11"
															},
															"nativeSrc": "556:12:11",
															"nodeType": "YulExpressionStatement",
															"src": "556:12:11"
														}
													]
												},
												"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
												"nativeSrc": "457:117:11",
												"nodeType": "YulFunctionDefinition",
												"src": "457:117:11"
											},
											{
												"body": {
													"nativeSrc": "628:54:11",
													"nodeType": "YulBlock",
													"src": "628:54:11",
													"statements": [
														{
															"nativeSrc": "638:38:11",
															"nodeType": "YulAssignment",
															"src": "638:38:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "656:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "656:5:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "663:2:11",
																				"nodeType": "YulLiteral",
																				"src": "663:2:11",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "652:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "652:3:11"
																		},
																		"nativeSrc": "652:14:11",
																		"nodeType": "YulFunctionCall",
																		"src": "652:14:11"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "672:2:11",
																				"nodeType": "YulLiteral",
																				"src": "672:2:11",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "668:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "668:3:11"
																		},
																		"nativeSrc": "668:7:11",
																		"nodeType": "YulFunctionCall",
																		"src": "668:7:11"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "648:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "648:3:11"
																},
																"nativeSrc": "648:28:11",
																"nodeType": "YulFunctionCall",
																"src": "648:28:11"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "638:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "638:6:11"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nativeSrc": "580:102:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "611:5:11",
														"nodeType": "YulTypedName",
														"src": "611:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "621:6:11",
														"nodeType": "YulTypedName",
														"src": "621:6:11",
														"type": ""
													}
												],
												"src": "580:102:11"
											},
											{
												"body": {
													"nativeSrc": "716:152:11",
													"nodeType": "YulBlock",
													"src": "716:152:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "733:1:11",
																		"nodeType": "YulLiteral",
																		"src": "733:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "736:77:11",
																		"nodeType": "YulLiteral",
																		"src": "736:77:11",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "726:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "726:6:11"
																},
																"nativeSrc": "726:88:11",
																"nodeType": "YulFunctionCall",
																"src": "726:88:11"
															},
															"nativeSrc": "726:88:11",
															"nodeType": "YulExpressionStatement",
															"src": "726:88:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "830:1:11",
																		"nodeType": "YulLiteral",
																		"src": "830:1:11",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "833:4:11",
																		"nodeType": "YulLiteral",
																		"src": "833:4:11",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "823:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "823:6:11"
																},
																"nativeSrc": "823:15:11",
																"nodeType": "YulFunctionCall",
																"src": "823:15:11"
															},
															"nativeSrc": "823:15:11",
															"nodeType": "YulExpressionStatement",
															"src": "823:15:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "854:1:11",
																		"nodeType": "YulLiteral",
																		"src": "854:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "857:4:11",
																		"nodeType": "YulLiteral",
																		"src": "857:4:11",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "847:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "847:6:11"
																},
																"nativeSrc": "847:15:11",
																"nodeType": "YulFunctionCall",
																"src": "847:15:11"
															},
															"nativeSrc": "847:15:11",
															"nodeType": "YulExpressionStatement",
															"src": "847:15:11"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "688:180:11",
												"nodeType": "YulFunctionDefinition",
												"src": "688:180:11"
											},
											{
												"body": {
													"nativeSrc": "917:238:11",
													"nodeType": "YulBlock",
													"src": "917:238:11",
													"statements": [
														{
															"nativeSrc": "927:58:11",
															"nodeType": "YulVariableDeclaration",
															"src": "927:58:11",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nativeSrc": "949:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "949:6:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "size",
																				"nativeSrc": "979:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "979:4:11"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nativeSrc": "957:21:11",
																			"nodeType": "YulIdentifier",
																			"src": "957:21:11"
																		},
																		"nativeSrc": "957:27:11",
																		"nodeType": "YulFunctionCall",
																		"src": "957:27:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "945:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "945:3:11"
																},
																"nativeSrc": "945:40:11",
																"nodeType": "YulFunctionCall",
																"src": "945:40:11"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nativeSrc": "931:10:11",
																	"nodeType": "YulTypedName",
																	"src": "931:10:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1096:22:11",
																"nodeType": "YulBlock",
																"src": "1096:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "1098:16:11",
																				"nodeType": "YulIdentifier",
																				"src": "1098:16:11"
																			},
																			"nativeSrc": "1098:18:11",
																			"nodeType": "YulFunctionCall",
																			"src": "1098:18:11"
																		},
																		"nativeSrc": "1098:18:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "1098:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nativeSrc": "1039:10:11",
																				"nodeType": "YulIdentifier",
																				"src": "1039:10:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1051:18:11",
																				"nodeType": "YulLiteral",
																				"src": "1051:18:11",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nativeSrc": "1036:2:11",
																			"nodeType": "YulIdentifier",
																			"src": "1036:2:11"
																		},
																		"nativeSrc": "1036:34:11",
																		"nodeType": "YulFunctionCall",
																		"src": "1036:34:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nativeSrc": "1075:10:11",
																				"nodeType": "YulIdentifier",
																				"src": "1075:10:11"
																			},
																			{
																				"name": "memPtr",
																				"nativeSrc": "1087:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "1087:6:11"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "1072:2:11",
																			"nodeType": "YulIdentifier",
																			"src": "1072:2:11"
																		},
																		"nativeSrc": "1072:22:11",
																		"nodeType": "YulFunctionCall",
																		"src": "1072:22:11"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "1033:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "1033:2:11"
																},
																"nativeSrc": "1033:62:11",
																"nodeType": "YulFunctionCall",
																"src": "1033:62:11"
															},
															"nativeSrc": "1030:88:11",
															"nodeType": "YulIf",
															"src": "1030:88:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1134:2:11",
																		"nodeType": "YulLiteral",
																		"src": "1134:2:11",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nativeSrc": "1138:10:11",
																		"nodeType": "YulIdentifier",
																		"src": "1138:10:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1127:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1127:6:11"
																},
																"nativeSrc": "1127:22:11",
																"nodeType": "YulFunctionCall",
																"src": "1127:22:11"
															},
															"nativeSrc": "1127:22:11",
															"nodeType": "YulExpressionStatement",
															"src": "1127:22:11"
														}
													]
												},
												"name": "finalize_allocation",
												"nativeSrc": "874:281:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "903:6:11",
														"nodeType": "YulTypedName",
														"src": "903:6:11",
														"type": ""
													},
													{
														"name": "size",
														"nativeSrc": "911:4:11",
														"nodeType": "YulTypedName",
														"src": "911:4:11",
														"type": ""
													}
												],
												"src": "874:281:11"
											},
											{
												"body": {
													"nativeSrc": "1202:88:11",
													"nodeType": "YulBlock",
													"src": "1202:88:11",
													"statements": [
														{
															"nativeSrc": "1212:30:11",
															"nodeType": "YulAssignment",
															"src": "1212:30:11",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "allocate_unbounded",
																	"nativeSrc": "1222:18:11",
																	"nodeType": "YulIdentifier",
																	"src": "1222:18:11"
																},
																"nativeSrc": "1222:20:11",
																"nodeType": "YulFunctionCall",
																"src": "1222:20:11"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "1212:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1212:6:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nativeSrc": "1271:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "1271:6:11"
																	},
																	{
																		"name": "size",
																		"nativeSrc": "1279:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "1279:4:11"
																	}
																],
																"functionName": {
																	"name": "finalize_allocation",
																	"nativeSrc": "1251:19:11",
																	"nodeType": "YulIdentifier",
																	"src": "1251:19:11"
																},
																"nativeSrc": "1251:33:11",
																"nodeType": "YulFunctionCall",
																"src": "1251:33:11"
															},
															"nativeSrc": "1251:33:11",
															"nodeType": "YulExpressionStatement",
															"src": "1251:33:11"
														}
													]
												},
												"name": "allocate_memory",
												"nativeSrc": "1161:129:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nativeSrc": "1186:4:11",
														"nodeType": "YulTypedName",
														"src": "1186:4:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "1195:6:11",
														"nodeType": "YulTypedName",
														"src": "1195:6:11",
														"type": ""
													}
												],
												"src": "1161:129:11"
											},
											{
												"body": {
													"nativeSrc": "1363:241:11",
													"nodeType": "YulBlock",
													"src": "1363:241:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "1468:22:11",
																"nodeType": "YulBlock",
																"src": "1468:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "1470:16:11",
																				"nodeType": "YulIdentifier",
																				"src": "1470:16:11"
																			},
																			"nativeSrc": "1470:18:11",
																			"nodeType": "YulFunctionCall",
																			"src": "1470:18:11"
																		},
																		"nativeSrc": "1470:18:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "1470:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "1440:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "1440:6:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1448:18:11",
																		"nodeType": "YulLiteral",
																		"src": "1448:18:11",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "1437:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "1437:2:11"
																},
																"nativeSrc": "1437:30:11",
																"nodeType": "YulFunctionCall",
																"src": "1437:30:11"
															},
															"nativeSrc": "1434:56:11",
															"nodeType": "YulIf",
															"src": "1434:56:11"
														},
														{
															"nativeSrc": "1500:37:11",
															"nodeType": "YulAssignment",
															"src": "1500:37:11",
															"value": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "1530:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "1530:6:11"
																	}
																],
																"functionName": {
																	"name": "round_up_to_mul_of_32",
																	"nativeSrc": "1508:21:11",
																	"nodeType": "YulIdentifier",
																	"src": "1508:21:11"
																},
																"nativeSrc": "1508:29:11",
																"nodeType": "YulFunctionCall",
																"src": "1508:29:11"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nativeSrc": "1500:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "1500:4:11"
																}
															]
														},
														{
															"nativeSrc": "1574:23:11",
															"nodeType": "YulAssignment",
															"src": "1574:23:11",
															"value": {
																"arguments": [
																	{
																		"name": "size",
																		"nativeSrc": "1586:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "1586:4:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1592:4:11",
																		"nodeType": "YulLiteral",
																		"src": "1592:4:11",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1582:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "1582:3:11"
																},
																"nativeSrc": "1582:15:11",
																"nodeType": "YulFunctionCall",
																"src": "1582:15:11"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nativeSrc": "1574:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "1574:4:11"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_t_string_memory_ptr",
												"nativeSrc": "1296:308:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nativeSrc": "1347:6:11",
														"nodeType": "YulTypedName",
														"src": "1347:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nativeSrc": "1358:4:11",
														"nodeType": "YulTypedName",
														"src": "1358:4:11",
														"type": ""
													}
												],
												"src": "1296:308:11"
											},
											{
												"body": {
													"nativeSrc": "1672:77:11",
													"nodeType": "YulBlock",
													"src": "1672:77:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nativeSrc": "1689:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "1689:3:11"
																	},
																	{
																		"name": "src",
																		"nativeSrc": "1694:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "1694:3:11"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "1699:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "1699:6:11"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "1683:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "1683:5:11"
																},
																"nativeSrc": "1683:23:11",
																"nodeType": "YulFunctionCall",
																"src": "1683:23:11"
															},
															"nativeSrc": "1683:23:11",
															"nodeType": "YulExpressionStatement",
															"src": "1683:23:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nativeSrc": "1726:3:11",
																				"nodeType": "YulIdentifier",
																				"src": "1726:3:11"
																			},
																			{
																				"name": "length",
																				"nativeSrc": "1731:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "1731:6:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1722:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "1722:3:11"
																		},
																		"nativeSrc": "1722:16:11",
																		"nodeType": "YulFunctionCall",
																		"src": "1722:16:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1740:1:11",
																		"nodeType": "YulLiteral",
																		"src": "1740:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1715:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1715:6:11"
																},
																"nativeSrc": "1715:27:11",
																"nodeType": "YulFunctionCall",
																"src": "1715:27:11"
															},
															"nativeSrc": "1715:27:11",
															"nodeType": "YulExpressionStatement",
															"src": "1715:27:11"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "1610:139:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nativeSrc": "1654:3:11",
														"nodeType": "YulTypedName",
														"src": "1654:3:11",
														"type": ""
													},
													{
														"name": "dst",
														"nativeSrc": "1659:3:11",
														"nodeType": "YulTypedName",
														"src": "1659:3:11",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "1664:6:11",
														"nodeType": "YulTypedName",
														"src": "1664:6:11",
														"type": ""
													}
												],
												"src": "1610:139:11"
											},
											{
												"body": {
													"nativeSrc": "1850:339:11",
													"nodeType": "YulBlock",
													"src": "1850:339:11",
													"statements": [
														{
															"nativeSrc": "1860:75:11",
															"nodeType": "YulAssignment",
															"src": "1860:75:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "1927:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "1927:6:11"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_string_memory_ptr",
																			"nativeSrc": "1885:41:11",
																			"nodeType": "YulIdentifier",
																			"src": "1885:41:11"
																		},
																		"nativeSrc": "1885:49:11",
																		"nodeType": "YulFunctionCall",
																		"src": "1885:49:11"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nativeSrc": "1869:15:11",
																	"nodeType": "YulIdentifier",
																	"src": "1869:15:11"
																},
																"nativeSrc": "1869:66:11",
																"nodeType": "YulFunctionCall",
																"src": "1869:66:11"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nativeSrc": "1860:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "1860:5:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nativeSrc": "1951:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "1951:5:11"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "1958:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "1958:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1944:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1944:6:11"
																},
																"nativeSrc": "1944:21:11",
																"nodeType": "YulFunctionCall",
																"src": "1944:21:11"
															},
															"nativeSrc": "1944:21:11",
															"nodeType": "YulExpressionStatement",
															"src": "1944:21:11"
														},
														{
															"nativeSrc": "1974:27:11",
															"nodeType": "YulVariableDeclaration",
															"src": "1974:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nativeSrc": "1989:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "1989:5:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1996:4:11",
																		"nodeType": "YulLiteral",
																		"src": "1996:4:11",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1985:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "1985:3:11"
																},
																"nativeSrc": "1985:16:11",
																"nodeType": "YulFunctionCall",
																"src": "1985:16:11"
															},
															"variables": [
																{
																	"name": "dst",
																	"nativeSrc": "1978:3:11",
																	"nodeType": "YulTypedName",
																	"src": "1978:3:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2039:83:11",
																"nodeType": "YulBlock",
																"src": "2039:83:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
																				"nativeSrc": "2041:77:11",
																				"nodeType": "YulIdentifier",
																				"src": "2041:77:11"
																			},
																			"nativeSrc": "2041:79:11",
																			"nodeType": "YulFunctionCall",
																			"src": "2041:79:11"
																		},
																		"nativeSrc": "2041:79:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "2041:79:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nativeSrc": "2020:3:11",
																				"nodeType": "YulIdentifier",
																				"src": "2020:3:11"
																			},
																			{
																				"name": "length",
																				"nativeSrc": "2025:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "2025:6:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2016:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "2016:3:11"
																		},
																		"nativeSrc": "2016:16:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2016:16:11"
																	},
																	{
																		"name": "end",
																		"nativeSrc": "2034:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "2034:3:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2013:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "2013:2:11"
																},
																"nativeSrc": "2013:25:11",
																"nodeType": "YulFunctionCall",
																"src": "2013:25:11"
															},
															"nativeSrc": "2010:112:11",
															"nodeType": "YulIf",
															"src": "2010:112:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "src",
																		"nativeSrc": "2166:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "2166:3:11"
																	},
																	{
																		"name": "dst",
																		"nativeSrc": "2171:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "2171:3:11"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "2176:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "2176:6:11"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nativeSrc": "2131:34:11",
																	"nodeType": "YulIdentifier",
																	"src": "2131:34:11"
																},
																"nativeSrc": "2131:52:11",
																"nodeType": "YulFunctionCall",
																"src": "2131:52:11"
															},
															"nativeSrc": "2131:52:11",
															"nodeType": "YulExpressionStatement",
															"src": "2131:52:11"
														}
													]
												},
												"name": "abi_decode_available_length_t_string_memory_ptr_fromMemory",
												"nativeSrc": "1755:434:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nativeSrc": "1823:3:11",
														"nodeType": "YulTypedName",
														"src": "1823:3:11",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "1828:6:11",
														"nodeType": "YulTypedName",
														"src": "1828:6:11",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "1836:3:11",
														"nodeType": "YulTypedName",
														"src": "1836:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nativeSrc": "1844:5:11",
														"nodeType": "YulTypedName",
														"src": "1844:5:11",
														"type": ""
													}
												],
												"src": "1755:434:11"
											},
											{
												"body": {
													"nativeSrc": "2282:282:11",
													"nodeType": "YulBlock",
													"src": "2282:282:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "2331:83:11",
																"nodeType": "YulBlock",
																"src": "2331:83:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
																				"nativeSrc": "2333:77:11",
																				"nodeType": "YulIdentifier",
																				"src": "2333:77:11"
																			},
																			"nativeSrc": "2333:79:11",
																			"nodeType": "YulFunctionCall",
																			"src": "2333:79:11"
																		},
																		"nativeSrc": "2333:79:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "2333:79:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nativeSrc": "2310:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "2310:6:11"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "2318:4:11",
																						"nodeType": "YulLiteral",
																						"src": "2318:4:11",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2306:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "2306:3:11"
																				},
																				"nativeSrc": "2306:17:11",
																				"nodeType": "YulFunctionCall",
																				"src": "2306:17:11"
																			},
																			{
																				"name": "end",
																				"nativeSrc": "2325:3:11",
																				"nodeType": "YulIdentifier",
																				"src": "2325:3:11"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nativeSrc": "2302:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "2302:3:11"
																		},
																		"nativeSrc": "2302:27:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2302:27:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2295:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "2295:6:11"
																},
																"nativeSrc": "2295:35:11",
																"nodeType": "YulFunctionCall",
																"src": "2295:35:11"
															},
															"nativeSrc": "2292:122:11",
															"nodeType": "YulIf",
															"src": "2292:122:11"
														},
														{
															"nativeSrc": "2423:27:11",
															"nodeType": "YulVariableDeclaration",
															"src": "2423:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "2443:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "2443:6:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "2437:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "2437:5:11"
																},
																"nativeSrc": "2437:13:11",
																"nodeType": "YulFunctionCall",
																"src": "2437:13:11"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "2427:6:11",
																	"nodeType": "YulTypedName",
																	"src": "2427:6:11",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "2459:99:11",
															"nodeType": "YulAssignment",
															"src": "2459:99:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nativeSrc": "2531:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "2531:6:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2539:4:11",
																				"nodeType": "YulLiteral",
																				"src": "2539:4:11",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2527:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "2527:3:11"
																		},
																		"nativeSrc": "2527:17:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2527:17:11"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "2546:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "2546:6:11"
																	},
																	{
																		"name": "end",
																		"nativeSrc": "2554:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "2554:3:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_t_string_memory_ptr_fromMemory",
																	"nativeSrc": "2468:58:11",
																	"nodeType": "YulIdentifier",
																	"src": "2468:58:11"
																},
																"nativeSrc": "2468:90:11",
																"nodeType": "YulFunctionCall",
																"src": "2468:90:11"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nativeSrc": "2459:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "2459:5:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_string_memory_ptr_fromMemory",
												"nativeSrc": "2209:355:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "2260:6:11",
														"nodeType": "YulTypedName",
														"src": "2260:6:11",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "2268:3:11",
														"nodeType": "YulTypedName",
														"src": "2268:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nativeSrc": "2276:5:11",
														"nodeType": "YulTypedName",
														"src": "2276:5:11",
														"type": ""
													}
												],
												"src": "2209:355:11"
											},
											{
												"body": {
													"nativeSrc": "2684:739:11",
													"nodeType": "YulBlock",
													"src": "2684:739:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "2730:83:11",
																"nodeType": "YulBlock",
																"src": "2730:83:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "2732:77:11",
																				"nodeType": "YulIdentifier",
																				"src": "2732:77:11"
																			},
																			"nativeSrc": "2732:79:11",
																			"nodeType": "YulFunctionCall",
																			"src": "2732:79:11"
																		},
																		"nativeSrc": "2732:79:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "2732:79:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2705:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "2705:7:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2714:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "2714:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2701:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "2701:3:11"
																		},
																		"nativeSrc": "2701:23:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2701:23:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2726:2:11",
																		"nodeType": "YulLiteral",
																		"src": "2726:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2697:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "2697:3:11"
																},
																"nativeSrc": "2697:32:11",
																"nodeType": "YulFunctionCall",
																"src": "2697:32:11"
															},
															"nativeSrc": "2694:119:11",
															"nodeType": "YulIf",
															"src": "2694:119:11"
														},
														{
															"nativeSrc": "2823:291:11",
															"nodeType": "YulBlock",
															"src": "2823:291:11",
															"statements": [
																{
																	"nativeSrc": "2838:38:11",
																	"nodeType": "YulVariableDeclaration",
																	"src": "2838:38:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "2862:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "2862:9:11"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "2873:1:11",
																						"nodeType": "YulLiteral",
																						"src": "2873:1:11",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2858:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "2858:3:11"
																				},
																				"nativeSrc": "2858:17:11",
																				"nodeType": "YulFunctionCall",
																				"src": "2858:17:11"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "2852:5:11",
																			"nodeType": "YulIdentifier",
																			"src": "2852:5:11"
																		},
																		"nativeSrc": "2852:24:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2852:24:11"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "2842:6:11",
																			"nodeType": "YulTypedName",
																			"src": "2842:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nativeSrc": "2923:83:11",
																		"nodeType": "YulBlock",
																		"src": "2923:83:11",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nativeSrc": "2925:77:11",
																						"nodeType": "YulIdentifier",
																						"src": "2925:77:11"
																					},
																					"nativeSrc": "2925:79:11",
																					"nodeType": "YulFunctionCall",
																					"src": "2925:79:11"
																				},
																				"nativeSrc": "2925:79:11",
																				"nodeType": "YulExpressionStatement",
																				"src": "2925:79:11"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nativeSrc": "2895:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "2895:6:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2903:18:11",
																				"nodeType": "YulLiteral",
																				"src": "2903:18:11",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nativeSrc": "2892:2:11",
																			"nodeType": "YulIdentifier",
																			"src": "2892:2:11"
																		},
																		"nativeSrc": "2892:30:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2892:30:11"
																	},
																	"nativeSrc": "2889:117:11",
																	"nodeType": "YulIf",
																	"src": "2889:117:11"
																},
																{
																	"nativeSrc": "3020:84:11",
																	"nodeType": "YulAssignment",
																	"src": "3020:84:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "3076:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "3076:9:11"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "3087:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "3087:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "3072:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "3072:3:11"
																				},
																				"nativeSrc": "3072:22:11",
																				"nodeType": "YulFunctionCall",
																				"src": "3072:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3096:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "3096:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_string_memory_ptr_fromMemory",
																			"nativeSrc": "3030:41:11",
																			"nodeType": "YulIdentifier",
																			"src": "3030:41:11"
																		},
																		"nativeSrc": "3030:74:11",
																		"nodeType": "YulFunctionCall",
																		"src": "3030:74:11"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "3020:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "3020:6:11"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "3124:292:11",
															"nodeType": "YulBlock",
															"src": "3124:292:11",
															"statements": [
																{
																	"nativeSrc": "3139:39:11",
																	"nodeType": "YulVariableDeclaration",
																	"src": "3139:39:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "3163:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "3163:9:11"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3174:2:11",
																						"nodeType": "YulLiteral",
																						"src": "3174:2:11",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "3159:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "3159:3:11"
																				},
																				"nativeSrc": "3159:18:11",
																				"nodeType": "YulFunctionCall",
																				"src": "3159:18:11"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "3153:5:11",
																			"nodeType": "YulIdentifier",
																			"src": "3153:5:11"
																		},
																		"nativeSrc": "3153:25:11",
																		"nodeType": "YulFunctionCall",
																		"src": "3153:25:11"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "3143:6:11",
																			"nodeType": "YulTypedName",
																			"src": "3143:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nativeSrc": "3225:83:11",
																		"nodeType": "YulBlock",
																		"src": "3225:83:11",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nativeSrc": "3227:77:11",
																						"nodeType": "YulIdentifier",
																						"src": "3227:77:11"
																					},
																					"nativeSrc": "3227:79:11",
																					"nodeType": "YulFunctionCall",
																					"src": "3227:79:11"
																				},
																				"nativeSrc": "3227:79:11",
																				"nodeType": "YulExpressionStatement",
																				"src": "3227:79:11"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nativeSrc": "3197:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "3197:6:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3205:18:11",
																				"nodeType": "YulLiteral",
																				"src": "3205:18:11",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nativeSrc": "3194:2:11",
																			"nodeType": "YulIdentifier",
																			"src": "3194:2:11"
																		},
																		"nativeSrc": "3194:30:11",
																		"nodeType": "YulFunctionCall",
																		"src": "3194:30:11"
																	},
																	"nativeSrc": "3191:117:11",
																	"nodeType": "YulIf",
																	"src": "3191:117:11"
																},
																{
																	"nativeSrc": "3322:84:11",
																	"nodeType": "YulAssignment",
																	"src": "3322:84:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "3378:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "3378:9:11"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "3389:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "3389:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "3374:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "3374:3:11"
																				},
																				"nativeSrc": "3374:22:11",
																				"nodeType": "YulFunctionCall",
																				"src": "3374:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3398:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "3398:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_string_memory_ptr_fromMemory",
																			"nativeSrc": "3332:41:11",
																			"nodeType": "YulIdentifier",
																			"src": "3332:41:11"
																		},
																		"nativeSrc": "3332:74:11",
																		"nodeType": "YulFunctionCall",
																		"src": "3332:74:11"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "3322:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "3322:6:11"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nativeSrc": "2570:853:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2646:9:11",
														"nodeType": "YulTypedName",
														"src": "2646:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2657:7:11",
														"nodeType": "YulTypedName",
														"src": "2657:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2669:6:11",
														"nodeType": "YulTypedName",
														"src": "2669:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "2677:6:11",
														"nodeType": "YulTypedName",
														"src": "2677:6:11",
														"type": ""
													}
												],
												"src": "2570:853:11"
											},
											{
												"body": {
													"nativeSrc": "3488:40:11",
													"nodeType": "YulBlock",
													"src": "3488:40:11",
													"statements": [
														{
															"nativeSrc": "3499:22:11",
															"nodeType": "YulAssignment",
															"src": "3499:22:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "3515:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "3515:5:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3509:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "3509:5:11"
																},
																"nativeSrc": "3509:12:11",
																"nodeType": "YulFunctionCall",
																"src": "3509:12:11"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "3499:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "3499:6:11"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "3429:99:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3471:5:11",
														"nodeType": "YulTypedName",
														"src": "3471:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "3481:6:11",
														"nodeType": "YulTypedName",
														"src": "3481:6:11",
														"type": ""
													}
												],
												"src": "3429:99:11"
											},
											{
												"body": {
													"nativeSrc": "3562:152:11",
													"nodeType": "YulBlock",
													"src": "3562:152:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "3579:1:11",
																		"nodeType": "YulLiteral",
																		"src": "3579:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3582:77:11",
																		"nodeType": "YulLiteral",
																		"src": "3582:77:11",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3572:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "3572:6:11"
																},
																"nativeSrc": "3572:88:11",
																"nodeType": "YulFunctionCall",
																"src": "3572:88:11"
															},
															"nativeSrc": "3572:88:11",
															"nodeType": "YulExpressionStatement",
															"src": "3572:88:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "3676:1:11",
																		"nodeType": "YulLiteral",
																		"src": "3676:1:11",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3679:4:11",
																		"nodeType": "YulLiteral",
																		"src": "3679:4:11",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3669:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "3669:6:11"
																},
																"nativeSrc": "3669:15:11",
																"nodeType": "YulFunctionCall",
																"src": "3669:15:11"
															},
															"nativeSrc": "3669:15:11",
															"nodeType": "YulExpressionStatement",
															"src": "3669:15:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "3700:1:11",
																		"nodeType": "YulLiteral",
																		"src": "3700:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3703:4:11",
																		"nodeType": "YulLiteral",
																		"src": "3703:4:11",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "3693:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "3693:6:11"
																},
																"nativeSrc": "3693:15:11",
																"nodeType": "YulFunctionCall",
																"src": "3693:15:11"
															},
															"nativeSrc": "3693:15:11",
															"nodeType": "YulExpressionStatement",
															"src": "3693:15:11"
														}
													]
												},
												"name": "panic_error_0x22",
												"nativeSrc": "3534:180:11",
												"nodeType": "YulFunctionDefinition",
												"src": "3534:180:11"
											},
											{
												"body": {
													"nativeSrc": "3771:269:11",
													"nodeType": "YulBlock",
													"src": "3771:269:11",
													"statements": [
														{
															"nativeSrc": "3781:22:11",
															"nodeType": "YulAssignment",
															"src": "3781:22:11",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "3795:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "3795:4:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3801:1:11",
																		"nodeType": "YulLiteral",
																		"src": "3801:1:11",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "3791:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "3791:3:11"
																},
																"nativeSrc": "3791:12:11",
																"nodeType": "YulFunctionCall",
																"src": "3791:12:11"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "3781:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "3781:6:11"
																}
															]
														},
														{
															"nativeSrc": "3812:38:11",
															"nodeType": "YulVariableDeclaration",
															"src": "3812:38:11",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "3842:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "3842:4:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3848:1:11",
																		"nodeType": "YulLiteral",
																		"src": "3848:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "3838:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "3838:3:11"
																},
																"nativeSrc": "3838:12:11",
																"nodeType": "YulFunctionCall",
																"src": "3838:12:11"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "3816:18:11",
																	"nodeType": "YulTypedName",
																	"src": "3816:18:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3889:51:11",
																"nodeType": "YulBlock",
																"src": "3889:51:11",
																"statements": [
																	{
																		"nativeSrc": "3903:27:11",
																		"nodeType": "YulAssignment",
																		"src": "3903:27:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "3917:6:11",
																					"nodeType": "YulIdentifier",
																					"src": "3917:6:11"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3925:4:11",
																					"nodeType": "YulLiteral",
																					"src": "3925:4:11",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "3913:3:11",
																				"nodeType": "YulIdentifier",
																				"src": "3913:3:11"
																			},
																			"nativeSrc": "3913:17:11",
																			"nodeType": "YulFunctionCall",
																			"src": "3913:17:11"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "3903:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "3903:6:11"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "3869:18:11",
																		"nodeType": "YulIdentifier",
																		"src": "3869:18:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3862:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "3862:6:11"
																},
																"nativeSrc": "3862:26:11",
																"nodeType": "YulFunctionCall",
																"src": "3862:26:11"
															},
															"nativeSrc": "3859:81:11",
															"nodeType": "YulIf",
															"src": "3859:81:11"
														},
														{
															"body": {
																"nativeSrc": "3992:42:11",
																"nodeType": "YulBlock",
																"src": "3992:42:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nativeSrc": "4006:16:11",
																				"nodeType": "YulIdentifier",
																				"src": "4006:16:11"
																			},
																			"nativeSrc": "4006:18:11",
																			"nodeType": "YulFunctionCall",
																			"src": "4006:18:11"
																		},
																		"nativeSrc": "4006:18:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "4006:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "3956:18:11",
																		"nodeType": "YulIdentifier",
																		"src": "3956:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "3979:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "3979:6:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3987:2:11",
																				"nodeType": "YulLiteral",
																				"src": "3987:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "3976:2:11",
																			"nodeType": "YulIdentifier",
																			"src": "3976:2:11"
																		},
																		"nativeSrc": "3976:14:11",
																		"nodeType": "YulFunctionCall",
																		"src": "3976:14:11"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "3953:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "3953:2:11"
																},
																"nativeSrc": "3953:38:11",
																"nodeType": "YulFunctionCall",
																"src": "3953:38:11"
															},
															"nativeSrc": "3950:84:11",
															"nodeType": "YulIf",
															"src": "3950:84:11"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "3720:320:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "3755:4:11",
														"nodeType": "YulTypedName",
														"src": "3755:4:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "3764:6:11",
														"nodeType": "YulTypedName",
														"src": "3764:6:11",
														"type": ""
													}
												],
												"src": "3720:320:11"
											},
											{
												"body": {
													"nativeSrc": "4100:87:11",
													"nodeType": "YulBlock",
													"src": "4100:87:11",
													"statements": [
														{
															"nativeSrc": "4110:11:11",
															"nodeType": "YulAssignment",
															"src": "4110:11:11",
															"value": {
																"name": "ptr",
																"nativeSrc": "4118:3:11",
																"nodeType": "YulIdentifier",
																"src": "4118:3:11"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "4110:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "4110:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4138:1:11",
																		"nodeType": "YulLiteral",
																		"src": "4138:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nativeSrc": "4141:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "4141:3:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4131:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "4131:6:11"
																},
																"nativeSrc": "4131:14:11",
																"nodeType": "YulFunctionCall",
																"src": "4131:14:11"
															},
															"nativeSrc": "4131:14:11",
															"nodeType": "YulExpressionStatement",
															"src": "4131:14:11"
														},
														{
															"nativeSrc": "4154:26:11",
															"nodeType": "YulAssignment",
															"src": "4154:26:11",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4172:1:11",
																		"nodeType": "YulLiteral",
																		"src": "4172:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4175:4:11",
																		"nodeType": "YulLiteral",
																		"src": "4175:4:11",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "4162:9:11",
																	"nodeType": "YulIdentifier",
																	"src": "4162:9:11"
																},
																"nativeSrc": "4162:18:11",
																"nodeType": "YulFunctionCall",
																"src": "4162:18:11"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "4154:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "4154:4:11"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_string_storage",
												"nativeSrc": "4046:141:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "4087:3:11",
														"nodeType": "YulTypedName",
														"src": "4087:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nativeSrc": "4095:4:11",
														"nodeType": "YulTypedName",
														"src": "4095:4:11",
														"type": ""
													}
												],
												"src": "4046:141:11"
											},
											{
												"body": {
													"nativeSrc": "4237:49:11",
													"nodeType": "YulBlock",
													"src": "4237:49:11",
													"statements": [
														{
															"nativeSrc": "4247:33:11",
															"nodeType": "YulAssignment",
															"src": "4247:33:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "4265:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "4265:5:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4272:2:11",
																				"nodeType": "YulLiteral",
																				"src": "4272:2:11",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4261:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "4261:3:11"
																		},
																		"nativeSrc": "4261:14:11",
																		"nodeType": "YulFunctionCall",
																		"src": "4261:14:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4277:2:11",
																		"nodeType": "YulLiteral",
																		"src": "4277:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "4257:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "4257:3:11"
																},
																"nativeSrc": "4257:23:11",
																"nodeType": "YulFunctionCall",
																"src": "4257:23:11"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "4247:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "4247:6:11"
																}
															]
														}
													]
												},
												"name": "divide_by_32_ceil",
												"nativeSrc": "4193:93:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4220:5:11",
														"nodeType": "YulTypedName",
														"src": "4220:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "4230:6:11",
														"nodeType": "YulTypedName",
														"src": "4230:6:11",
														"type": ""
													}
												],
												"src": "4193:93:11"
											},
											{
												"body": {
													"nativeSrc": "4345:54:11",
													"nodeType": "YulBlock",
													"src": "4345:54:11",
													"statements": [
														{
															"nativeSrc": "4355:37:11",
															"nodeType": "YulAssignment",
															"src": "4355:37:11",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nativeSrc": "4380:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "4380:4:11"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "4386:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "4386:5:11"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "4376:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "4376:3:11"
																},
																"nativeSrc": "4376:16:11",
																"nodeType": "YulFunctionCall",
																"src": "4376:16:11"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nativeSrc": "4355:8:11",
																	"nodeType": "YulIdentifier",
																	"src": "4355:8:11"
																}
															]
														}
													]
												},
												"name": "shift_left_dynamic",
												"nativeSrc": "4292:107:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nativeSrc": "4320:4:11",
														"nodeType": "YulTypedName",
														"src": "4320:4:11",
														"type": ""
													},
													{
														"name": "value",
														"nativeSrc": "4326:5:11",
														"nodeType": "YulTypedName",
														"src": "4326:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nativeSrc": "4336:8:11",
														"nodeType": "YulTypedName",
														"src": "4336:8:11",
														"type": ""
													}
												],
												"src": "4292:107:11"
											},
											{
												"body": {
													"nativeSrc": "4481:317:11",
													"nodeType": "YulBlock",
													"src": "4481:317:11",
													"statements": [
														{
															"nativeSrc": "4491:35:11",
															"nodeType": "YulVariableDeclaration",
															"src": "4491:35:11",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBytes",
																		"nativeSrc": "4512:10:11",
																		"nodeType": "YulIdentifier",
																		"src": "4512:10:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4524:1:11",
																		"nodeType": "YulLiteral",
																		"src": "4524:1:11",
																		"type": "",
																		"value": "8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "4508:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "4508:3:11"
																},
																"nativeSrc": "4508:18:11",
																"nodeType": "YulFunctionCall",
																"src": "4508:18:11"
															},
															"variables": [
																{
																	"name": "shiftBits",
																	"nativeSrc": "4495:9:11",
																	"nodeType": "YulTypedName",
																	"src": "4495:9:11",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4535:109:11",
															"nodeType": "YulVariableDeclaration",
															"src": "4535:109:11",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nativeSrc": "4566:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "4566:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4577:66:11",
																		"nodeType": "YulLiteral",
																		"src": "4577:66:11",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nativeSrc": "4547:18:11",
																	"nodeType": "YulIdentifier",
																	"src": "4547:18:11"
																},
																"nativeSrc": "4547:97:11",
																"nodeType": "YulFunctionCall",
																"src": "4547:97:11"
															},
															"variables": [
																{
																	"name": "mask",
																	"nativeSrc": "4539:4:11",
																	"nodeType": "YulTypedName",
																	"src": "4539:4:11",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4653:51:11",
															"nodeType": "YulAssignment",
															"src": "4653:51:11",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nativeSrc": "4684:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "4684:9:11"
																	},
																	{
																		"name": "toInsert",
																		"nativeSrc": "4695:8:11",
																		"nodeType": "YulIdentifier",
																		"src": "4695:8:11"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nativeSrc": "4665:18:11",
																	"nodeType": "YulIdentifier",
																	"src": "4665:18:11"
																},
																"nativeSrc": "4665:39:11",
																"nodeType": "YulFunctionCall",
																"src": "4665:39:11"
															},
															"variableNames": [
																{
																	"name": "toInsert",
																	"nativeSrc": "4653:8:11",
																	"nodeType": "YulIdentifier",
																	"src": "4653:8:11"
																}
															]
														},
														{
															"nativeSrc": "4713:30:11",
															"nodeType": "YulAssignment",
															"src": "4713:30:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "4726:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "4726:5:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "mask",
																				"nativeSrc": "4737:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "4737:4:11"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "4733:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "4733:3:11"
																		},
																		"nativeSrc": "4733:9:11",
																		"nodeType": "YulFunctionCall",
																		"src": "4733:9:11"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4722:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "4722:3:11"
																},
																"nativeSrc": "4722:21:11",
																"nodeType": "YulFunctionCall",
																"src": "4722:21:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "4713:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "4713:5:11"
																}
															]
														},
														{
															"nativeSrc": "4752:40:11",
															"nodeType": "YulAssignment",
															"src": "4752:40:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "4765:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "4765:5:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "toInsert",
																				"nativeSrc": "4776:8:11",
																				"nodeType": "YulIdentifier",
																				"src": "4776:8:11"
																			},
																			{
																				"name": "mask",
																				"nativeSrc": "4786:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "4786:4:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "4772:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "4772:3:11"
																		},
																		"nativeSrc": "4772:19:11",
																		"nodeType": "YulFunctionCall",
																		"src": "4772:19:11"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "4762:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "4762:2:11"
																},
																"nativeSrc": "4762:30:11",
																"nodeType": "YulFunctionCall",
																"src": "4762:30:11"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "4752:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "4752:6:11"
																}
															]
														}
													]
												},
												"name": "update_byte_slice_dynamic32",
												"nativeSrc": "4405:393:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4442:5:11",
														"nodeType": "YulTypedName",
														"src": "4442:5:11",
														"type": ""
													},
													{
														"name": "shiftBytes",
														"nativeSrc": "4449:10:11",
														"nodeType": "YulTypedName",
														"src": "4449:10:11",
														"type": ""
													},
													{
														"name": "toInsert",
														"nativeSrc": "4461:8:11",
														"nodeType": "YulTypedName",
														"src": "4461:8:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "4474:6:11",
														"nodeType": "YulTypedName",
														"src": "4474:6:11",
														"type": ""
													}
												],
												"src": "4405:393:11"
											},
											{
												"body": {
													"nativeSrc": "4849:32:11",
													"nodeType": "YulBlock",
													"src": "4849:32:11",
													"statements": [
														{
															"nativeSrc": "4859:16:11",
															"nodeType": "YulAssignment",
															"src": "4859:16:11",
															"value": {
																"name": "value",
																"nativeSrc": "4870:5:11",
																"nodeType": "YulIdentifier",
																"src": "4870:5:11"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "4859:7:11",
																	"nodeType": "YulIdentifier",
																	"src": "4859:7:11"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nativeSrc": "4804:77:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4831:5:11",
														"nodeType": "YulTypedName",
														"src": "4831:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "4841:7:11",
														"nodeType": "YulTypedName",
														"src": "4841:7:11",
														"type": ""
													}
												],
												"src": "4804:77:11"
											},
											{
												"body": {
													"nativeSrc": "4919:28:11",
													"nodeType": "YulBlock",
													"src": "4919:28:11",
													"statements": [
														{
															"nativeSrc": "4929:12:11",
															"nodeType": "YulAssignment",
															"src": "4929:12:11",
															"value": {
																"name": "value",
																"nativeSrc": "4936:5:11",
																"nodeType": "YulIdentifier",
																"src": "4936:5:11"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "4929:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "4929:3:11"
																}
															]
														}
													]
												},
												"name": "identity",
												"nativeSrc": "4887:60:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4905:5:11",
														"nodeType": "YulTypedName",
														"src": "4905:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "4915:3:11",
														"nodeType": "YulTypedName",
														"src": "4915:3:11",
														"type": ""
													}
												],
												"src": "4887:60:11"
											},
											{
												"body": {
													"nativeSrc": "5013:82:11",
													"nodeType": "YulBlock",
													"src": "5013:82:11",
													"statements": [
														{
															"nativeSrc": "5023:66:11",
															"nodeType": "YulAssignment",
															"src": "5023:66:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "5081:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "5081:5:11"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "5063:17:11",
																					"nodeType": "YulIdentifier",
																					"src": "5063:17:11"
																				},
																				"nativeSrc": "5063:24:11",
																				"nodeType": "YulFunctionCall",
																				"src": "5063:24:11"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nativeSrc": "5054:8:11",
																			"nodeType": "YulIdentifier",
																			"src": "5054:8:11"
																		},
																		"nativeSrc": "5054:34:11",
																		"nodeType": "YulFunctionCall",
																		"src": "5054:34:11"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "5036:17:11",
																	"nodeType": "YulIdentifier",
																	"src": "5036:17:11"
																},
																"nativeSrc": "5036:53:11",
																"nodeType": "YulFunctionCall",
																"src": "5036:53:11"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "5023:9:11",
																	"nodeType": "YulIdentifier",
																	"src": "5023:9:11"
																}
															]
														}
													]
												},
												"name": "convert_t_uint256_to_t_uint256",
												"nativeSrc": "4953:142:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4993:5:11",
														"nodeType": "YulTypedName",
														"src": "4993:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "5003:9:11",
														"nodeType": "YulTypedName",
														"src": "5003:9:11",
														"type": ""
													}
												],
												"src": "4953:142:11"
											},
											{
												"body": {
													"nativeSrc": "5148:28:11",
													"nodeType": "YulBlock",
													"src": "5148:28:11",
													"statements": [
														{
															"nativeSrc": "5158:12:11",
															"nodeType": "YulAssignment",
															"src": "5158:12:11",
															"value": {
																"name": "value",
																"nativeSrc": "5165:5:11",
																"nodeType": "YulIdentifier",
																"src": "5165:5:11"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "5158:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "5158:3:11"
																}
															]
														}
													]
												},
												"name": "prepare_store_t_uint256",
												"nativeSrc": "5101:75:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5134:5:11",
														"nodeType": "YulTypedName",
														"src": "5134:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "5144:3:11",
														"nodeType": "YulTypedName",
														"src": "5144:3:11",
														"type": ""
													}
												],
												"src": "5101:75:11"
											},
											{
												"body": {
													"nativeSrc": "5258:193:11",
													"nodeType": "YulBlock",
													"src": "5258:193:11",
													"statements": [
														{
															"nativeSrc": "5268:63:11",
															"nodeType": "YulVariableDeclaration",
															"src": "5268:63:11",
															"value": {
																"arguments": [
																	{
																		"name": "value_0",
																		"nativeSrc": "5323:7:11",
																		"nodeType": "YulIdentifier",
																		"src": "5323:7:11"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint256_to_t_uint256",
																	"nativeSrc": "5292:30:11",
																	"nodeType": "YulIdentifier",
																	"src": "5292:30:11"
																},
																"nativeSrc": "5292:39:11",
																"nodeType": "YulFunctionCall",
																"src": "5292:39:11"
															},
															"variables": [
																{
																	"name": "convertedValue_0",
																	"nativeSrc": "5272:16:11",
																	"nodeType": "YulTypedName",
																	"src": "5272:16:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "5347:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "5347:4:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nativeSrc": "5387:4:11",
																						"nodeType": "YulIdentifier",
																						"src": "5387:4:11"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nativeSrc": "5381:5:11",
																					"nodeType": "YulIdentifier",
																					"src": "5381:5:11"
																				},
																				"nativeSrc": "5381:11:11",
																				"nodeType": "YulFunctionCall",
																				"src": "5381:11:11"
																			},
																			{
																				"name": "offset",
																				"nativeSrc": "5394:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "5394:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "convertedValue_0",
																						"nativeSrc": "5426:16:11",
																						"nodeType": "YulIdentifier",
																						"src": "5426:16:11"
																					}
																				],
																				"functionName": {
																					"name": "prepare_store_t_uint256",
																					"nativeSrc": "5402:23:11",
																					"nodeType": "YulIdentifier",
																					"src": "5402:23:11"
																				},
																				"nativeSrc": "5402:41:11",
																				"nodeType": "YulFunctionCall",
																				"src": "5402:41:11"
																			}
																		],
																		"functionName": {
																			"name": "update_byte_slice_dynamic32",
																			"nativeSrc": "5353:27:11",
																			"nodeType": "YulIdentifier",
																			"src": "5353:27:11"
																		},
																		"nativeSrc": "5353:91:11",
																		"nodeType": "YulFunctionCall",
																		"src": "5353:91:11"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "5340:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "5340:6:11"
																},
																"nativeSrc": "5340:105:11",
																"nodeType": "YulFunctionCall",
																"src": "5340:105:11"
															},
															"nativeSrc": "5340:105:11",
															"nodeType": "YulExpressionStatement",
															"src": "5340:105:11"
														}
													]
												},
												"name": "update_storage_value_t_uint256_to_t_uint256",
												"nativeSrc": "5182:269:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "5235:4:11",
														"nodeType": "YulTypedName",
														"src": "5235:4:11",
														"type": ""
													},
													{
														"name": "offset",
														"nativeSrc": "5241:6:11",
														"nodeType": "YulTypedName",
														"src": "5241:6:11",
														"type": ""
													},
													{
														"name": "value_0",
														"nativeSrc": "5249:7:11",
														"nodeType": "YulTypedName",
														"src": "5249:7:11",
														"type": ""
													}
												],
												"src": "5182:269:11"
											},
											{
												"body": {
													"nativeSrc": "5506:24:11",
													"nodeType": "YulBlock",
													"src": "5506:24:11",
													"statements": [
														{
															"nativeSrc": "5516:8:11",
															"nodeType": "YulAssignment",
															"src": "5516:8:11",
															"value": {
																"kind": "number",
																"nativeSrc": "5523:1:11",
																"nodeType": "YulLiteral",
																"src": "5523:1:11",
																"type": "",
																"value": "0"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "5516:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "5516:3:11"
																}
															]
														}
													]
												},
												"name": "zero_value_for_split_t_uint256",
												"nativeSrc": "5457:73:11",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "5502:3:11",
														"nodeType": "YulTypedName",
														"src": "5502:3:11",
														"type": ""
													}
												],
												"src": "5457:73:11"
											},
											{
												"body": {
													"nativeSrc": "5589:136:11",
													"nodeType": "YulBlock",
													"src": "5589:136:11",
													"statements": [
														{
															"nativeSrc": "5599:46:11",
															"nodeType": "YulVariableDeclaration",
															"src": "5599:46:11",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "zero_value_for_split_t_uint256",
																	"nativeSrc": "5613:30:11",
																	"nodeType": "YulIdentifier",
																	"src": "5613:30:11"
																},
																"nativeSrc": "5613:32:11",
																"nodeType": "YulFunctionCall",
																"src": "5613:32:11"
															},
															"variables": [
																{
																	"name": "zero_0",
																	"nativeSrc": "5603:6:11",
																	"nodeType": "YulTypedName",
																	"src": "5603:6:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "5698:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "5698:4:11"
																	},
																	{
																		"name": "offset",
																		"nativeSrc": "5704:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "5704:6:11"
																	},
																	{
																		"name": "zero_0",
																		"nativeSrc": "5712:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "5712:6:11"
																	}
																],
																"functionName": {
																	"name": "update_storage_value_t_uint256_to_t_uint256",
																	"nativeSrc": "5654:43:11",
																	"nodeType": "YulIdentifier",
																	"src": "5654:43:11"
																},
																"nativeSrc": "5654:65:11",
																"nodeType": "YulFunctionCall",
																"src": "5654:65:11"
															},
															"nativeSrc": "5654:65:11",
															"nodeType": "YulExpressionStatement",
															"src": "5654:65:11"
														}
													]
												},
												"name": "storage_set_to_zero_t_uint256",
												"nativeSrc": "5536:189:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "5575:4:11",
														"nodeType": "YulTypedName",
														"src": "5575:4:11",
														"type": ""
													},
													{
														"name": "offset",
														"nativeSrc": "5581:6:11",
														"nodeType": "YulTypedName",
														"src": "5581:6:11",
														"type": ""
													}
												],
												"src": "5536:189:11"
											},
											{
												"body": {
													"nativeSrc": "5781:136:11",
													"nodeType": "YulBlock",
													"src": "5781:136:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "5848:63:11",
																"nodeType": "YulBlock",
																"src": "5848:63:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "5892:5:11",
																					"nodeType": "YulIdentifier",
																					"src": "5892:5:11"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5899:1:11",
																					"nodeType": "YulLiteral",
																					"src": "5899:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "storage_set_to_zero_t_uint256",
																				"nativeSrc": "5862:29:11",
																				"nodeType": "YulIdentifier",
																				"src": "5862:29:11"
																			},
																			"nativeSrc": "5862:39:11",
																			"nodeType": "YulFunctionCall",
																			"src": "5862:39:11"
																		},
																		"nativeSrc": "5862:39:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "5862:39:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "start",
																		"nativeSrc": "5801:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "5801:5:11"
																	},
																	{
																		"name": "end",
																		"nativeSrc": "5808:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "5808:3:11"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "5798:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "5798:2:11"
																},
																"nativeSrc": "5798:14:11",
																"nodeType": "YulFunctionCall",
																"src": "5798:14:11"
															},
															"nativeSrc": "5791:120:11",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "5813:26:11",
																"nodeType": "YulBlock",
																"src": "5813:26:11",
																"statements": [
																	{
																		"nativeSrc": "5815:22:11",
																		"nodeType": "YulAssignment",
																		"src": "5815:22:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "5828:5:11",
																					"nodeType": "YulIdentifier",
																					"src": "5828:5:11"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5835:1:11",
																					"nodeType": "YulLiteral",
																					"src": "5835:1:11",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "5824:3:11",
																				"nodeType": "YulIdentifier",
																				"src": "5824:3:11"
																			},
																			"nativeSrc": "5824:13:11",
																			"nodeType": "YulFunctionCall",
																			"src": "5824:13:11"
																		},
																		"variableNames": [
																			{
																				"name": "start",
																				"nativeSrc": "5815:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "5815:5:11"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "5795:2:11",
																"nodeType": "YulBlock",
																"src": "5795:2:11",
																"statements": []
															},
															"src": "5791:120:11"
														}
													]
												},
												"name": "clear_storage_range_t_bytes1",
												"nativeSrc": "5731:186:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "start",
														"nativeSrc": "5769:5:11",
														"nodeType": "YulTypedName",
														"src": "5769:5:11",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "5776:3:11",
														"nodeType": "YulTypedName",
														"src": "5776:3:11",
														"type": ""
													}
												],
												"src": "5731:186:11"
											},
											{
												"body": {
													"nativeSrc": "6002:464:11",
													"nodeType": "YulBlock",
													"src": "6002:464:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "6028:431:11",
																"nodeType": "YulBlock",
																"src": "6028:431:11",
																"statements": [
																	{
																		"nativeSrc": "6042:54:11",
																		"nodeType": "YulVariableDeclaration",
																		"src": "6042:54:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "array",
																					"nativeSrc": "6090:5:11",
																					"nodeType": "YulIdentifier",
																					"src": "6090:5:11"
																				}
																			],
																			"functionName": {
																				"name": "array_dataslot_t_string_storage",
																				"nativeSrc": "6058:31:11",
																				"nodeType": "YulIdentifier",
																				"src": "6058:31:11"
																			},
																			"nativeSrc": "6058:38:11",
																			"nodeType": "YulFunctionCall",
																			"src": "6058:38:11"
																		},
																		"variables": [
																			{
																				"name": "dataArea",
																				"nativeSrc": "6046:8:11",
																				"nodeType": "YulTypedName",
																				"src": "6046:8:11",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "6109:63:11",
																		"nodeType": "YulVariableDeclaration",
																		"src": "6109:63:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "dataArea",
																					"nativeSrc": "6132:8:11",
																					"nodeType": "YulIdentifier",
																					"src": "6132:8:11"
																				},
																				{
																					"arguments": [
																						{
																							"name": "startIndex",
																							"nativeSrc": "6160:10:11",
																							"nodeType": "YulIdentifier",
																							"src": "6160:10:11"
																						}
																					],
																					"functionName": {
																						"name": "divide_by_32_ceil",
																						"nativeSrc": "6142:17:11",
																						"nodeType": "YulIdentifier",
																						"src": "6142:17:11"
																					},
																					"nativeSrc": "6142:29:11",
																					"nodeType": "YulFunctionCall",
																					"src": "6142:29:11"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "6128:3:11",
																				"nodeType": "YulIdentifier",
																				"src": "6128:3:11"
																			},
																			"nativeSrc": "6128:44:11",
																			"nodeType": "YulFunctionCall",
																			"src": "6128:44:11"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nativeSrc": "6113:11:11",
																				"nodeType": "YulTypedName",
																				"src": "6113:11:11",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "6329:27:11",
																			"nodeType": "YulBlock",
																			"src": "6329:27:11",
																			"statements": [
																				{
																					"nativeSrc": "6331:23:11",
																					"nodeType": "YulAssignment",
																					"src": "6331:23:11",
																					"value": {
																						"name": "dataArea",
																						"nativeSrc": "6346:8:11",
																						"nodeType": "YulIdentifier",
																						"src": "6346:8:11"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nativeSrc": "6331:11:11",
																							"nodeType": "YulIdentifier",
																							"src": "6331:11:11"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nativeSrc": "6313:10:11",
																					"nodeType": "YulIdentifier",
																					"src": "6313:10:11"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "6325:2:11",
																					"nodeType": "YulLiteral",
																					"src": "6325:2:11",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "6310:2:11",
																				"nodeType": "YulIdentifier",
																				"src": "6310:2:11"
																			},
																			"nativeSrc": "6310:18:11",
																			"nodeType": "YulFunctionCall",
																			"src": "6310:18:11"
																		},
																		"nativeSrc": "6307:49:11",
																		"nodeType": "YulIf",
																		"src": "6307:49:11"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "deleteStart",
																					"nativeSrc": "6398:11:11",
																					"nodeType": "YulIdentifier",
																					"src": "6398:11:11"
																				},
																				{
																					"arguments": [
																						{
																							"name": "dataArea",
																							"nativeSrc": "6415:8:11",
																							"nodeType": "YulIdentifier",
																							"src": "6415:8:11"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nativeSrc": "6443:3:11",
																									"nodeType": "YulIdentifier",
																									"src": "6443:3:11"
																								}
																							],
																							"functionName": {
																								"name": "divide_by_32_ceil",
																								"nativeSrc": "6425:17:11",
																								"nodeType": "YulIdentifier",
																								"src": "6425:17:11"
																							},
																							"nativeSrc": "6425:22:11",
																							"nodeType": "YulFunctionCall",
																							"src": "6425:22:11"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "6411:3:11",
																						"nodeType": "YulIdentifier",
																						"src": "6411:3:11"
																					},
																					"nativeSrc": "6411:37:11",
																					"nodeType": "YulFunctionCall",
																					"src": "6411:37:11"
																				}
																			],
																			"functionName": {
																				"name": "clear_storage_range_t_bytes1",
																				"nativeSrc": "6369:28:11",
																				"nodeType": "YulIdentifier",
																				"src": "6369:28:11"
																			},
																			"nativeSrc": "6369:80:11",
																			"nodeType": "YulFunctionCall",
																			"src": "6369:80:11"
																		},
																		"nativeSrc": "6369:80:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "6369:80:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nativeSrc": "6019:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "6019:3:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6024:2:11",
																		"nodeType": "YulLiteral",
																		"src": "6024:2:11",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "6016:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "6016:2:11"
																},
																"nativeSrc": "6016:11:11",
																"nodeType": "YulFunctionCall",
																"src": "6016:11:11"
															},
															"nativeSrc": "6013:446:11",
															"nodeType": "YulIf",
															"src": "6013:446:11"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_t_string_storage",
												"nativeSrc": "5923:543:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "5978:5:11",
														"nodeType": "YulTypedName",
														"src": "5978:5:11",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "5985:3:11",
														"nodeType": "YulTypedName",
														"src": "5985:3:11",
														"type": ""
													},
													{
														"name": "startIndex",
														"nativeSrc": "5990:10:11",
														"nodeType": "YulTypedName",
														"src": "5990:10:11",
														"type": ""
													}
												],
												"src": "5923:543:11"
											},
											{
												"body": {
													"nativeSrc": "6535:54:11",
													"nodeType": "YulBlock",
													"src": "6535:54:11",
													"statements": [
														{
															"nativeSrc": "6545:37:11",
															"nodeType": "YulAssignment",
															"src": "6545:37:11",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nativeSrc": "6570:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "6570:4:11"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "6576:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "6576:5:11"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "6566:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "6566:3:11"
																},
																"nativeSrc": "6566:16:11",
																"nodeType": "YulFunctionCall",
																"src": "6566:16:11"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nativeSrc": "6545:8:11",
																	"nodeType": "YulIdentifier",
																	"src": "6545:8:11"
																}
															]
														}
													]
												},
												"name": "shift_right_unsigned_dynamic",
												"nativeSrc": "6472:117:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nativeSrc": "6510:4:11",
														"nodeType": "YulTypedName",
														"src": "6510:4:11",
														"type": ""
													},
													{
														"name": "value",
														"nativeSrc": "6516:5:11",
														"nodeType": "YulTypedName",
														"src": "6516:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nativeSrc": "6526:8:11",
														"nodeType": "YulTypedName",
														"src": "6526:8:11",
														"type": ""
													}
												],
												"src": "6472:117:11"
											},
											{
												"body": {
													"nativeSrc": "6646:118:11",
													"nodeType": "YulBlock",
													"src": "6646:118:11",
													"statements": [
														{
															"nativeSrc": "6656:68:11",
															"nodeType": "YulVariableDeclaration",
															"src": "6656:68:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "6705:1:11",
																						"nodeType": "YulLiteral",
																						"src": "6705:1:11",
																						"type": "",
																						"value": "8"
																					},
																					{
																						"name": "bytes",
																						"nativeSrc": "6708:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "6708:5:11"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nativeSrc": "6701:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "6701:3:11"
																				},
																				"nativeSrc": "6701:13:11",
																				"nodeType": "YulFunctionCall",
																				"src": "6701:13:11"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "6720:1:11",
																						"nodeType": "YulLiteral",
																						"src": "6720:1:11",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "6716:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "6716:3:11"
																				},
																				"nativeSrc": "6716:6:11",
																				"nodeType": "YulFunctionCall",
																				"src": "6716:6:11"
																			}
																		],
																		"functionName": {
																			"name": "shift_right_unsigned_dynamic",
																			"nativeSrc": "6672:28:11",
																			"nodeType": "YulIdentifier",
																			"src": "6672:28:11"
																		},
																		"nativeSrc": "6672:51:11",
																		"nodeType": "YulFunctionCall",
																		"src": "6672:51:11"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nativeSrc": "6668:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "6668:3:11"
																},
																"nativeSrc": "6668:56:11",
																"nodeType": "YulFunctionCall",
																"src": "6668:56:11"
															},
															"variables": [
																{
																	"name": "mask",
																	"nativeSrc": "6660:4:11",
																	"nodeType": "YulTypedName",
																	"src": "6660:4:11",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "6733:25:11",
															"nodeType": "YulAssignment",
															"src": "6733:25:11",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "6747:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "6747:4:11"
																	},
																	{
																		"name": "mask",
																		"nativeSrc": "6753:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "6753:4:11"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "6743:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "6743:3:11"
																},
																"nativeSrc": "6743:15:11",
																"nodeType": "YulFunctionCall",
																"src": "6743:15:11"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "6733:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "6733:6:11"
																}
															]
														}
													]
												},
												"name": "mask_bytes_dynamic",
												"nativeSrc": "6595:169:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "6623:4:11",
														"nodeType": "YulTypedName",
														"src": "6623:4:11",
														"type": ""
													},
													{
														"name": "bytes",
														"nativeSrc": "6629:5:11",
														"nodeType": "YulTypedName",
														"src": "6629:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "6639:6:11",
														"nodeType": "YulTypedName",
														"src": "6639:6:11",
														"type": ""
													}
												],
												"src": "6595:169:11"
											},
											{
												"body": {
													"nativeSrc": "6850:214:11",
													"nodeType": "YulBlock",
													"src": "6850:214:11",
													"statements": [
														{
															"nativeSrc": "6983:37:11",
															"nodeType": "YulAssignment",
															"src": "6983:37:11",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "7010:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "7010:4:11"
																	},
																	{
																		"name": "len",
																		"nativeSrc": "7016:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "7016:3:11"
																	}
																],
																"functionName": {
																	"name": "mask_bytes_dynamic",
																	"nativeSrc": "6991:18:11",
																	"nodeType": "YulIdentifier",
																	"src": "6991:18:11"
																},
																"nativeSrc": "6991:29:11",
																"nodeType": "YulFunctionCall",
																"src": "6991:29:11"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "6983:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "6983:4:11"
																}
															]
														},
														{
															"nativeSrc": "7029:29:11",
															"nodeType": "YulAssignment",
															"src": "7029:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "7040:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "7040:4:11"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "7050:1:11",
																				"nodeType": "YulLiteral",
																				"src": "7050:1:11",
																				"type": "",
																				"value": "2"
																			},
																			{
																				"name": "len",
																				"nativeSrc": "7053:3:11",
																				"nodeType": "YulIdentifier",
																				"src": "7053:3:11"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nativeSrc": "7046:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "7046:3:11"
																		},
																		"nativeSrc": "7046:11:11",
																		"nodeType": "YulFunctionCall",
																		"src": "7046:11:11"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "7037:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "7037:2:11"
																},
																"nativeSrc": "7037:21:11",
																"nodeType": "YulFunctionCall",
																"src": "7037:21:11"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nativeSrc": "7029:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "7029:4:11"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nativeSrc": "6769:295:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "6831:4:11",
														"nodeType": "YulTypedName",
														"src": "6831:4:11",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "6837:3:11",
														"nodeType": "YulTypedName",
														"src": "6837:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nativeSrc": "6845:4:11",
														"nodeType": "YulTypedName",
														"src": "6845:4:11",
														"type": ""
													}
												],
												"src": "6769:295:11"
											},
											{
												"body": {
													"nativeSrc": "7161:1303:11",
													"nodeType": "YulBlock",
													"src": "7161:1303:11",
													"statements": [
														{
															"nativeSrc": "7172:51:11",
															"nodeType": "YulVariableDeclaration",
															"src": "7172:51:11",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nativeSrc": "7219:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "7219:3:11"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nativeSrc": "7186:32:11",
																	"nodeType": "YulIdentifier",
																	"src": "7186:32:11"
																},
																"nativeSrc": "7186:37:11",
																"nodeType": "YulFunctionCall",
																"src": "7186:37:11"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nativeSrc": "7176:6:11",
																	"nodeType": "YulTypedName",
																	"src": "7176:6:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "7308:22:11",
																"nodeType": "YulBlock",
																"src": "7308:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "7310:16:11",
																				"nodeType": "YulIdentifier",
																				"src": "7310:16:11"
																			},
																			"nativeSrc": "7310:18:11",
																			"nodeType": "YulFunctionCall",
																			"src": "7310:18:11"
																		},
																		"nativeSrc": "7310:18:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "7310:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "7280:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "7280:6:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7288:18:11",
																		"nodeType": "YulLiteral",
																		"src": "7288:18:11",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "7277:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "7277:2:11"
																},
																"nativeSrc": "7277:30:11",
																"nodeType": "YulFunctionCall",
																"src": "7277:30:11"
															},
															"nativeSrc": "7274:56:11",
															"nodeType": "YulIf",
															"src": "7274:56:11"
														},
														{
															"nativeSrc": "7340:52:11",
															"nodeType": "YulVariableDeclaration",
															"src": "7340:52:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "slot",
																				"nativeSrc": "7386:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "7386:4:11"
																			}
																		],
																		"functionName": {
																			"name": "sload",
																			"nativeSrc": "7380:5:11",
																			"nodeType": "YulIdentifier",
																			"src": "7380:5:11"
																		},
																		"nativeSrc": "7380:11:11",
																		"nodeType": "YulFunctionCall",
																		"src": "7380:11:11"
																	}
																],
																"functionName": {
																	"name": "extract_byte_array_length",
																	"nativeSrc": "7354:25:11",
																	"nodeType": "YulIdentifier",
																	"src": "7354:25:11"
																},
																"nativeSrc": "7354:38:11",
																"nodeType": "YulFunctionCall",
																"src": "7354:38:11"
															},
															"variables": [
																{
																	"name": "oldLen",
																	"nativeSrc": "7344:6:11",
																	"nodeType": "YulTypedName",
																	"src": "7344:6:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "7485:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "7485:4:11"
																	},
																	{
																		"name": "oldLen",
																		"nativeSrc": "7491:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "7491:6:11"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "7499:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "7499:6:11"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_t_string_storage",
																	"nativeSrc": "7439:45:11",
																	"nodeType": "YulIdentifier",
																	"src": "7439:45:11"
																},
																"nativeSrc": "7439:67:11",
																"nodeType": "YulFunctionCall",
																"src": "7439:67:11"
															},
															"nativeSrc": "7439:67:11",
															"nodeType": "YulExpressionStatement",
															"src": "7439:67:11"
														},
														{
															"nativeSrc": "7516:18:11",
															"nodeType": "YulVariableDeclaration",
															"src": "7516:18:11",
															"value": {
																"kind": "number",
																"nativeSrc": "7533:1:11",
																"nodeType": "YulLiteral",
																"src": "7533:1:11",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "7520:9:11",
																	"nodeType": "YulTypedName",
																	"src": "7520:9:11",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "7544:17:11",
															"nodeType": "YulAssignment",
															"src": "7544:17:11",
															"value": {
																"kind": "number",
																"nativeSrc": "7557:4:11",
																"nodeType": "YulLiteral",
																"src": "7557:4:11",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "7544:9:11",
																	"nodeType": "YulIdentifier",
																	"src": "7544:9:11"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "7608:611:11",
																		"nodeType": "YulBlock",
																		"src": "7608:611:11",
																		"statements": [
																			{
																				"nativeSrc": "7622:37:11",
																				"nodeType": "YulVariableDeclaration",
																				"src": "7622:37:11",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nativeSrc": "7641:6:11",
																							"nodeType": "YulIdentifier",
																							"src": "7641:6:11"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "7653:4:11",
																									"nodeType": "YulLiteral",
																									"src": "7653:4:11",
																									"type": "",
																									"value": "0x1f"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "7649:3:11",
																								"nodeType": "YulIdentifier",
																								"src": "7649:3:11"
																							},
																							"nativeSrc": "7649:9:11",
																							"nodeType": "YulFunctionCall",
																							"src": "7649:9:11"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nativeSrc": "7637:3:11",
																						"nodeType": "YulIdentifier",
																						"src": "7637:3:11"
																					},
																					"nativeSrc": "7637:22:11",
																					"nodeType": "YulFunctionCall",
																					"src": "7637:22:11"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nativeSrc": "7626:7:11",
																						"nodeType": "YulTypedName",
																						"src": "7626:7:11",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "7673:51:11",
																				"nodeType": "YulVariableDeclaration",
																				"src": "7673:51:11",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "7719:4:11",
																							"nodeType": "YulIdentifier",
																							"src": "7719:4:11"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_t_string_storage",
																						"nativeSrc": "7687:31:11",
																						"nodeType": "YulIdentifier",
																						"src": "7687:31:11"
																					},
																					"nativeSrc": "7687:37:11",
																					"nodeType": "YulFunctionCall",
																					"src": "7687:37:11"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nativeSrc": "7677:6:11",
																						"nodeType": "YulTypedName",
																						"src": "7677:6:11",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "7737:10:11",
																				"nodeType": "YulVariableDeclaration",
																				"src": "7737:10:11",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "7746:1:11",
																					"nodeType": "YulLiteral",
																					"src": "7746:1:11",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nativeSrc": "7741:1:11",
																						"nodeType": "YulTypedName",
																						"src": "7741:1:11",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "7805:163:11",
																					"nodeType": "YulBlock",
																					"src": "7805:163:11",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "7830:6:11",
																										"nodeType": "YulIdentifier",
																										"src": "7830:6:11"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nativeSrc": "7848:3:11",
																														"nodeType": "YulIdentifier",
																														"src": "7848:3:11"
																													},
																													{
																														"name": "srcOffset",
																														"nativeSrc": "7853:9:11",
																														"nodeType": "YulIdentifier",
																														"src": "7853:9:11"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nativeSrc": "7844:3:11",
																													"nodeType": "YulIdentifier",
																													"src": "7844:3:11"
																												},
																												"nativeSrc": "7844:19:11",
																												"nodeType": "YulFunctionCall",
																												"src": "7844:19:11"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nativeSrc": "7838:5:11",
																											"nodeType": "YulIdentifier",
																											"src": "7838:5:11"
																										},
																										"nativeSrc": "7838:26:11",
																										"nodeType": "YulFunctionCall",
																										"src": "7838:26:11"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "7823:6:11",
																									"nodeType": "YulIdentifier",
																									"src": "7823:6:11"
																								},
																								"nativeSrc": "7823:42:11",
																								"nodeType": "YulFunctionCall",
																								"src": "7823:42:11"
																							},
																							"nativeSrc": "7823:42:11",
																							"nodeType": "YulExpressionStatement",
																							"src": "7823:42:11"
																						},
																						{
																							"nativeSrc": "7882:24:11",
																							"nodeType": "YulAssignment",
																							"src": "7882:24:11",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "7896:6:11",
																										"nodeType": "YulIdentifier",
																										"src": "7896:6:11"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "7904:1:11",
																										"nodeType": "YulLiteral",
																										"src": "7904:1:11",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "7892:3:11",
																									"nodeType": "YulIdentifier",
																									"src": "7892:3:11"
																								},
																								"nativeSrc": "7892:14:11",
																								"nodeType": "YulFunctionCall",
																								"src": "7892:14:11"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nativeSrc": "7882:6:11",
																									"nodeType": "YulIdentifier",
																									"src": "7882:6:11"
																								}
																							]
																						},
																						{
																							"nativeSrc": "7923:31:11",
																							"nodeType": "YulAssignment",
																							"src": "7923:31:11",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nativeSrc": "7940:9:11",
																										"nodeType": "YulIdentifier",
																										"src": "7940:9:11"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "7951:2:11",
																										"nodeType": "YulLiteral",
																										"src": "7951:2:11",
																										"type": "",
																										"value": "32"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "7936:3:11",
																									"nodeType": "YulIdentifier",
																									"src": "7936:3:11"
																								},
																								"nativeSrc": "7936:18:11",
																								"nodeType": "YulFunctionCall",
																								"src": "7936:18:11"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nativeSrc": "7923:9:11",
																									"nodeType": "YulIdentifier",
																									"src": "7923:9:11"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nativeSrc": "7771:1:11",
																							"nodeType": "YulIdentifier",
																							"src": "7771:1:11"
																						},
																						{
																							"name": "loopEnd",
																							"nativeSrc": "7774:7:11",
																							"nodeType": "YulIdentifier",
																							"src": "7774:7:11"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "7768:2:11",
																						"nodeType": "YulIdentifier",
																						"src": "7768:2:11"
																					},
																					"nativeSrc": "7768:14:11",
																					"nodeType": "YulFunctionCall",
																					"src": "7768:14:11"
																				},
																				"nativeSrc": "7760:208:11",
																				"nodeType": "YulForLoop",
																				"post": {
																					"nativeSrc": "7783:21:11",
																					"nodeType": "YulBlock",
																					"src": "7783:21:11",
																					"statements": [
																						{
																							"nativeSrc": "7785:17:11",
																							"nodeType": "YulAssignment",
																							"src": "7785:17:11",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nativeSrc": "7794:1:11",
																										"nodeType": "YulIdentifier",
																										"src": "7794:1:11"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "7797:4:11",
																										"nodeType": "YulLiteral",
																										"src": "7797:4:11",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "7790:3:11",
																									"nodeType": "YulIdentifier",
																									"src": "7790:3:11"
																								},
																								"nativeSrc": "7790:12:11",
																								"nodeType": "YulFunctionCall",
																								"src": "7790:12:11"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nativeSrc": "7785:1:11",
																									"nodeType": "YulIdentifier",
																									"src": "7785:1:11"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nativeSrc": "7764:3:11",
																					"nodeType": "YulBlock",
																					"src": "7764:3:11",
																					"statements": []
																				},
																				"src": "7760:208:11"
																			},
																			{
																				"body": {
																					"nativeSrc": "8004:156:11",
																					"nodeType": "YulBlock",
																					"src": "8004:156:11",
																					"statements": [
																						{
																							"nativeSrc": "8022:43:11",
																							"nodeType": "YulVariableDeclaration",
																							"src": "8022:43:11",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "8049:3:11",
																												"nodeType": "YulIdentifier",
																												"src": "8049:3:11"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "8054:9:11",
																												"nodeType": "YulIdentifier",
																												"src": "8054:9:11"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "8045:3:11",
																											"nodeType": "YulIdentifier",
																											"src": "8045:3:11"
																										},
																										"nativeSrc": "8045:19:11",
																										"nodeType": "YulFunctionCall",
																										"src": "8045:19:11"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "8039:5:11",
																									"nodeType": "YulIdentifier",
																									"src": "8039:5:11"
																								},
																								"nativeSrc": "8039:26:11",
																								"nodeType": "YulFunctionCall",
																								"src": "8039:26:11"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nativeSrc": "8026:9:11",
																									"nodeType": "YulTypedName",
																									"src": "8026:9:11",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "8089:6:11",
																										"nodeType": "YulIdentifier",
																										"src": "8089:6:11"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nativeSrc": "8116:9:11",
																												"nodeType": "YulIdentifier",
																												"src": "8116:9:11"
																											},
																											{
																												"arguments": [
																													{
																														"name": "newLen",
																														"nativeSrc": "8131:6:11",
																														"nodeType": "YulIdentifier",
																														"src": "8131:6:11"
																													},
																													{
																														"kind": "number",
																														"nativeSrc": "8139:4:11",
																														"nodeType": "YulLiteral",
																														"src": "8139:4:11",
																														"type": "",
																														"value": "0x1f"
																													}
																												],
																												"functionName": {
																													"name": "and",
																													"nativeSrc": "8127:3:11",
																													"nodeType": "YulIdentifier",
																													"src": "8127:3:11"
																												},
																												"nativeSrc": "8127:17:11",
																												"nodeType": "YulFunctionCall",
																												"src": "8127:17:11"
																											}
																										],
																										"functionName": {
																											"name": "mask_bytes_dynamic",
																											"nativeSrc": "8097:18:11",
																											"nodeType": "YulIdentifier",
																											"src": "8097:18:11"
																										},
																										"nativeSrc": "8097:48:11",
																										"nodeType": "YulFunctionCall",
																										"src": "8097:48:11"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "8082:6:11",
																									"nodeType": "YulIdentifier",
																									"src": "8082:6:11"
																								},
																								"nativeSrc": "8082:64:11",
																								"nodeType": "YulFunctionCall",
																								"src": "8082:64:11"
																							},
																							"nativeSrc": "8082:64:11",
																							"nodeType": "YulExpressionStatement",
																							"src": "8082:64:11"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nativeSrc": "7987:7:11",
																							"nodeType": "YulIdentifier",
																							"src": "7987:7:11"
																						},
																						{
																							"name": "newLen",
																							"nativeSrc": "7996:6:11",
																							"nodeType": "YulIdentifier",
																							"src": "7996:6:11"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "7984:2:11",
																						"nodeType": "YulIdentifier",
																						"src": "7984:2:11"
																					},
																					"nativeSrc": "7984:19:11",
																					"nodeType": "YulFunctionCall",
																					"src": "7984:19:11"
																				},
																				"nativeSrc": "7981:179:11",
																				"nodeType": "YulIf",
																				"src": "7981:179:11"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "8180:4:11",
																							"nodeType": "YulIdentifier",
																							"src": "8180:4:11"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "newLen",
																											"nativeSrc": "8194:6:11",
																											"nodeType": "YulIdentifier",
																											"src": "8194:6:11"
																										},
																										{
																											"kind": "number",
																											"nativeSrc": "8202:1:11",
																											"nodeType": "YulLiteral",
																											"src": "8202:1:11",
																											"type": "",
																											"value": "2"
																										}
																									],
																									"functionName": {
																										"name": "mul",
																										"nativeSrc": "8190:3:11",
																										"nodeType": "YulIdentifier",
																										"src": "8190:3:11"
																									},
																									"nativeSrc": "8190:14:11",
																									"nodeType": "YulFunctionCall",
																									"src": "8190:14:11"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "8206:1:11",
																									"nodeType": "YulLiteral",
																									"src": "8206:1:11",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "8186:3:11",
																								"nodeType": "YulIdentifier",
																								"src": "8186:3:11"
																							},
																							"nativeSrc": "8186:22:11",
																							"nodeType": "YulFunctionCall",
																							"src": "8186:22:11"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "8173:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "8173:6:11"
																					},
																					"nativeSrc": "8173:36:11",
																					"nodeType": "YulFunctionCall",
																					"src": "8173:36:11"
																				},
																				"nativeSrc": "8173:36:11",
																				"nodeType": "YulExpressionStatement",
																				"src": "8173:36:11"
																			}
																		]
																	},
																	"nativeSrc": "7601:618:11",
																	"nodeType": "YulCase",
																	"src": "7601:618:11",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "7606:1:11",
																		"nodeType": "YulLiteral",
																		"src": "7606:1:11",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "8236:222:11",
																		"nodeType": "YulBlock",
																		"src": "8236:222:11",
																		"statements": [
																			{
																				"nativeSrc": "8250:14:11",
																				"nodeType": "YulVariableDeclaration",
																				"src": "8250:14:11",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "8263:1:11",
																					"nodeType": "YulLiteral",
																					"src": "8263:1:11",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nativeSrc": "8254:5:11",
																						"nodeType": "YulTypedName",
																						"src": "8254:5:11",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "8287:67:11",
																					"nodeType": "YulBlock",
																					"src": "8287:67:11",
																					"statements": [
																						{
																							"nativeSrc": "8305:35:11",
																							"nodeType": "YulAssignment",
																							"src": "8305:35:11",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "8324:3:11",
																												"nodeType": "YulIdentifier",
																												"src": "8324:3:11"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "8329:9:11",
																												"nodeType": "YulIdentifier",
																												"src": "8329:9:11"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "8320:3:11",
																											"nodeType": "YulIdentifier",
																											"src": "8320:3:11"
																										},
																										"nativeSrc": "8320:19:11",
																										"nodeType": "YulFunctionCall",
																										"src": "8320:19:11"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "8314:5:11",
																									"nodeType": "YulIdentifier",
																									"src": "8314:5:11"
																								},
																								"nativeSrc": "8314:26:11",
																								"nodeType": "YulFunctionCall",
																								"src": "8314:26:11"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nativeSrc": "8305:5:11",
																									"nodeType": "YulIdentifier",
																									"src": "8305:5:11"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nativeSrc": "8280:6:11",
																					"nodeType": "YulIdentifier",
																					"src": "8280:6:11"
																				},
																				"nativeSrc": "8277:77:11",
																				"nodeType": "YulIf",
																				"src": "8277:77:11"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "8374:4:11",
																							"nodeType": "YulIdentifier",
																							"src": "8374:4:11"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nativeSrc": "8433:5:11",
																									"nodeType": "YulIdentifier",
																									"src": "8433:5:11"
																								},
																								{
																									"name": "newLen",
																									"nativeSrc": "8440:6:11",
																									"nodeType": "YulIdentifier",
																									"src": "8440:6:11"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nativeSrc": "8380:52:11",
																								"nodeType": "YulIdentifier",
																								"src": "8380:52:11"
																							},
																							"nativeSrc": "8380:67:11",
																							"nodeType": "YulFunctionCall",
																							"src": "8380:67:11"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "8367:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "8367:6:11"
																					},
																					"nativeSrc": "8367:81:11",
																					"nodeType": "YulFunctionCall",
																					"src": "8367:81:11"
																				},
																				"nativeSrc": "8367:81:11",
																				"nodeType": "YulExpressionStatement",
																				"src": "8367:81:11"
																			}
																		]
																	},
																	"nativeSrc": "8228:230:11",
																	"nodeType": "YulCase",
																	"src": "8228:230:11",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "7581:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "7581:6:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7589:2:11",
																		"nodeType": "YulLiteral",
																		"src": "7589:2:11",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "7578:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "7578:2:11"
																},
																"nativeSrc": "7578:14:11",
																"nodeType": "YulFunctionCall",
																"src": "7578:14:11"
															},
															"nativeSrc": "7571:887:11",
															"nodeType": "YulSwitch",
															"src": "7571:887:11"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nativeSrc": "7069:1395:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "7150:4:11",
														"nodeType": "YulTypedName",
														"src": "7150:4:11",
														"type": ""
													},
													{
														"name": "src",
														"nativeSrc": "7156:3:11",
														"nodeType": "YulTypedName",
														"src": "7156:3:11",
														"type": ""
													}
												],
												"src": "7069:1395:11"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        mcopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n}\n",
									"id": 11,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b506040516116ad3803806116ad833981810160405281019061003191906101a5565b81600390816100409190610428565b5080600490816100509190610428565b5050506104f7565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6100b782610071565b810181811067ffffffffffffffff821117156100d6576100d5610081565b5b80604052505050565b5f6100e8610058565b90506100f482826100ae565b919050565b5f67ffffffffffffffff82111561011357610112610081565b5b61011c82610071565b9050602081019050919050565b8281835e5f83830152505050565b5f610149610144846100f9565b6100df565b9050828152602081018484840111156101655761016461006d565b5b610170848285610129565b509392505050565b5f82601f83011261018c5761018b610069565b5b815161019c848260208601610137565b91505092915050565b5f80604083850312156101bb576101ba610061565b5b5f83015167ffffffffffffffff8111156101d8576101d7610065565b5b6101e485828601610178565b925050602083015167ffffffffffffffff81111561020557610204610065565b5b61021185828601610178565b9150509250929050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061026957607f821691505b60208210810361027c5761027b610225565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026102de7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826102a3565b6102e886836102a3565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61032c61032761032284610300565b610309565b610300565b9050919050565b5f819050919050565b61034583610312565b61035961035182610333565b8484546102af565b825550505050565b5f90565b61036d610361565b61037881848461033c565b505050565b5b8181101561039b576103905f82610365565b60018101905061037e565b5050565b601f8211156103e0576103b181610282565b6103ba84610294565b810160208510156103c9578190505b6103dd6103d585610294565b83018261037d565b50505b505050565b5f82821c905092915050565b5f6104005f19846008026103e5565b1980831691505092915050565b5f61041883836103f1565b9150826002028217905092915050565b6104318261021b565b67ffffffffffffffff81111561044a57610449610081565b5b6104548254610252565b61045f82828561039f565b5f60209050601f831160018114610490575f841561047e578287015190505b610488858261040d565b8655506104ef565b601f19841661049e86610282565b5f5b828110156104c5578489015182556001820191506020850194506020810190506104a0565b868310156104e257848901516104de601f8916826103f1565b8355505b6001600288020188555050505b505050505050565b6111a9806105045f395ff3fe608060405234801561000f575f80fd5b50600436106100a7575f3560e01c8063395093511161006f578063395093511461016557806370a082311461019557806395d89b41146101c5578063a457c2d7146101e3578063a9059cbb14610213578063dd62ed3e14610243576100a7565b806306fdde03146100ab578063095ea7b3146100c957806318160ddd146100f957806323b872dd14610117578063313ce56714610147575b5f80fd5b6100b3610273565b6040516100c09190610ac3565b60405180910390f35b6100e360048036038101906100de9190610b74565b610303565b6040516100f09190610bcc565b60405180910390f35b610101610325565b60405161010e9190610bf4565b60405180910390f35b610131600480360381019061012c9190610c0d565b61032e565b60405161013e9190610bcc565b60405180910390f35b61014f61035c565b60405161015c9190610c78565b60405180910390f35b61017f600480360381019061017a9190610b74565b610364565b60405161018c9190610bcc565b60405180910390f35b6101af60048036038101906101aa9190610c91565b61039a565b6040516101bc9190610bf4565b60405180910390f35b6101cd6103df565b6040516101da9190610ac3565b60405180910390f35b6101fd60048036038101906101f89190610b74565b61046f565b60405161020a9190610bcc565b60405180910390f35b61022d60048036038101906102289190610b74565b6104e4565b60405161023a9190610bcc565b60405180910390f35b61025d60048036038101906102589190610cbc565b610506565b60405161026a9190610bf4565b60405180910390f35b60606003805461028290610d27565b80601f01602080910402602001604051908101604052809291908181526020018280546102ae90610d27565b80156102f95780601f106102d0576101008083540402835291602001916102f9565b820191905f5260205f20905b8154815290600101906020018083116102dc57829003601f168201915b5050505050905090565b5f8061030d610588565b905061031a81858561058f565b600191505092915050565b5f600254905090565b5f80610338610588565b9050610345858285610752565b6103508585856107dd565b60019150509392505050565b5f6012905090565b5f8061036e610588565b905061038f8185856103808589610506565b61038a9190610d84565b61058f565b600191505092915050565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6060600480546103ee90610d27565b80601f016020809104026020016040519081016040528092919081815260200182805461041a90610d27565b80156104655780601f1061043c57610100808354040283529160200191610465565b820191905f5260205f20905b81548152906001019060200180831161044857829003601f168201915b5050505050905090565b5f80610479610588565b90505f6104868286610506565b9050838110156104cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c290610e27565b60405180910390fd5b6104d8828686840361058f565b60019250505092915050565b5f806104ee610588565b90506104fb8185856107dd565b600191505092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f490610eb5565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361066b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066290610f43565b60405180910390fd5b8060015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107459190610bf4565b60405180910390a3505050565b5f61075d8484610506565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107d757818110156107c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c090610fab565b60405180910390fd5b6107d6848484840361058f565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361084b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084290611039565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b0906110c7565b60405180910390fd5b6108c4838383610a49565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093e90611155565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550815f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a309190610bf4565b60405180910390a3610a43848484610a4e565b50505050565b505050565b505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610a9582610a53565b610a9f8185610a5d565b9350610aaf818560208601610a6d565b610ab881610a7b565b840191505092915050565b5f6020820190508181035f830152610adb8184610a8b565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610b1082610ae7565b9050919050565b610b2081610b06565b8114610b2a575f80fd5b50565b5f81359050610b3b81610b17565b92915050565b5f819050919050565b610b5381610b41565b8114610b5d575f80fd5b50565b5f81359050610b6e81610b4a565b92915050565b5f8060408385031215610b8a57610b89610ae3565b5b5f610b9785828601610b2d565b9250506020610ba885828601610b60565b9150509250929050565b5f8115159050919050565b610bc681610bb2565b82525050565b5f602082019050610bdf5f830184610bbd565b92915050565b610bee81610b41565b82525050565b5f602082019050610c075f830184610be5565b92915050565b5f805f60608486031215610c2457610c23610ae3565b5b5f610c3186828701610b2d565b9350506020610c4286828701610b2d565b9250506040610c5386828701610b60565b9150509250925092565b5f60ff82169050919050565b610c7281610c5d565b82525050565b5f602082019050610c8b5f830184610c69565b92915050565b5f60208284031215610ca657610ca5610ae3565b5b5f610cb384828501610b2d565b91505092915050565b5f8060408385031215610cd257610cd1610ae3565b5b5f610cdf85828601610b2d565b9250506020610cf085828601610b2d565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610d3e57607f821691505b602082108103610d5157610d50610cfa565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610d8e82610b41565b9150610d9983610b41565b9250828201905080821115610db157610db0610d57565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f775f8201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b5f610e11602583610a5d565b9150610e1c82610db7565b604082019050919050565b5f6020820190508181035f830152610e3e81610e05565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f610e9f602483610a5d565b9150610eaa82610e45565b604082019050919050565b5f6020820190508181035f830152610ecc81610e93565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f610f2d602283610a5d565b9150610f3882610ed3565b604082019050919050565b5f6020820190508181035f830152610f5a81610f21565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000005f82015250565b5f610f95601d83610a5d565b9150610fa082610f61565b602082019050919050565b5f6020820190508181035f830152610fc281610f89565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f611023602583610a5d565b915061102e82610fc9565b604082019050919050565b5f6020820190508181035f83015261105081611017565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f20616464725f8201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b5f6110b1602383610a5d565b91506110bc82611057565b604082019050919050565b5f6020820190508181035f8301526110de816110a5565b9050919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320625f8201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b5f61113f602683610a5d565b915061114a826110e5565b604082019050919050565b5f6020820190508181035f83015261116c81611133565b905091905056fea26469706673582212205c7b8c5f8721b076c916c8dbb5738d63065fca3641280c99b318c7d5db14527864736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x16AD CODESIZE SUB DUP1 PUSH2 0x16AD DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x31 SWAP2 SWAP1 PUSH2 0x1A5 JUMP JUMPDEST DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH2 0x40 SWAP2 SWAP1 PUSH2 0x428 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP2 PUSH2 0x50 SWAP2 SWAP1 PUSH2 0x428 JUMP JUMPDEST POP POP POP PUSH2 0x4F7 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH2 0xB7 DUP3 PUSH2 0x71 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xD6 JUMPI PUSH2 0xD5 PUSH2 0x81 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xE8 PUSH2 0x58 JUMP JUMPDEST SWAP1 POP PUSH2 0xF4 DUP3 DUP3 PUSH2 0xAE JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x113 JUMPI PUSH2 0x112 PUSH2 0x81 JUMP JUMPDEST JUMPDEST PUSH2 0x11C DUP3 PUSH2 0x71 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x149 PUSH2 0x144 DUP5 PUSH2 0xF9 JUMP JUMPDEST PUSH2 0xDF JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x165 JUMPI PUSH2 0x164 PUSH2 0x6D JUMP JUMPDEST JUMPDEST PUSH2 0x170 DUP5 DUP3 DUP6 PUSH2 0x129 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x18C JUMPI PUSH2 0x18B PUSH2 0x69 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH2 0x19C DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x137 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BB JUMPI PUSH2 0x1BA PUSH2 0x61 JUMP JUMPDEST JUMPDEST PUSH0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D8 JUMPI PUSH2 0x1D7 PUSH2 0x65 JUMP JUMPDEST JUMPDEST PUSH2 0x1E4 DUP6 DUP3 DUP7 ADD PUSH2 0x178 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x205 JUMPI PUSH2 0x204 PUSH2 0x65 JUMP JUMPDEST JUMPDEST PUSH2 0x211 DUP6 DUP3 DUP7 ADD PUSH2 0x178 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x269 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x27C JUMPI PUSH2 0x27B PUSH2 0x225 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP DUP2 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 DUP4 MUL PUSH2 0x2DE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x2A3 JUMP JUMPDEST PUSH2 0x2E8 DUP7 DUP4 PUSH2 0x2A3 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x32C PUSH2 0x327 PUSH2 0x322 DUP5 PUSH2 0x300 JUMP JUMPDEST PUSH2 0x309 JUMP JUMPDEST PUSH2 0x300 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x345 DUP4 PUSH2 0x312 JUMP JUMPDEST PUSH2 0x359 PUSH2 0x351 DUP3 PUSH2 0x333 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x2AF JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH2 0x36D PUSH2 0x361 JUMP JUMPDEST PUSH2 0x378 DUP2 DUP5 DUP5 PUSH2 0x33C JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x39B JUMPI PUSH2 0x390 PUSH0 DUP3 PUSH2 0x365 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x37E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3E0 JUMPI PUSH2 0x3B1 DUP2 PUSH2 0x282 JUMP JUMPDEST PUSH2 0x3BA DUP5 PUSH2 0x294 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x3C9 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x3DD PUSH2 0x3D5 DUP6 PUSH2 0x294 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x37D JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x400 PUSH0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x3E5 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x418 DUP4 DUP4 PUSH2 0x3F1 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x431 DUP3 PUSH2 0x21B JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x44A JUMPI PUSH2 0x449 PUSH2 0x81 JUMP JUMPDEST JUMPDEST PUSH2 0x454 DUP3 SLOAD PUSH2 0x252 JUMP JUMPDEST PUSH2 0x45F DUP3 DUP3 DUP6 PUSH2 0x39F JUMP JUMPDEST PUSH0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x490 JUMPI PUSH0 DUP5 ISZERO PUSH2 0x47E JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x488 DUP6 DUP3 PUSH2 0x40D JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x4EF JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x49E DUP7 PUSH2 0x282 JUMP JUMPDEST PUSH0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4C5 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4A0 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x4E2 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x4DE PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3F1 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x11A9 DUP1 PUSH2 0x504 PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA7 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x213 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x243 JUMPI PUSH2 0xA7 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xC9 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xF9 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x147 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xB3 PUSH2 0x273 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC0 SWAP2 SWAP1 PUSH2 0xAC3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xDE SWAP2 SWAP1 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x303 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF0 SWAP2 SWAP1 PUSH2 0xBCC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x101 PUSH2 0x325 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10E SWAP2 SWAP1 PUSH2 0xBF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x131 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12C SWAP2 SWAP1 PUSH2 0xC0D JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x13E SWAP2 SWAP1 PUSH2 0xBCC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14F PUSH2 0x35C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15C SWAP2 SWAP1 PUSH2 0xC78 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17A SWAP2 SWAP1 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18C SWAP2 SWAP1 PUSH2 0xBCC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AA SWAP2 SWAP1 PUSH2 0xC91 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BC SWAP2 SWAP1 PUSH2 0xBF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CD PUSH2 0x3DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DA SWAP2 SWAP1 PUSH2 0xAC3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F8 SWAP2 SWAP1 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x46F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20A SWAP2 SWAP1 PUSH2 0xBCC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x22D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x228 SWAP2 SWAP1 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x4E4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23A SWAP2 SWAP1 PUSH2 0xBCC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x25D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x258 SWAP2 SWAP1 PUSH2 0xCBC JUMP JUMPDEST PUSH2 0x506 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26A SWAP2 SWAP1 PUSH2 0xBF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x282 SWAP1 PUSH2 0xD27 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2AE SWAP1 PUSH2 0xD27 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2F9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2F9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2DC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x30D PUSH2 0x588 JUMP JUMPDEST SWAP1 POP PUSH2 0x31A DUP2 DUP6 DUP6 PUSH2 0x58F JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x338 PUSH2 0x588 JUMP JUMPDEST SWAP1 POP PUSH2 0x345 DUP6 DUP3 DUP6 PUSH2 0x752 JUMP JUMPDEST PUSH2 0x350 DUP6 DUP6 DUP6 PUSH2 0x7DD JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x36E PUSH2 0x588 JUMP JUMPDEST SWAP1 POP PUSH2 0x38F DUP2 DUP6 DUP6 PUSH2 0x380 DUP6 DUP10 PUSH2 0x506 JUMP JUMPDEST PUSH2 0x38A SWAP2 SWAP1 PUSH2 0xD84 JUMP JUMPDEST PUSH2 0x58F JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x3EE SWAP1 PUSH2 0xD27 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x41A SWAP1 PUSH2 0xD27 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x465 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x43C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x465 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x448 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x479 PUSH2 0x588 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x486 DUP3 DUP7 PUSH2 0x506 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4CB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4C2 SWAP1 PUSH2 0xE27 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4D8 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x58F JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x4EE PUSH2 0x588 JUMP JUMPDEST SWAP1 POP PUSH2 0x4FB DUP2 DUP6 DUP6 PUSH2 0x7DD JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x5FD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F4 SWAP1 PUSH2 0xEB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x66B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x662 SWAP1 PUSH2 0xF43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x745 SWAP2 SWAP1 PUSH2 0xBF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x75D DUP5 DUP5 PUSH2 0x506 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7D7 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7C0 SWAP1 PUSH2 0xFAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7D6 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x58F JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x84B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x842 SWAP1 PUSH2 0x1039 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x8B9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8B0 SWAP1 PUSH2 0x10C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8C4 DUP4 DUP4 DUP4 PUSH2 0xA49 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x947 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x93E SWAP1 PUSH2 0x1155 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA30 SWAP2 SWAP1 PUSH2 0xBF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA43 DUP5 DUP5 DUP5 PUSH2 0xA4E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xA95 DUP3 PUSH2 0xA53 JUMP JUMPDEST PUSH2 0xA9F DUP2 DUP6 PUSH2 0xA5D JUMP JUMPDEST SWAP4 POP PUSH2 0xAAF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xA6D JUMP JUMPDEST PUSH2 0xAB8 DUP2 PUSH2 0xA7B JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xADB DUP2 DUP5 PUSH2 0xA8B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xB10 DUP3 PUSH2 0xAE7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB20 DUP2 PUSH2 0xB06 JUMP JUMPDEST DUP2 EQ PUSH2 0xB2A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB3B DUP2 PUSH2 0xB17 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB53 DUP2 PUSH2 0xB41 JUMP JUMPDEST DUP2 EQ PUSH2 0xB5D JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB6E DUP2 PUSH2 0xB4A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB8A JUMPI PUSH2 0xB89 PUSH2 0xAE3 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xB97 DUP6 DUP3 DUP7 ADD PUSH2 0xB2D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xBA8 DUP6 DUP3 DUP7 ADD PUSH2 0xB60 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBC6 DUP2 PUSH2 0xBB2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xBDF PUSH0 DUP4 ADD DUP5 PUSH2 0xBBD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xBEE DUP2 PUSH2 0xB41 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC07 PUSH0 DUP4 ADD DUP5 PUSH2 0xBE5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC24 JUMPI PUSH2 0xC23 PUSH2 0xAE3 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xC31 DUP7 DUP3 DUP8 ADD PUSH2 0xB2D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC42 DUP7 DUP3 DUP8 ADD PUSH2 0xB2D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xC53 DUP7 DUP3 DUP8 ADD PUSH2 0xB60 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC72 DUP2 PUSH2 0xC5D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC8B PUSH0 DUP4 ADD DUP5 PUSH2 0xC69 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCA6 JUMPI PUSH2 0xCA5 PUSH2 0xAE3 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xCB3 DUP5 DUP3 DUP6 ADD PUSH2 0xB2D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCD2 JUMPI PUSH2 0xCD1 PUSH2 0xAE3 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xCDF DUP6 DUP3 DUP7 ADD PUSH2 0xB2D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xCF0 DUP6 DUP3 DUP7 ADD PUSH2 0xB2D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xD3E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xD51 JUMPI PUSH2 0xD50 PUSH2 0xCFA JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0xD8E DUP3 PUSH2 0xB41 JUMP JUMPDEST SWAP2 POP PUSH2 0xD99 DUP4 PUSH2 0xB41 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xDB1 JUMPI PUSH2 0xDB0 PUSH2 0xD57 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0xE11 PUSH1 0x25 DUP4 PUSH2 0xA5D JUMP JUMPDEST SWAP2 POP PUSH2 0xE1C DUP3 PUSH2 0xDB7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xE3E DUP2 PUSH2 0xE05 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0xE9F PUSH1 0x24 DUP4 PUSH2 0xA5D JUMP JUMPDEST SWAP2 POP PUSH2 0xEAA DUP3 PUSH2 0xE45 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xECC DUP2 PUSH2 0xE93 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0xF2D PUSH1 0x22 DUP4 PUSH2 0xA5D JUMP JUMPDEST SWAP2 POP PUSH2 0xF38 DUP3 PUSH2 0xED3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xF5A DUP2 PUSH2 0xF21 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0xF95 PUSH1 0x1D DUP4 PUSH2 0xA5D JUMP JUMPDEST SWAP2 POP PUSH2 0xFA0 DUP3 PUSH2 0xF61 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xFC2 DUP2 PUSH2 0xF89 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x1023 PUSH1 0x25 DUP4 PUSH2 0xA5D JUMP JUMPDEST SWAP2 POP PUSH2 0x102E DUP3 PUSH2 0xFC9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1050 DUP2 PUSH2 0x1017 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x10B1 PUSH1 0x23 DUP4 PUSH2 0xA5D JUMP JUMPDEST SWAP2 POP PUSH2 0x10BC DUP3 PUSH2 0x1057 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x10DE DUP2 PUSH2 0x10A5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x113F PUSH1 0x26 DUP4 PUSH2 0xA5D JUMP JUMPDEST SWAP2 POP PUSH2 0x114A DUP3 PUSH2 0x10E5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x116C DUP2 PUSH2 0x1133 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TLOAD PUSH28 0x8C5F8721B076C916C8DBB5738D63065FCA3641280C99B318C7D5DB14 MSTORE PUSH25 0x64736F6C634300081A00330000000000000000000000000000 ",
							"sourceMap": "2664:11610:0:-:0;;;3239:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3313:5;3305;:13;;;;;;:::i;:::-;;3338:7;3328;:17;;;;;;:::i;:::-;;3239:113;;2664:11610;;7:75:11;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:139::-;1699:6;1694:3;1689;1683:23;1740:1;1731:6;1726:3;1722:16;1715:27;1610:139;;;:::o;1755:434::-;1844:5;1869:66;1885:49;1927:6;1885:49;:::i;:::-;1869:66;:::i;:::-;1860:75;;1958:6;1951:5;1944:21;1996:4;1989:5;1985:16;2034:3;2025:6;2020:3;2016:16;2013:25;2010:112;;;2041:79;;:::i;:::-;2010:112;2131:52;2176:6;2171:3;2166;2131:52;:::i;:::-;1850:339;1755:434;;;;;:::o;2209:355::-;2276:5;2325:3;2318:4;2310:6;2306:17;2302:27;2292:122;;2333:79;;:::i;:::-;2292:122;2443:6;2437:13;2468:90;2554:3;2546:6;2539:4;2531:6;2527:17;2468:90;:::i;:::-;2459:99;;2282:282;2209:355;;;;:::o;2570:853::-;2669:6;2677;2726:2;2714:9;2705:7;2701:23;2697:32;2694:119;;;2732:79;;:::i;:::-;2694:119;2873:1;2862:9;2858:17;2852:24;2903:18;2895:6;2892:30;2889:117;;;2925:79;;:::i;:::-;2889:117;3030:74;3096:7;3087:6;3076:9;3072:22;3030:74;:::i;:::-;3020:84;;2823:291;3174:2;3163:9;3159:18;3153:25;3205:18;3197:6;3194:30;3191:117;;;3227:79;;:::i;:::-;3191:117;3332:74;3398:7;3389:6;3378:9;3374:22;3332:74;:::i;:::-;3322:84;;3124:292;2570:853;;;;;:::o;3429:99::-;3481:6;3515:5;3509:12;3499:22;;3429:99;;;:::o;3534:180::-;3582:77;3579:1;3572:88;3679:4;3676:1;3669:15;3703:4;3700:1;3693:15;3720:320;3764:6;3801:1;3795:4;3791:12;3781:22;;3848:1;3842:4;3838:12;3869:18;3859:81;;3925:4;3917:6;3913:17;3903:27;;3859:81;3987:2;3979:6;3976:14;3956:18;3953:38;3950:84;;4006:18;;:::i;:::-;3950:84;3771:269;3720:320;;;:::o;4046:141::-;4095:4;4118:3;4110:11;;4141:3;4138:1;4131:14;4175:4;4172:1;4162:18;4154:26;;4046:141;;;:::o;4193:93::-;4230:6;4277:2;4272;4265:5;4261:14;4257:23;4247:33;;4193:93;;;:::o;4292:107::-;4336:8;4386:5;4380:4;4376:16;4355:37;;4292:107;;;;:::o;4405:393::-;4474:6;4524:1;4512:10;4508:18;4547:97;4577:66;4566:9;4547:97;:::i;:::-;4665:39;4695:8;4684:9;4665:39;:::i;:::-;4653:51;;4737:4;4733:9;4726:5;4722:21;4713:30;;4786:4;4776:8;4772:19;4765:5;4762:30;4752:40;;4481:317;;4405:393;;;;;:::o;4804:77::-;4841:7;4870:5;4859:16;;4804:77;;;:::o;4887:60::-;4915:3;4936:5;4929:12;;4887:60;;;:::o;4953:142::-;5003:9;5036:53;5054:34;5063:24;5081:5;5063:24;:::i;:::-;5054:34;:::i;:::-;5036:53;:::i;:::-;5023:66;;4953:142;;;:::o;5101:75::-;5144:3;5165:5;5158:12;;5101:75;;;:::o;5182:269::-;5292:39;5323:7;5292:39;:::i;:::-;5353:91;5402:41;5426:16;5402:41;:::i;:::-;5394:6;5387:4;5381:11;5353:91;:::i;:::-;5347:4;5340:105;5258:193;5182:269;;;:::o;5457:73::-;5502:3;5457:73;:::o;5536:189::-;5613:32;;:::i;:::-;5654:65;5712:6;5704;5698:4;5654:65;:::i;:::-;5589:136;5536:189;;:::o;5731:186::-;5791:120;5808:3;5801:5;5798:14;5791:120;;;5862:39;5899:1;5892:5;5862:39;:::i;:::-;5835:1;5828:5;5824:13;5815:22;;5791:120;;;5731:186;;:::o;5923:543::-;6024:2;6019:3;6016:11;6013:446;;;6058:38;6090:5;6058:38;:::i;:::-;6142:29;6160:10;6142:29;:::i;:::-;6132:8;6128:44;6325:2;6313:10;6310:18;6307:49;;;6346:8;6331:23;;6307:49;6369:80;6425:22;6443:3;6425:22;:::i;:::-;6415:8;6411:37;6398:11;6369:80;:::i;:::-;6028:431;;6013:446;5923:543;;;:::o;6472:117::-;6526:8;6576:5;6570:4;6566:16;6545:37;;6472:117;;;;:::o;6595:169::-;6639:6;6672:51;6720:1;6716:6;6708:5;6705:1;6701:13;6672:51;:::i;:::-;6668:56;6753:4;6747;6743:15;6733:25;;6646:118;6595:169;;;;:::o;6769:295::-;6845:4;6991:29;7016:3;7010:4;6991:29;:::i;:::-;6983:37;;7053:3;7050:1;7046:11;7040:4;7037:21;7029:29;;6769:295;;;;:::o;7069:1395::-;7186:37;7219:3;7186:37;:::i;:::-;7288:18;7280:6;7277:30;7274:56;;;7310:18;;:::i;:::-;7274:56;7354:38;7386:4;7380:11;7354:38;:::i;:::-;7439:67;7499:6;7491;7485:4;7439:67;:::i;:::-;7533:1;7557:4;7544:17;;7589:2;7581:6;7578:14;7606:1;7601:618;;;;8263:1;8280:6;8277:77;;;8329:9;8324:3;8320:19;8314:26;8305:35;;8277:77;8380:67;8440:6;8433:5;8380:67;:::i;:::-;8374:4;8367:81;8236:222;7571:887;;7601:618;7653:4;7649:9;7641:6;7637:22;7687:37;7719:4;7687:37;:::i;:::-;7746:1;7760:208;7774:7;7771:1;7768:14;7760:208;;;7853:9;7848:3;7844:19;7838:26;7830:6;7823:42;7904:1;7896:6;7892:14;7882:24;;7951:2;7940:9;7936:18;7923:31;;7797:4;7794:1;7790:12;7785:17;;7760:208;;;7996:6;7987:7;7984:19;7981:179;;;8054:9;8049:3;8045:19;8039:26;8097:48;8139:4;8131:6;8127:17;8116:9;8097:48;:::i;:::-;8089:6;8082:64;8004:156;7981:179;8206:1;8202;8194:6;8190:14;8186:22;8180:4;8173:36;7608:611;;;7571:887;;7161:1303;;;7069:1395;;:::o;2664:11610:0:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfer_585": {
									"entryPoint": 2638,
									"id": 585,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_520": {
									"entryPoint": 1423,
									"id": 520,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_574": {
									"entryPoint": 2633,
									"id": 574,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_msgSender_909": {
									"entryPoint": 1416,
									"id": 909,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_563": {
									"entryPoint": 1874,
									"id": 563,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_346": {
									"entryPoint": 2013,
									"id": 346,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_141": {
									"entryPoint": 1286,
									"id": 141,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_166": {
									"entryPoint": 771,
									"id": 166,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_98": {
									"entryPoint": 922,
									"id": 98,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_74": {
									"entryPoint": 860,
									"id": 74,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_269": {
									"entryPoint": 1135,
									"id": 269,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increaseAllowance_228": {
									"entryPoint": 868,
									"id": 228,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@name_54": {
									"entryPoint": 627,
									"id": 54,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@symbol_64": {
									"entryPoint": 991,
									"id": 64,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_84": {
									"entryPoint": 805,
									"id": 84,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_199": {
									"entryPoint": 814,
									"id": 199,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_123": {
									"entryPoint": 1252,
									"id": 123,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 2861,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 2912,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 3217,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 3260,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 3085,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 2932,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 3005,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 2699,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4261,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3873,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3977,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4403,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4119,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3731,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3589,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 3045,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint8_to_t_uint8_fromStack": {
									"entryPoint": 3177,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 3020,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2755,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4295,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3907,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4011,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4437,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4153,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3765,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3623,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 3060,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": 3192,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 2643,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 2653,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 3460,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 2822,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 2994,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 2791,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 2881,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint8": {
									"entryPoint": 3165,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 2669,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 3367,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 3415,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 3322,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 2787,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 2683,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f": {
									"entryPoint": 4183,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029": {
									"entryPoint": 3795,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe": {
									"entryPoint": 3937,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6": {
									"entryPoint": 4325,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea": {
									"entryPoint": 4041,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208": {
									"entryPoint": 3653,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8": {
									"entryPoint": 3511,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 2839,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 2890,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:13592:11",
										"nodeType": "YulBlock",
										"src": "0:13592:11",
										"statements": [
											{
												"body": {
													"nativeSrc": "66:40:11",
													"nodeType": "YulBlock",
													"src": "66:40:11",
													"statements": [
														{
															"nativeSrc": "77:22:11",
															"nodeType": "YulAssignment",
															"src": "77:22:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "93:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "93:5:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "87:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "87:5:11"
																},
																"nativeSrc": "87:12:11",
																"nodeType": "YulFunctionCall",
																"src": "87:12:11"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "77:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "77:6:11"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "7:99:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "49:5:11",
														"nodeType": "YulTypedName",
														"src": "49:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "59:6:11",
														"nodeType": "YulTypedName",
														"src": "59:6:11",
														"type": ""
													}
												],
												"src": "7:99:11"
											},
											{
												"body": {
													"nativeSrc": "208:73:11",
													"nodeType": "YulBlock",
													"src": "208:73:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "225:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "225:3:11"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "230:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "230:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "218:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "218:6:11"
																},
																"nativeSrc": "218:19:11",
																"nodeType": "YulFunctionCall",
																"src": "218:19:11"
															},
															"nativeSrc": "218:19:11",
															"nodeType": "YulExpressionStatement",
															"src": "218:19:11"
														},
														{
															"nativeSrc": "246:29:11",
															"nodeType": "YulAssignment",
															"src": "246:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "265:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "265:3:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "270:4:11",
																		"nodeType": "YulLiteral",
																		"src": "270:4:11",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "261:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "261:3:11"
																},
																"nativeSrc": "261:14:11",
																"nodeType": "YulFunctionCall",
																"src": "261:14:11"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "246:11:11",
																	"nodeType": "YulIdentifier",
																	"src": "246:11:11"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "112:169:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "180:3:11",
														"nodeType": "YulTypedName",
														"src": "180:3:11",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "185:6:11",
														"nodeType": "YulTypedName",
														"src": "185:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "196:11:11",
														"nodeType": "YulTypedName",
														"src": "196:11:11",
														"type": ""
													}
												],
												"src": "112:169:11"
											},
											{
												"body": {
													"nativeSrc": "349:77:11",
													"nodeType": "YulBlock",
													"src": "349:77:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nativeSrc": "366:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "366:3:11"
																	},
																	{
																		"name": "src",
																		"nativeSrc": "371:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "371:3:11"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "376:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "376:6:11"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "360:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "360:5:11"
																},
																"nativeSrc": "360:23:11",
																"nodeType": "YulFunctionCall",
																"src": "360:23:11"
															},
															"nativeSrc": "360:23:11",
															"nodeType": "YulExpressionStatement",
															"src": "360:23:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nativeSrc": "403:3:11",
																				"nodeType": "YulIdentifier",
																				"src": "403:3:11"
																			},
																			{
																				"name": "length",
																				"nativeSrc": "408:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "408:6:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "399:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "399:3:11"
																		},
																		"nativeSrc": "399:16:11",
																		"nodeType": "YulFunctionCall",
																		"src": "399:16:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "417:1:11",
																		"nodeType": "YulLiteral",
																		"src": "417:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "392:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "392:6:11"
																},
																"nativeSrc": "392:27:11",
																"nodeType": "YulFunctionCall",
																"src": "392:27:11"
															},
															"nativeSrc": "392:27:11",
															"nodeType": "YulExpressionStatement",
															"src": "392:27:11"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "287:139:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nativeSrc": "331:3:11",
														"nodeType": "YulTypedName",
														"src": "331:3:11",
														"type": ""
													},
													{
														"name": "dst",
														"nativeSrc": "336:3:11",
														"nodeType": "YulTypedName",
														"src": "336:3:11",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "341:6:11",
														"nodeType": "YulTypedName",
														"src": "341:6:11",
														"type": ""
													}
												],
												"src": "287:139:11"
											},
											{
												"body": {
													"nativeSrc": "480:54:11",
													"nodeType": "YulBlock",
													"src": "480:54:11",
													"statements": [
														{
															"nativeSrc": "490:38:11",
															"nodeType": "YulAssignment",
															"src": "490:38:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "508:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "508:5:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "515:2:11",
																				"nodeType": "YulLiteral",
																				"src": "515:2:11",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "504:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "504:3:11"
																		},
																		"nativeSrc": "504:14:11",
																		"nodeType": "YulFunctionCall",
																		"src": "504:14:11"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "524:2:11",
																				"nodeType": "YulLiteral",
																				"src": "524:2:11",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "520:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "520:3:11"
																		},
																		"nativeSrc": "520:7:11",
																		"nodeType": "YulFunctionCall",
																		"src": "520:7:11"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "500:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "500:3:11"
																},
																"nativeSrc": "500:28:11",
																"nodeType": "YulFunctionCall",
																"src": "500:28:11"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "490:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "490:6:11"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nativeSrc": "432:102:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "463:5:11",
														"nodeType": "YulTypedName",
														"src": "463:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "473:6:11",
														"nodeType": "YulTypedName",
														"src": "473:6:11",
														"type": ""
													}
												],
												"src": "432:102:11"
											},
											{
												"body": {
													"nativeSrc": "632:285:11",
													"nodeType": "YulBlock",
													"src": "632:285:11",
													"statements": [
														{
															"nativeSrc": "642:53:11",
															"nodeType": "YulVariableDeclaration",
															"src": "642:53:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "689:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "689:5:11"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nativeSrc": "656:32:11",
																	"nodeType": "YulIdentifier",
																	"src": "656:32:11"
																},
																"nativeSrc": "656:39:11",
																"nodeType": "YulFunctionCall",
																"src": "656:39:11"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "646:6:11",
																	"nodeType": "YulTypedName",
																	"src": "646:6:11",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "704:78:11",
															"nodeType": "YulAssignment",
															"src": "704:78:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "770:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "770:3:11"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "775:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "775:6:11"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "711:58:11",
																	"nodeType": "YulIdentifier",
																	"src": "711:58:11"
																},
																"nativeSrc": "711:71:11",
																"nodeType": "YulFunctionCall",
																"src": "711:71:11"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "704:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "704:3:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "830:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "830:5:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "837:4:11",
																				"nodeType": "YulLiteral",
																				"src": "837:4:11",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "826:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "826:3:11"
																		},
																		"nativeSrc": "826:16:11",
																		"nodeType": "YulFunctionCall",
																		"src": "826:16:11"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "844:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "844:3:11"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "849:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "849:6:11"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nativeSrc": "791:34:11",
																	"nodeType": "YulIdentifier",
																	"src": "791:34:11"
																},
																"nativeSrc": "791:65:11",
																"nodeType": "YulFunctionCall",
																"src": "791:65:11"
															},
															"nativeSrc": "791:65:11",
															"nodeType": "YulExpressionStatement",
															"src": "791:65:11"
														},
														{
															"nativeSrc": "865:46:11",
															"nodeType": "YulAssignment",
															"src": "865:46:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "876:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "876:3:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "903:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "903:6:11"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nativeSrc": "881:21:11",
																			"nodeType": "YulIdentifier",
																			"src": "881:21:11"
																		},
																		"nativeSrc": "881:29:11",
																		"nodeType": "YulFunctionCall",
																		"src": "881:29:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "872:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "872:3:11"
																},
																"nativeSrc": "872:39:11",
																"nodeType": "YulFunctionCall",
																"src": "872:39:11"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "865:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "865:3:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "540:377:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "613:5:11",
														"nodeType": "YulTypedName",
														"src": "613:5:11",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "620:3:11",
														"nodeType": "YulTypedName",
														"src": "620:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "628:3:11",
														"nodeType": "YulTypedName",
														"src": "628:3:11",
														"type": ""
													}
												],
												"src": "540:377:11"
											},
											{
												"body": {
													"nativeSrc": "1041:195:11",
													"nodeType": "YulBlock",
													"src": "1041:195:11",
													"statements": [
														{
															"nativeSrc": "1051:26:11",
															"nodeType": "YulAssignment",
															"src": "1051:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1063:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "1063:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1074:2:11",
																		"nodeType": "YulLiteral",
																		"src": "1074:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1059:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "1059:3:11"
																},
																"nativeSrc": "1059:18:11",
																"nodeType": "YulFunctionCall",
																"src": "1059:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1051:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "1051:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1098:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "1098:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1109:1:11",
																				"nodeType": "YulLiteral",
																				"src": "1109:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1094:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "1094:3:11"
																		},
																		"nativeSrc": "1094:17:11",
																		"nodeType": "YulFunctionCall",
																		"src": "1094:17:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "1117:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "1117:4:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1123:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "1123:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1113:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "1113:3:11"
																		},
																		"nativeSrc": "1113:20:11",
																		"nodeType": "YulFunctionCall",
																		"src": "1113:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1087:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1087:6:11"
																},
																"nativeSrc": "1087:47:11",
																"nodeType": "YulFunctionCall",
																"src": "1087:47:11"
															},
															"nativeSrc": "1087:47:11",
															"nodeType": "YulExpressionStatement",
															"src": "1087:47:11"
														},
														{
															"nativeSrc": "1143:86:11",
															"nodeType": "YulAssignment",
															"src": "1143:86:11",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "1215:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "1215:6:11"
																	},
																	{
																		"name": "tail",
																		"nativeSrc": "1224:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "1224:4:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "1151:63:11",
																	"nodeType": "YulIdentifier",
																	"src": "1151:63:11"
																},
																"nativeSrc": "1151:78:11",
																"nodeType": "YulFunctionCall",
																"src": "1151:78:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1143:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "1143:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "923:313:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1013:9:11",
														"nodeType": "YulTypedName",
														"src": "1013:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1025:6:11",
														"nodeType": "YulTypedName",
														"src": "1025:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1036:4:11",
														"nodeType": "YulTypedName",
														"src": "1036:4:11",
														"type": ""
													}
												],
												"src": "923:313:11"
											},
											{
												"body": {
													"nativeSrc": "1282:35:11",
													"nodeType": "YulBlock",
													"src": "1282:35:11",
													"statements": [
														{
															"nativeSrc": "1292:19:11",
															"nodeType": "YulAssignment",
															"src": "1292:19:11",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1308:2:11",
																		"nodeType": "YulLiteral",
																		"src": "1308:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1302:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "1302:5:11"
																},
																"nativeSrc": "1302:9:11",
																"nodeType": "YulFunctionCall",
																"src": "1302:9:11"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "1292:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1292:6:11"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "1242:75:11",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "1275:6:11",
														"nodeType": "YulTypedName",
														"src": "1275:6:11",
														"type": ""
													}
												],
												"src": "1242:75:11"
											},
											{
												"body": {
													"nativeSrc": "1412:28:11",
													"nodeType": "YulBlock",
													"src": "1412:28:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1429:1:11",
																		"nodeType": "YulLiteral",
																		"src": "1429:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1432:1:11",
																		"nodeType": "YulLiteral",
																		"src": "1432:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1422:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1422:6:11"
																},
																"nativeSrc": "1422:12:11",
																"nodeType": "YulFunctionCall",
																"src": "1422:12:11"
															},
															"nativeSrc": "1422:12:11",
															"nodeType": "YulExpressionStatement",
															"src": "1422:12:11"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "1323:117:11",
												"nodeType": "YulFunctionDefinition",
												"src": "1323:117:11"
											},
											{
												"body": {
													"nativeSrc": "1535:28:11",
													"nodeType": "YulBlock",
													"src": "1535:28:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1552:1:11",
																		"nodeType": "YulLiteral",
																		"src": "1552:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1555:1:11",
																		"nodeType": "YulLiteral",
																		"src": "1555:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1545:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1545:6:11"
																},
																"nativeSrc": "1545:12:11",
																"nodeType": "YulFunctionCall",
																"src": "1545:12:11"
															},
															"nativeSrc": "1545:12:11",
															"nodeType": "YulExpressionStatement",
															"src": "1545:12:11"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "1446:117:11",
												"nodeType": "YulFunctionDefinition",
												"src": "1446:117:11"
											},
											{
												"body": {
													"nativeSrc": "1614:81:11",
													"nodeType": "YulBlock",
													"src": "1614:81:11",
													"statements": [
														{
															"nativeSrc": "1624:65:11",
															"nodeType": "YulAssignment",
															"src": "1624:65:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1639:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "1639:5:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1646:42:11",
																		"nodeType": "YulLiteral",
																		"src": "1646:42:11",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "1635:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "1635:3:11"
																},
																"nativeSrc": "1635:54:11",
																"nodeType": "YulFunctionCall",
																"src": "1635:54:11"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "1624:7:11",
																	"nodeType": "YulIdentifier",
																	"src": "1624:7:11"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "1569:126:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1596:5:11",
														"nodeType": "YulTypedName",
														"src": "1596:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "1606:7:11",
														"nodeType": "YulTypedName",
														"src": "1606:7:11",
														"type": ""
													}
												],
												"src": "1569:126:11"
											},
											{
												"body": {
													"nativeSrc": "1746:51:11",
													"nodeType": "YulBlock",
													"src": "1746:51:11",
													"statements": [
														{
															"nativeSrc": "1756:35:11",
															"nodeType": "YulAssignment",
															"src": "1756:35:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1785:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "1785:5:11"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "1767:17:11",
																	"nodeType": "YulIdentifier",
																	"src": "1767:17:11"
																},
																"nativeSrc": "1767:24:11",
																"nodeType": "YulFunctionCall",
																"src": "1767:24:11"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "1756:7:11",
																	"nodeType": "YulIdentifier",
																	"src": "1756:7:11"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "1701:96:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1728:5:11",
														"nodeType": "YulTypedName",
														"src": "1728:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "1738:7:11",
														"nodeType": "YulTypedName",
														"src": "1738:7:11",
														"type": ""
													}
												],
												"src": "1701:96:11"
											},
											{
												"body": {
													"nativeSrc": "1846:79:11",
													"nodeType": "YulBlock",
													"src": "1846:79:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "1903:16:11",
																"nodeType": "YulBlock",
																"src": "1903:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1912:1:11",
																					"nodeType": "YulLiteral",
																					"src": "1912:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1915:1:11",
																					"nodeType": "YulLiteral",
																					"src": "1915:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1905:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "1905:6:11"
																			},
																			"nativeSrc": "1905:12:11",
																			"nodeType": "YulFunctionCall",
																			"src": "1905:12:11"
																		},
																		"nativeSrc": "1905:12:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "1905:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "1869:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "1869:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "1894:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "1894:5:11"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nativeSrc": "1876:17:11",
																					"nodeType": "YulIdentifier",
																					"src": "1876:17:11"
																				},
																				"nativeSrc": "1876:24:11",
																				"nodeType": "YulFunctionCall",
																				"src": "1876:24:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "1866:2:11",
																			"nodeType": "YulIdentifier",
																			"src": "1866:2:11"
																		},
																		"nativeSrc": "1866:35:11",
																		"nodeType": "YulFunctionCall",
																		"src": "1866:35:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "1859:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1859:6:11"
																},
																"nativeSrc": "1859:43:11",
																"nodeType": "YulFunctionCall",
																"src": "1859:43:11"
															},
															"nativeSrc": "1856:63:11",
															"nodeType": "YulIf",
															"src": "1856:63:11"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nativeSrc": "1803:122:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1839:5:11",
														"nodeType": "YulTypedName",
														"src": "1839:5:11",
														"type": ""
													}
												],
												"src": "1803:122:11"
											},
											{
												"body": {
													"nativeSrc": "1983:87:11",
													"nodeType": "YulBlock",
													"src": "1983:87:11",
													"statements": [
														{
															"nativeSrc": "1993:29:11",
															"nodeType": "YulAssignment",
															"src": "1993:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "2015:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "2015:6:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2002:12:11",
																	"nodeType": "YulIdentifier",
																	"src": "2002:12:11"
																},
																"nativeSrc": "2002:20:11",
																"nodeType": "YulFunctionCall",
																"src": "2002:20:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "1993:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "1993:5:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2058:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "2058:5:11"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nativeSrc": "2031:26:11",
																	"nodeType": "YulIdentifier",
																	"src": "2031:26:11"
																},
																"nativeSrc": "2031:33:11",
																"nodeType": "YulFunctionCall",
																"src": "2031:33:11"
															},
															"nativeSrc": "2031:33:11",
															"nodeType": "YulExpressionStatement",
															"src": "2031:33:11"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nativeSrc": "1931:139:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "1961:6:11",
														"nodeType": "YulTypedName",
														"src": "1961:6:11",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "1969:3:11",
														"nodeType": "YulTypedName",
														"src": "1969:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "1977:5:11",
														"nodeType": "YulTypedName",
														"src": "1977:5:11",
														"type": ""
													}
												],
												"src": "1931:139:11"
											},
											{
												"body": {
													"nativeSrc": "2121:32:11",
													"nodeType": "YulBlock",
													"src": "2121:32:11",
													"statements": [
														{
															"nativeSrc": "2131:16:11",
															"nodeType": "YulAssignment",
															"src": "2131:16:11",
															"value": {
																"name": "value",
																"nativeSrc": "2142:5:11",
																"nodeType": "YulIdentifier",
																"src": "2142:5:11"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "2131:7:11",
																	"nodeType": "YulIdentifier",
																	"src": "2131:7:11"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nativeSrc": "2076:77:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2103:5:11",
														"nodeType": "YulTypedName",
														"src": "2103:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "2113:7:11",
														"nodeType": "YulTypedName",
														"src": "2113:7:11",
														"type": ""
													}
												],
												"src": "2076:77:11"
											},
											{
												"body": {
													"nativeSrc": "2202:79:11",
													"nodeType": "YulBlock",
													"src": "2202:79:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "2259:16:11",
																"nodeType": "YulBlock",
																"src": "2259:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2268:1:11",
																					"nodeType": "YulLiteral",
																					"src": "2268:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2271:1:11",
																					"nodeType": "YulLiteral",
																					"src": "2271:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2261:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "2261:6:11"
																			},
																			"nativeSrc": "2261:12:11",
																			"nodeType": "YulFunctionCall",
																			"src": "2261:12:11"
																		},
																		"nativeSrc": "2261:12:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "2261:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2225:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "2225:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "2250:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "2250:5:11"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "2232:17:11",
																					"nodeType": "YulIdentifier",
																					"src": "2232:17:11"
																				},
																				"nativeSrc": "2232:24:11",
																				"nodeType": "YulFunctionCall",
																				"src": "2232:24:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "2222:2:11",
																			"nodeType": "YulIdentifier",
																			"src": "2222:2:11"
																		},
																		"nativeSrc": "2222:35:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2222:35:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2215:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "2215:6:11"
																},
																"nativeSrc": "2215:43:11",
																"nodeType": "YulFunctionCall",
																"src": "2215:43:11"
															},
															"nativeSrc": "2212:63:11",
															"nodeType": "YulIf",
															"src": "2212:63:11"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nativeSrc": "2159:122:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2195:5:11",
														"nodeType": "YulTypedName",
														"src": "2195:5:11",
														"type": ""
													}
												],
												"src": "2159:122:11"
											},
											{
												"body": {
													"nativeSrc": "2339:87:11",
													"nodeType": "YulBlock",
													"src": "2339:87:11",
													"statements": [
														{
															"nativeSrc": "2349:29:11",
															"nodeType": "YulAssignment",
															"src": "2349:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "2371:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "2371:6:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2358:12:11",
																	"nodeType": "YulIdentifier",
																	"src": "2358:12:11"
																},
																"nativeSrc": "2358:20:11",
																"nodeType": "YulFunctionCall",
																"src": "2358:20:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "2349:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "2349:5:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2414:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "2414:5:11"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nativeSrc": "2387:26:11",
																	"nodeType": "YulIdentifier",
																	"src": "2387:26:11"
																},
																"nativeSrc": "2387:33:11",
																"nodeType": "YulFunctionCall",
																"src": "2387:33:11"
															},
															"nativeSrc": "2387:33:11",
															"nodeType": "YulExpressionStatement",
															"src": "2387:33:11"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nativeSrc": "2287:139:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "2317:6:11",
														"nodeType": "YulTypedName",
														"src": "2317:6:11",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "2325:3:11",
														"nodeType": "YulTypedName",
														"src": "2325:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "2333:5:11",
														"nodeType": "YulTypedName",
														"src": "2333:5:11",
														"type": ""
													}
												],
												"src": "2287:139:11"
											},
											{
												"body": {
													"nativeSrc": "2515:391:11",
													"nodeType": "YulBlock",
													"src": "2515:391:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "2561:83:11",
																"nodeType": "YulBlock",
																"src": "2561:83:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "2563:77:11",
																				"nodeType": "YulIdentifier",
																				"src": "2563:77:11"
																			},
																			"nativeSrc": "2563:79:11",
																			"nodeType": "YulFunctionCall",
																			"src": "2563:79:11"
																		},
																		"nativeSrc": "2563:79:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "2563:79:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2536:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "2536:7:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2545:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "2545:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2532:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "2532:3:11"
																		},
																		"nativeSrc": "2532:23:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2532:23:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2557:2:11",
																		"nodeType": "YulLiteral",
																		"src": "2557:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2528:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "2528:3:11"
																},
																"nativeSrc": "2528:32:11",
																"nodeType": "YulFunctionCall",
																"src": "2528:32:11"
															},
															"nativeSrc": "2525:119:11",
															"nodeType": "YulIf",
															"src": "2525:119:11"
														},
														{
															"nativeSrc": "2654:117:11",
															"nodeType": "YulBlock",
															"src": "2654:117:11",
															"statements": [
																{
																	"nativeSrc": "2669:15:11",
																	"nodeType": "YulVariableDeclaration",
																	"src": "2669:15:11",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "2683:1:11",
																		"nodeType": "YulLiteral",
																		"src": "2683:1:11",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "2673:6:11",
																			"nodeType": "YulTypedName",
																			"src": "2673:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "2698:63:11",
																	"nodeType": "YulAssignment",
																	"src": "2698:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "2733:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "2733:9:11"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "2744:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "2744:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2729:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "2729:3:11"
																				},
																				"nativeSrc": "2729:22:11",
																				"nodeType": "YulFunctionCall",
																				"src": "2729:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2753:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "2753:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "2708:20:11",
																			"nodeType": "YulIdentifier",
																			"src": "2708:20:11"
																		},
																		"nativeSrc": "2708:53:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2708:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "2698:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "2698:6:11"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "2781:118:11",
															"nodeType": "YulBlock",
															"src": "2781:118:11",
															"statements": [
																{
																	"nativeSrc": "2796:16:11",
																	"nodeType": "YulVariableDeclaration",
																	"src": "2796:16:11",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "2810:2:11",
																		"nodeType": "YulLiteral",
																		"src": "2810:2:11",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "2800:6:11",
																			"nodeType": "YulTypedName",
																			"src": "2800:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "2826:63:11",
																	"nodeType": "YulAssignment",
																	"src": "2826:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "2861:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "2861:9:11"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "2872:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "2872:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2857:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "2857:3:11"
																				},
																				"nativeSrc": "2857:22:11",
																				"nodeType": "YulFunctionCall",
																				"src": "2857:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2881:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "2881:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "2836:20:11",
																			"nodeType": "YulIdentifier",
																			"src": "2836:20:11"
																		},
																		"nativeSrc": "2836:53:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2836:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "2826:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "2826:6:11"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nativeSrc": "2432:474:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2477:9:11",
														"nodeType": "YulTypedName",
														"src": "2477:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2488:7:11",
														"nodeType": "YulTypedName",
														"src": "2488:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2500:6:11",
														"nodeType": "YulTypedName",
														"src": "2500:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "2508:6:11",
														"nodeType": "YulTypedName",
														"src": "2508:6:11",
														"type": ""
													}
												],
												"src": "2432:474:11"
											},
											{
												"body": {
													"nativeSrc": "2954:48:11",
													"nodeType": "YulBlock",
													"src": "2954:48:11",
													"statements": [
														{
															"nativeSrc": "2964:32:11",
															"nodeType": "YulAssignment",
															"src": "2964:32:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2989:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "2989:5:11"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "2982:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "2982:6:11"
																		},
																		"nativeSrc": "2982:13:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2982:13:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2975:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "2975:6:11"
																},
																"nativeSrc": "2975:21:11",
																"nodeType": "YulFunctionCall",
																"src": "2975:21:11"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "2964:7:11",
																	"nodeType": "YulIdentifier",
																	"src": "2964:7:11"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nativeSrc": "2912:90:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2936:5:11",
														"nodeType": "YulTypedName",
														"src": "2936:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "2946:7:11",
														"nodeType": "YulTypedName",
														"src": "2946:7:11",
														"type": ""
													}
												],
												"src": "2912:90:11"
											},
											{
												"body": {
													"nativeSrc": "3067:50:11",
													"nodeType": "YulBlock",
													"src": "3067:50:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "3084:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "3084:3:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3104:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "3104:5:11"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nativeSrc": "3089:14:11",
																			"nodeType": "YulIdentifier",
																			"src": "3089:14:11"
																		},
																		"nativeSrc": "3089:21:11",
																		"nodeType": "YulFunctionCall",
																		"src": "3089:21:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3077:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "3077:6:11"
																},
																"nativeSrc": "3077:34:11",
																"nodeType": "YulFunctionCall",
																"src": "3077:34:11"
															},
															"nativeSrc": "3077:34:11",
															"nodeType": "YulExpressionStatement",
															"src": "3077:34:11"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nativeSrc": "3008:109:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3055:5:11",
														"nodeType": "YulTypedName",
														"src": "3055:5:11",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "3062:3:11",
														"nodeType": "YulTypedName",
														"src": "3062:3:11",
														"type": ""
													}
												],
												"src": "3008:109:11"
											},
											{
												"body": {
													"nativeSrc": "3215:118:11",
													"nodeType": "YulBlock",
													"src": "3215:118:11",
													"statements": [
														{
															"nativeSrc": "3225:26:11",
															"nodeType": "YulAssignment",
															"src": "3225:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3237:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "3237:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3248:2:11",
																		"nodeType": "YulLiteral",
																		"src": "3248:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3233:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "3233:3:11"
																},
																"nativeSrc": "3233:18:11",
																"nodeType": "YulFunctionCall",
																"src": "3233:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3225:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "3225:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "3299:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "3299:6:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3312:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "3312:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3323:1:11",
																				"nodeType": "YulLiteral",
																				"src": "3323:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3308:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "3308:3:11"
																		},
																		"nativeSrc": "3308:17:11",
																		"nodeType": "YulFunctionCall",
																		"src": "3308:17:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nativeSrc": "3261:37:11",
																	"nodeType": "YulIdentifier",
																	"src": "3261:37:11"
																},
																"nativeSrc": "3261:65:11",
																"nodeType": "YulFunctionCall",
																"src": "3261:65:11"
															},
															"nativeSrc": "3261:65:11",
															"nodeType": "YulExpressionStatement",
															"src": "3261:65:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "3123:210:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3187:9:11",
														"nodeType": "YulTypedName",
														"src": "3187:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3199:6:11",
														"nodeType": "YulTypedName",
														"src": "3199:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3210:4:11",
														"nodeType": "YulTypedName",
														"src": "3210:4:11",
														"type": ""
													}
												],
												"src": "3123:210:11"
											},
											{
												"body": {
													"nativeSrc": "3404:53:11",
													"nodeType": "YulBlock",
													"src": "3404:53:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "3421:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "3421:3:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3444:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "3444:5:11"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nativeSrc": "3426:17:11",
																			"nodeType": "YulIdentifier",
																			"src": "3426:17:11"
																		},
																		"nativeSrc": "3426:24:11",
																		"nodeType": "YulFunctionCall",
																		"src": "3426:24:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3414:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "3414:6:11"
																},
																"nativeSrc": "3414:37:11",
																"nodeType": "YulFunctionCall",
																"src": "3414:37:11"
															},
															"nativeSrc": "3414:37:11",
															"nodeType": "YulExpressionStatement",
															"src": "3414:37:11"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "3339:118:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3392:5:11",
														"nodeType": "YulTypedName",
														"src": "3392:5:11",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "3399:3:11",
														"nodeType": "YulTypedName",
														"src": "3399:3:11",
														"type": ""
													}
												],
												"src": "3339:118:11"
											},
											{
												"body": {
													"nativeSrc": "3561:124:11",
													"nodeType": "YulBlock",
													"src": "3561:124:11",
													"statements": [
														{
															"nativeSrc": "3571:26:11",
															"nodeType": "YulAssignment",
															"src": "3571:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3583:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "3583:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3594:2:11",
																		"nodeType": "YulLiteral",
																		"src": "3594:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3579:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "3579:3:11"
																},
																"nativeSrc": "3579:18:11",
																"nodeType": "YulFunctionCall",
																"src": "3579:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3571:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "3571:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "3651:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "3651:6:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3664:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "3664:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3675:1:11",
																				"nodeType": "YulLiteral",
																				"src": "3675:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3660:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "3660:3:11"
																		},
																		"nativeSrc": "3660:17:11",
																		"nodeType": "YulFunctionCall",
																		"src": "3660:17:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "3607:43:11",
																	"nodeType": "YulIdentifier",
																	"src": "3607:43:11"
																},
																"nativeSrc": "3607:71:11",
																"nodeType": "YulFunctionCall",
																"src": "3607:71:11"
															},
															"nativeSrc": "3607:71:11",
															"nodeType": "YulExpressionStatement",
															"src": "3607:71:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "3463:222:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3533:9:11",
														"nodeType": "YulTypedName",
														"src": "3533:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3545:6:11",
														"nodeType": "YulTypedName",
														"src": "3545:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3556:4:11",
														"nodeType": "YulTypedName",
														"src": "3556:4:11",
														"type": ""
													}
												],
												"src": "3463:222:11"
											},
											{
												"body": {
													"nativeSrc": "3791:519:11",
													"nodeType": "YulBlock",
													"src": "3791:519:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "3837:83:11",
																"nodeType": "YulBlock",
																"src": "3837:83:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "3839:77:11",
																				"nodeType": "YulIdentifier",
																				"src": "3839:77:11"
																			},
																			"nativeSrc": "3839:79:11",
																			"nodeType": "YulFunctionCall",
																			"src": "3839:79:11"
																		},
																		"nativeSrc": "3839:79:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "3839:79:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3812:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "3812:7:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3821:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "3821:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3808:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "3808:3:11"
																		},
																		"nativeSrc": "3808:23:11",
																		"nodeType": "YulFunctionCall",
																		"src": "3808:23:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3833:2:11",
																		"nodeType": "YulLiteral",
																		"src": "3833:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "3804:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "3804:3:11"
																},
																"nativeSrc": "3804:32:11",
																"nodeType": "YulFunctionCall",
																"src": "3804:32:11"
															},
															"nativeSrc": "3801:119:11",
															"nodeType": "YulIf",
															"src": "3801:119:11"
														},
														{
															"nativeSrc": "3930:117:11",
															"nodeType": "YulBlock",
															"src": "3930:117:11",
															"statements": [
																{
																	"nativeSrc": "3945:15:11",
																	"nodeType": "YulVariableDeclaration",
																	"src": "3945:15:11",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3959:1:11",
																		"nodeType": "YulLiteral",
																		"src": "3959:1:11",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "3949:6:11",
																			"nodeType": "YulTypedName",
																			"src": "3949:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "3974:63:11",
																	"nodeType": "YulAssignment",
																	"src": "3974:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4009:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "4009:9:11"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4020:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "4020:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4005:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "4005:3:11"
																				},
																				"nativeSrc": "4005:22:11",
																				"nodeType": "YulFunctionCall",
																				"src": "4005:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4029:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "4029:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "3984:20:11",
																			"nodeType": "YulIdentifier",
																			"src": "3984:20:11"
																		},
																		"nativeSrc": "3984:53:11",
																		"nodeType": "YulFunctionCall",
																		"src": "3984:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "3974:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "3974:6:11"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "4057:118:11",
															"nodeType": "YulBlock",
															"src": "4057:118:11",
															"statements": [
																{
																	"nativeSrc": "4072:16:11",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4072:16:11",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4086:2:11",
																		"nodeType": "YulLiteral",
																		"src": "4086:2:11",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4076:6:11",
																			"nodeType": "YulTypedName",
																			"src": "4076:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4102:63:11",
																	"nodeType": "YulAssignment",
																	"src": "4102:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4137:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "4137:9:11"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4148:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "4148:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4133:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "4133:3:11"
																				},
																				"nativeSrc": "4133:22:11",
																				"nodeType": "YulFunctionCall",
																				"src": "4133:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4157:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "4157:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "4112:20:11",
																			"nodeType": "YulIdentifier",
																			"src": "4112:20:11"
																		},
																		"nativeSrc": "4112:53:11",
																		"nodeType": "YulFunctionCall",
																		"src": "4112:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "4102:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "4102:6:11"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "4185:118:11",
															"nodeType": "YulBlock",
															"src": "4185:118:11",
															"statements": [
																{
																	"nativeSrc": "4200:16:11",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4200:16:11",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4214:2:11",
																		"nodeType": "YulLiteral",
																		"src": "4214:2:11",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4204:6:11",
																			"nodeType": "YulTypedName",
																			"src": "4204:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4230:63:11",
																	"nodeType": "YulAssignment",
																	"src": "4230:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4265:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "4265:9:11"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4276:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "4276:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4261:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "4261:3:11"
																				},
																				"nativeSrc": "4261:22:11",
																				"nodeType": "YulFunctionCall",
																				"src": "4261:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4285:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "4285:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "4240:20:11",
																			"nodeType": "YulIdentifier",
																			"src": "4240:20:11"
																		},
																		"nativeSrc": "4240:53:11",
																		"nodeType": "YulFunctionCall",
																		"src": "4240:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nativeSrc": "4230:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "4230:6:11"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nativeSrc": "3691:619:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3745:9:11",
														"nodeType": "YulTypedName",
														"src": "3745:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "3756:7:11",
														"nodeType": "YulTypedName",
														"src": "3756:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "3768:6:11",
														"nodeType": "YulTypedName",
														"src": "3768:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3776:6:11",
														"nodeType": "YulTypedName",
														"src": "3776:6:11",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "3784:6:11",
														"nodeType": "YulTypedName",
														"src": "3784:6:11",
														"type": ""
													}
												],
												"src": "3691:619:11"
											},
											{
												"body": {
													"nativeSrc": "4359:43:11",
													"nodeType": "YulBlock",
													"src": "4359:43:11",
													"statements": [
														{
															"nativeSrc": "4369:27:11",
															"nodeType": "YulAssignment",
															"src": "4369:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "4384:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "4384:5:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4391:4:11",
																		"nodeType": "YulLiteral",
																		"src": "4391:4:11",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4380:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "4380:3:11"
																},
																"nativeSrc": "4380:16:11",
																"nodeType": "YulFunctionCall",
																"src": "4380:16:11"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "4369:7:11",
																	"nodeType": "YulIdentifier",
																	"src": "4369:7:11"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nativeSrc": "4316:86:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4341:5:11",
														"nodeType": "YulTypedName",
														"src": "4341:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "4351:7:11",
														"nodeType": "YulTypedName",
														"src": "4351:7:11",
														"type": ""
													}
												],
												"src": "4316:86:11"
											},
											{
												"body": {
													"nativeSrc": "4469:51:11",
													"nodeType": "YulBlock",
													"src": "4469:51:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "4486:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "4486:3:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "4507:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "4507:5:11"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint8",
																			"nativeSrc": "4491:15:11",
																			"nodeType": "YulIdentifier",
																			"src": "4491:15:11"
																		},
																		"nativeSrc": "4491:22:11",
																		"nodeType": "YulFunctionCall",
																		"src": "4491:22:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4479:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "4479:6:11"
																},
																"nativeSrc": "4479:35:11",
																"nodeType": "YulFunctionCall",
																"src": "4479:35:11"
															},
															"nativeSrc": "4479:35:11",
															"nodeType": "YulExpressionStatement",
															"src": "4479:35:11"
														}
													]
												},
												"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
												"nativeSrc": "4408:112:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4457:5:11",
														"nodeType": "YulTypedName",
														"src": "4457:5:11",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "4464:3:11",
														"nodeType": "YulTypedName",
														"src": "4464:3:11",
														"type": ""
													}
												],
												"src": "4408:112:11"
											},
											{
												"body": {
													"nativeSrc": "4620:120:11",
													"nodeType": "YulBlock",
													"src": "4620:120:11",
													"statements": [
														{
															"nativeSrc": "4630:26:11",
															"nodeType": "YulAssignment",
															"src": "4630:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4642:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "4642:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4653:2:11",
																		"nodeType": "YulLiteral",
																		"src": "4653:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4638:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "4638:3:11"
																},
																"nativeSrc": "4638:18:11",
																"nodeType": "YulFunctionCall",
																"src": "4638:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "4630:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "4630:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "4706:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "4706:6:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4719:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "4719:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4730:1:11",
																				"nodeType": "YulLiteral",
																				"src": "4730:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4715:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "4715:3:11"
																		},
																		"nativeSrc": "4715:17:11",
																		"nodeType": "YulFunctionCall",
																		"src": "4715:17:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
																	"nativeSrc": "4666:39:11",
																	"nodeType": "YulIdentifier",
																	"src": "4666:39:11"
																},
																"nativeSrc": "4666:67:11",
																"nodeType": "YulFunctionCall",
																"src": "4666:67:11"
															},
															"nativeSrc": "4666:67:11",
															"nodeType": "YulExpressionStatement",
															"src": "4666:67:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nativeSrc": "4526:214:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4592:9:11",
														"nodeType": "YulTypedName",
														"src": "4592:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "4604:6:11",
														"nodeType": "YulTypedName",
														"src": "4604:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "4615:4:11",
														"nodeType": "YulTypedName",
														"src": "4615:4:11",
														"type": ""
													}
												],
												"src": "4526:214:11"
											},
											{
												"body": {
													"nativeSrc": "4812:263:11",
													"nodeType": "YulBlock",
													"src": "4812:263:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "4858:83:11",
																"nodeType": "YulBlock",
																"src": "4858:83:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "4860:77:11",
																				"nodeType": "YulIdentifier",
																				"src": "4860:77:11"
																			},
																			"nativeSrc": "4860:79:11",
																			"nodeType": "YulFunctionCall",
																			"src": "4860:79:11"
																		},
																		"nativeSrc": "4860:79:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "4860:79:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4833:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "4833:7:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "4842:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "4842:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4829:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "4829:3:11"
																		},
																		"nativeSrc": "4829:23:11",
																		"nodeType": "YulFunctionCall",
																		"src": "4829:23:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4854:2:11",
																		"nodeType": "YulLiteral",
																		"src": "4854:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "4825:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "4825:3:11"
																},
																"nativeSrc": "4825:32:11",
																"nodeType": "YulFunctionCall",
																"src": "4825:32:11"
															},
															"nativeSrc": "4822:119:11",
															"nodeType": "YulIf",
															"src": "4822:119:11"
														},
														{
															"nativeSrc": "4951:117:11",
															"nodeType": "YulBlock",
															"src": "4951:117:11",
															"statements": [
																{
																	"nativeSrc": "4966:15:11",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4966:15:11",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4980:1:11",
																		"nodeType": "YulLiteral",
																		"src": "4980:1:11",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4970:6:11",
																			"nodeType": "YulTypedName",
																			"src": "4970:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4995:63:11",
																	"nodeType": "YulAssignment",
																	"src": "4995:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5030:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "5030:9:11"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "5041:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "5041:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5026:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "5026:3:11"
																				},
																				"nativeSrc": "5026:22:11",
																				"nodeType": "YulFunctionCall",
																				"src": "5026:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5050:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "5050:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "5005:20:11",
																			"nodeType": "YulIdentifier",
																			"src": "5005:20:11"
																		},
																		"nativeSrc": "5005:53:11",
																		"nodeType": "YulFunctionCall",
																		"src": "5005:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "4995:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "4995:6:11"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "4746:329:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4782:9:11",
														"nodeType": "YulTypedName",
														"src": "4782:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "4793:7:11",
														"nodeType": "YulTypedName",
														"src": "4793:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "4805:6:11",
														"nodeType": "YulTypedName",
														"src": "4805:6:11",
														"type": ""
													}
												],
												"src": "4746:329:11"
											},
											{
												"body": {
													"nativeSrc": "5164:391:11",
													"nodeType": "YulBlock",
													"src": "5164:391:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "5210:83:11",
																"nodeType": "YulBlock",
																"src": "5210:83:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "5212:77:11",
																				"nodeType": "YulIdentifier",
																				"src": "5212:77:11"
																			},
																			"nativeSrc": "5212:79:11",
																			"nodeType": "YulFunctionCall",
																			"src": "5212:79:11"
																		},
																		"nativeSrc": "5212:79:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "5212:79:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5185:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "5185:7:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "5194:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "5194:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5181:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "5181:3:11"
																		},
																		"nativeSrc": "5181:23:11",
																		"nodeType": "YulFunctionCall",
																		"src": "5181:23:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5206:2:11",
																		"nodeType": "YulLiteral",
																		"src": "5206:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "5177:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "5177:3:11"
																},
																"nativeSrc": "5177:32:11",
																"nodeType": "YulFunctionCall",
																"src": "5177:32:11"
															},
															"nativeSrc": "5174:119:11",
															"nodeType": "YulIf",
															"src": "5174:119:11"
														},
														{
															"nativeSrc": "5303:117:11",
															"nodeType": "YulBlock",
															"src": "5303:117:11",
															"statements": [
																{
																	"nativeSrc": "5318:15:11",
																	"nodeType": "YulVariableDeclaration",
																	"src": "5318:15:11",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5332:1:11",
																		"nodeType": "YulLiteral",
																		"src": "5332:1:11",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "5322:6:11",
																			"nodeType": "YulTypedName",
																			"src": "5322:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "5347:63:11",
																	"nodeType": "YulAssignment",
																	"src": "5347:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5382:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "5382:9:11"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "5393:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "5393:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5378:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "5378:3:11"
																				},
																				"nativeSrc": "5378:22:11",
																				"nodeType": "YulFunctionCall",
																				"src": "5378:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5402:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "5402:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "5357:20:11",
																			"nodeType": "YulIdentifier",
																			"src": "5357:20:11"
																		},
																		"nativeSrc": "5357:53:11",
																		"nodeType": "YulFunctionCall",
																		"src": "5357:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "5347:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "5347:6:11"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "5430:118:11",
															"nodeType": "YulBlock",
															"src": "5430:118:11",
															"statements": [
																{
																	"nativeSrc": "5445:16:11",
																	"nodeType": "YulVariableDeclaration",
																	"src": "5445:16:11",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5459:2:11",
																		"nodeType": "YulLiteral",
																		"src": "5459:2:11",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "5449:6:11",
																			"nodeType": "YulTypedName",
																			"src": "5449:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "5475:63:11",
																	"nodeType": "YulAssignment",
																	"src": "5475:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5510:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "5510:9:11"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "5521:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "5521:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5506:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "5506:3:11"
																				},
																				"nativeSrc": "5506:22:11",
																				"nodeType": "YulFunctionCall",
																				"src": "5506:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5530:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "5530:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "5485:20:11",
																			"nodeType": "YulIdentifier",
																			"src": "5485:20:11"
																		},
																		"nativeSrc": "5485:53:11",
																		"nodeType": "YulFunctionCall",
																		"src": "5485:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "5475:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "5475:6:11"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nativeSrc": "5081:474:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5126:9:11",
														"nodeType": "YulTypedName",
														"src": "5126:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "5137:7:11",
														"nodeType": "YulTypedName",
														"src": "5137:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "5149:6:11",
														"nodeType": "YulTypedName",
														"src": "5149:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "5157:6:11",
														"nodeType": "YulTypedName",
														"src": "5157:6:11",
														"type": ""
													}
												],
												"src": "5081:474:11"
											},
											{
												"body": {
													"nativeSrc": "5589:152:11",
													"nodeType": "YulBlock",
													"src": "5589:152:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5606:1:11",
																		"nodeType": "YulLiteral",
																		"src": "5606:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5609:77:11",
																		"nodeType": "YulLiteral",
																		"src": "5609:77:11",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5599:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "5599:6:11"
																},
																"nativeSrc": "5599:88:11",
																"nodeType": "YulFunctionCall",
																"src": "5599:88:11"
															},
															"nativeSrc": "5599:88:11",
															"nodeType": "YulExpressionStatement",
															"src": "5599:88:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5703:1:11",
																		"nodeType": "YulLiteral",
																		"src": "5703:1:11",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5706:4:11",
																		"nodeType": "YulLiteral",
																		"src": "5706:4:11",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5696:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "5696:6:11"
																},
																"nativeSrc": "5696:15:11",
																"nodeType": "YulFunctionCall",
																"src": "5696:15:11"
															},
															"nativeSrc": "5696:15:11",
															"nodeType": "YulExpressionStatement",
															"src": "5696:15:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5727:1:11",
																		"nodeType": "YulLiteral",
																		"src": "5727:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5730:4:11",
																		"nodeType": "YulLiteral",
																		"src": "5730:4:11",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "5720:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "5720:6:11"
																},
																"nativeSrc": "5720:15:11",
																"nodeType": "YulFunctionCall",
																"src": "5720:15:11"
															},
															"nativeSrc": "5720:15:11",
															"nodeType": "YulExpressionStatement",
															"src": "5720:15:11"
														}
													]
												},
												"name": "panic_error_0x22",
												"nativeSrc": "5561:180:11",
												"nodeType": "YulFunctionDefinition",
												"src": "5561:180:11"
											},
											{
												"body": {
													"nativeSrc": "5798:269:11",
													"nodeType": "YulBlock",
													"src": "5798:269:11",
													"statements": [
														{
															"nativeSrc": "5808:22:11",
															"nodeType": "YulAssignment",
															"src": "5808:22:11",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "5822:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "5822:4:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5828:1:11",
																		"nodeType": "YulLiteral",
																		"src": "5828:1:11",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "5818:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "5818:3:11"
																},
																"nativeSrc": "5818:12:11",
																"nodeType": "YulFunctionCall",
																"src": "5818:12:11"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "5808:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "5808:6:11"
																}
															]
														},
														{
															"nativeSrc": "5839:38:11",
															"nodeType": "YulVariableDeclaration",
															"src": "5839:38:11",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "5869:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "5869:4:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5875:1:11",
																		"nodeType": "YulLiteral",
																		"src": "5875:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "5865:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "5865:3:11"
																},
																"nativeSrc": "5865:12:11",
																"nodeType": "YulFunctionCall",
																"src": "5865:12:11"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "5843:18:11",
																	"nodeType": "YulTypedName",
																	"src": "5843:18:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5916:51:11",
																"nodeType": "YulBlock",
																"src": "5916:51:11",
																"statements": [
																	{
																		"nativeSrc": "5930:27:11",
																		"nodeType": "YulAssignment",
																		"src": "5930:27:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "5944:6:11",
																					"nodeType": "YulIdentifier",
																					"src": "5944:6:11"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5952:4:11",
																					"nodeType": "YulLiteral",
																					"src": "5952:4:11",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "5940:3:11",
																				"nodeType": "YulIdentifier",
																				"src": "5940:3:11"
																			},
																			"nativeSrc": "5940:17:11",
																			"nodeType": "YulFunctionCall",
																			"src": "5940:17:11"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "5930:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "5930:6:11"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "5896:18:11",
																		"nodeType": "YulIdentifier",
																		"src": "5896:18:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "5889:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "5889:6:11"
																},
																"nativeSrc": "5889:26:11",
																"nodeType": "YulFunctionCall",
																"src": "5889:26:11"
															},
															"nativeSrc": "5886:81:11",
															"nodeType": "YulIf",
															"src": "5886:81:11"
														},
														{
															"body": {
																"nativeSrc": "6019:42:11",
																"nodeType": "YulBlock",
																"src": "6019:42:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nativeSrc": "6033:16:11",
																				"nodeType": "YulIdentifier",
																				"src": "6033:16:11"
																			},
																			"nativeSrc": "6033:18:11",
																			"nodeType": "YulFunctionCall",
																			"src": "6033:18:11"
																		},
																		"nativeSrc": "6033:18:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "6033:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "5983:18:11",
																		"nodeType": "YulIdentifier",
																		"src": "5983:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "6006:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "6006:6:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6014:2:11",
																				"nodeType": "YulLiteral",
																				"src": "6014:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "6003:2:11",
																			"nodeType": "YulIdentifier",
																			"src": "6003:2:11"
																		},
																		"nativeSrc": "6003:14:11",
																		"nodeType": "YulFunctionCall",
																		"src": "6003:14:11"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "5980:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "5980:2:11"
																},
																"nativeSrc": "5980:38:11",
																"nodeType": "YulFunctionCall",
																"src": "5980:38:11"
															},
															"nativeSrc": "5977:84:11",
															"nodeType": "YulIf",
															"src": "5977:84:11"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "5747:320:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "5782:4:11",
														"nodeType": "YulTypedName",
														"src": "5782:4:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "5791:6:11",
														"nodeType": "YulTypedName",
														"src": "5791:6:11",
														"type": ""
													}
												],
												"src": "5747:320:11"
											},
											{
												"body": {
													"nativeSrc": "6101:152:11",
													"nodeType": "YulBlock",
													"src": "6101:152:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "6118:1:11",
																		"nodeType": "YulLiteral",
																		"src": "6118:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6121:77:11",
																		"nodeType": "YulLiteral",
																		"src": "6121:77:11",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6111:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "6111:6:11"
																},
																"nativeSrc": "6111:88:11",
																"nodeType": "YulFunctionCall",
																"src": "6111:88:11"
															},
															"nativeSrc": "6111:88:11",
															"nodeType": "YulExpressionStatement",
															"src": "6111:88:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "6215:1:11",
																		"nodeType": "YulLiteral",
																		"src": "6215:1:11",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6218:4:11",
																		"nodeType": "YulLiteral",
																		"src": "6218:4:11",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6208:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "6208:6:11"
																},
																"nativeSrc": "6208:15:11",
																"nodeType": "YulFunctionCall",
																"src": "6208:15:11"
															},
															"nativeSrc": "6208:15:11",
															"nodeType": "YulExpressionStatement",
															"src": "6208:15:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "6239:1:11",
																		"nodeType": "YulLiteral",
																		"src": "6239:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6242:4:11",
																		"nodeType": "YulLiteral",
																		"src": "6242:4:11",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "6232:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "6232:6:11"
																},
																"nativeSrc": "6232:15:11",
																"nodeType": "YulFunctionCall",
																"src": "6232:15:11"
															},
															"nativeSrc": "6232:15:11",
															"nodeType": "YulExpressionStatement",
															"src": "6232:15:11"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "6073:180:11",
												"nodeType": "YulFunctionDefinition",
												"src": "6073:180:11"
											},
											{
												"body": {
													"nativeSrc": "6303:147:11",
													"nodeType": "YulBlock",
													"src": "6303:147:11",
													"statements": [
														{
															"nativeSrc": "6313:25:11",
															"nodeType": "YulAssignment",
															"src": "6313:25:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "6336:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "6336:1:11"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "6318:17:11",
																	"nodeType": "YulIdentifier",
																	"src": "6318:17:11"
																},
																"nativeSrc": "6318:20:11",
																"nodeType": "YulFunctionCall",
																"src": "6318:20:11"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "6313:1:11",
																	"nodeType": "YulIdentifier",
																	"src": "6313:1:11"
																}
															]
														},
														{
															"nativeSrc": "6347:25:11",
															"nodeType": "YulAssignment",
															"src": "6347:25:11",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "6370:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "6370:1:11"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "6352:17:11",
																	"nodeType": "YulIdentifier",
																	"src": "6352:17:11"
																},
																"nativeSrc": "6352:20:11",
																"nodeType": "YulFunctionCall",
																"src": "6352:20:11"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "6347:1:11",
																	"nodeType": "YulIdentifier",
																	"src": "6347:1:11"
																}
															]
														},
														{
															"nativeSrc": "6381:16:11",
															"nodeType": "YulAssignment",
															"src": "6381:16:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "6392:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "6392:1:11"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "6395:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "6395:1:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6388:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "6388:3:11"
																},
																"nativeSrc": "6388:9:11",
																"nodeType": "YulFunctionCall",
																"src": "6388:9:11"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "6381:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "6381:3:11"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "6421:22:11",
																"nodeType": "YulBlock",
																"src": "6421:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "6423:16:11",
																				"nodeType": "YulIdentifier",
																				"src": "6423:16:11"
																			},
																			"nativeSrc": "6423:18:11",
																			"nodeType": "YulFunctionCall",
																			"src": "6423:18:11"
																		},
																		"nativeSrc": "6423:18:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "6423:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "6413:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "6413:1:11"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "6416:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "6416:3:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "6410:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "6410:2:11"
																},
																"nativeSrc": "6410:10:11",
																"nodeType": "YulFunctionCall",
																"src": "6410:10:11"
															},
															"nativeSrc": "6407:36:11",
															"nodeType": "YulIf",
															"src": "6407:36:11"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "6259:191:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "6290:1:11",
														"nodeType": "YulTypedName",
														"src": "6290:1:11",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "6293:1:11",
														"nodeType": "YulTypedName",
														"src": "6293:1:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "6299:3:11",
														"nodeType": "YulTypedName",
														"src": "6299:3:11",
														"type": ""
													}
												],
												"src": "6259:191:11"
											},
											{
												"body": {
													"nativeSrc": "6562:118:11",
													"nodeType": "YulBlock",
													"src": "6562:118:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "6584:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "6584:6:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6592:1:11",
																				"nodeType": "YulLiteral",
																				"src": "6592:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6580:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "6580:3:11"
																		},
																		"nativeSrc": "6580:14:11",
																		"nodeType": "YulFunctionCall",
																		"src": "6580:14:11"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nativeSrc": "6596:34:11",
																		"nodeType": "YulLiteral",
																		"src": "6596:34:11",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6573:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "6573:6:11"
																},
																"nativeSrc": "6573:58:11",
																"nodeType": "YulFunctionCall",
																"src": "6573:58:11"
															},
															"nativeSrc": "6573:58:11",
															"nodeType": "YulExpressionStatement",
															"src": "6573:58:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "6652:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "6652:6:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6660:2:11",
																				"nodeType": "YulLiteral",
																				"src": "6660:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6648:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "6648:3:11"
																		},
																		"nativeSrc": "6648:15:11",
																		"nodeType": "YulFunctionCall",
																		"src": "6648:15:11"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nativeSrc": "6665:7:11",
																		"nodeType": "YulLiteral",
																		"src": "6665:7:11",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6641:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "6641:6:11"
																},
																"nativeSrc": "6641:32:11",
																"nodeType": "YulFunctionCall",
																"src": "6641:32:11"
															},
															"nativeSrc": "6641:32:11",
															"nodeType": "YulExpressionStatement",
															"src": "6641:32:11"
														}
													]
												},
												"name": "store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
												"nativeSrc": "6456:224:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "6554:6:11",
														"nodeType": "YulTypedName",
														"src": "6554:6:11",
														"type": ""
													}
												],
												"src": "6456:224:11"
											},
											{
												"body": {
													"nativeSrc": "6832:220:11",
													"nodeType": "YulBlock",
													"src": "6832:220:11",
													"statements": [
														{
															"nativeSrc": "6842:74:11",
															"nodeType": "YulAssignment",
															"src": "6842:74:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6908:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "6908:3:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6913:2:11",
																		"nodeType": "YulLiteral",
																		"src": "6913:2:11",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "6849:58:11",
																	"nodeType": "YulIdentifier",
																	"src": "6849:58:11"
																},
																"nativeSrc": "6849:67:11",
																"nodeType": "YulFunctionCall",
																"src": "6849:67:11"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "6842:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "6842:3:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7014:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "7014:3:11"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																	"nativeSrc": "6925:88:11",
																	"nodeType": "YulIdentifier",
																	"src": "6925:88:11"
																},
																"nativeSrc": "6925:93:11",
																"nodeType": "YulFunctionCall",
																"src": "6925:93:11"
															},
															"nativeSrc": "6925:93:11",
															"nodeType": "YulExpressionStatement",
															"src": "6925:93:11"
														},
														{
															"nativeSrc": "7027:19:11",
															"nodeType": "YulAssignment",
															"src": "7027:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7038:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "7038:3:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7043:2:11",
																		"nodeType": "YulLiteral",
																		"src": "7043:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7034:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "7034:3:11"
																},
																"nativeSrc": "7034:12:11",
																"nodeType": "YulFunctionCall",
																"src": "7034:12:11"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "7027:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "7027:3:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "6686:366:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "6820:3:11",
														"nodeType": "YulTypedName",
														"src": "6820:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "6828:3:11",
														"nodeType": "YulTypedName",
														"src": "6828:3:11",
														"type": ""
													}
												],
												"src": "6686:366:11"
											},
											{
												"body": {
													"nativeSrc": "7229:248:11",
													"nodeType": "YulBlock",
													"src": "7229:248:11",
													"statements": [
														{
															"nativeSrc": "7239:26:11",
															"nodeType": "YulAssignment",
															"src": "7239:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7251:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "7251:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7262:2:11",
																		"nodeType": "YulLiteral",
																		"src": "7262:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7247:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "7247:3:11"
																},
																"nativeSrc": "7247:18:11",
																"nodeType": "YulFunctionCall",
																"src": "7247:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7239:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "7239:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7286:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "7286:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7297:1:11",
																				"nodeType": "YulLiteral",
																				"src": "7297:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7282:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "7282:3:11"
																		},
																		"nativeSrc": "7282:17:11",
																		"nodeType": "YulFunctionCall",
																		"src": "7282:17:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "7305:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "7305:4:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "7311:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "7311:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "7301:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "7301:3:11"
																		},
																		"nativeSrc": "7301:20:11",
																		"nodeType": "YulFunctionCall",
																		"src": "7301:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7275:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "7275:6:11"
																},
																"nativeSrc": "7275:47:11",
																"nodeType": "YulFunctionCall",
																"src": "7275:47:11"
															},
															"nativeSrc": "7275:47:11",
															"nodeType": "YulExpressionStatement",
															"src": "7275:47:11"
														},
														{
															"nativeSrc": "7331:139:11",
															"nodeType": "YulAssignment",
															"src": "7331:139:11",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nativeSrc": "7465:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "7465:4:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "7339:124:11",
																	"nodeType": "YulIdentifier",
																	"src": "7339:124:11"
																},
																"nativeSrc": "7339:131:11",
																"nodeType": "YulFunctionCall",
																"src": "7339:131:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7331:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "7331:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "7058:419:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7209:9:11",
														"nodeType": "YulTypedName",
														"src": "7209:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "7224:4:11",
														"nodeType": "YulTypedName",
														"src": "7224:4:11",
														"type": ""
													}
												],
												"src": "7058:419:11"
											},
											{
												"body": {
													"nativeSrc": "7589:117:11",
													"nodeType": "YulBlock",
													"src": "7589:117:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "7611:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "7611:6:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7619:1:11",
																				"nodeType": "YulLiteral",
																				"src": "7619:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7607:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "7607:3:11"
																		},
																		"nativeSrc": "7607:14:11",
																		"nodeType": "YulFunctionCall",
																		"src": "7607:14:11"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nativeSrc": "7623:34:11",
																		"nodeType": "YulLiteral",
																		"src": "7623:34:11",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7600:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "7600:6:11"
																},
																"nativeSrc": "7600:58:11",
																"nodeType": "YulFunctionCall",
																"src": "7600:58:11"
															},
															"nativeSrc": "7600:58:11",
															"nodeType": "YulExpressionStatement",
															"src": "7600:58:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "7679:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "7679:6:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7687:2:11",
																				"nodeType": "YulLiteral",
																				"src": "7687:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7675:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "7675:3:11"
																		},
																		"nativeSrc": "7675:15:11",
																		"nodeType": "YulFunctionCall",
																		"src": "7675:15:11"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nativeSrc": "7692:6:11",
																		"nodeType": "YulLiteral",
																		"src": "7692:6:11",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7668:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "7668:6:11"
																},
																"nativeSrc": "7668:31:11",
																"nodeType": "YulFunctionCall",
																"src": "7668:31:11"
															},
															"nativeSrc": "7668:31:11",
															"nodeType": "YulExpressionStatement",
															"src": "7668:31:11"
														}
													]
												},
												"name": "store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
												"nativeSrc": "7483:223:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "7581:6:11",
														"nodeType": "YulTypedName",
														"src": "7581:6:11",
														"type": ""
													}
												],
												"src": "7483:223:11"
											},
											{
												"body": {
													"nativeSrc": "7858:220:11",
													"nodeType": "YulBlock",
													"src": "7858:220:11",
													"statements": [
														{
															"nativeSrc": "7868:74:11",
															"nodeType": "YulAssignment",
															"src": "7868:74:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7934:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "7934:3:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7939:2:11",
																		"nodeType": "YulLiteral",
																		"src": "7939:2:11",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "7875:58:11",
																	"nodeType": "YulIdentifier",
																	"src": "7875:58:11"
																},
																"nativeSrc": "7875:67:11",
																"nodeType": "YulFunctionCall",
																"src": "7875:67:11"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "7868:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "7868:3:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "8040:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "8040:3:11"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																	"nativeSrc": "7951:88:11",
																	"nodeType": "YulIdentifier",
																	"src": "7951:88:11"
																},
																"nativeSrc": "7951:93:11",
																"nodeType": "YulFunctionCall",
																"src": "7951:93:11"
															},
															"nativeSrc": "7951:93:11",
															"nodeType": "YulExpressionStatement",
															"src": "7951:93:11"
														},
														{
															"nativeSrc": "8053:19:11",
															"nodeType": "YulAssignment",
															"src": "8053:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "8064:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "8064:3:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8069:2:11",
																		"nodeType": "YulLiteral",
																		"src": "8069:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "8060:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "8060:3:11"
																},
																"nativeSrc": "8060:12:11",
																"nodeType": "YulFunctionCall",
																"src": "8060:12:11"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "8053:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "8053:3:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "7712:366:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "7846:3:11",
														"nodeType": "YulTypedName",
														"src": "7846:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "7854:3:11",
														"nodeType": "YulTypedName",
														"src": "7854:3:11",
														"type": ""
													}
												],
												"src": "7712:366:11"
											},
											{
												"body": {
													"nativeSrc": "8255:248:11",
													"nodeType": "YulBlock",
													"src": "8255:248:11",
													"statements": [
														{
															"nativeSrc": "8265:26:11",
															"nodeType": "YulAssignment",
															"src": "8265:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "8277:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "8277:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8288:2:11",
																		"nodeType": "YulLiteral",
																		"src": "8288:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "8273:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "8273:3:11"
																},
																"nativeSrc": "8273:18:11",
																"nodeType": "YulFunctionCall",
																"src": "8273:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "8265:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "8265:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8312:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "8312:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8323:1:11",
																				"nodeType": "YulLiteral",
																				"src": "8323:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8308:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "8308:3:11"
																		},
																		"nativeSrc": "8308:17:11",
																		"nodeType": "YulFunctionCall",
																		"src": "8308:17:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "8331:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "8331:4:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "8337:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "8337:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "8327:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "8327:3:11"
																		},
																		"nativeSrc": "8327:20:11",
																		"nodeType": "YulFunctionCall",
																		"src": "8327:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8301:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "8301:6:11"
																},
																"nativeSrc": "8301:47:11",
																"nodeType": "YulFunctionCall",
																"src": "8301:47:11"
															},
															"nativeSrc": "8301:47:11",
															"nodeType": "YulExpressionStatement",
															"src": "8301:47:11"
														},
														{
															"nativeSrc": "8357:139:11",
															"nodeType": "YulAssignment",
															"src": "8357:139:11",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nativeSrc": "8491:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "8491:4:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "8365:124:11",
																	"nodeType": "YulIdentifier",
																	"src": "8365:124:11"
																},
																"nativeSrc": "8365:131:11",
																"nodeType": "YulFunctionCall",
																"src": "8365:131:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "8357:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "8357:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "8084:419:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "8235:9:11",
														"nodeType": "YulTypedName",
														"src": "8235:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "8250:4:11",
														"nodeType": "YulTypedName",
														"src": "8250:4:11",
														"type": ""
													}
												],
												"src": "8084:419:11"
											},
											{
												"body": {
													"nativeSrc": "8615:115:11",
													"nodeType": "YulBlock",
													"src": "8615:115:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "8637:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "8637:6:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8645:1:11",
																				"nodeType": "YulLiteral",
																				"src": "8645:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8633:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "8633:3:11"
																		},
																		"nativeSrc": "8633:14:11",
																		"nodeType": "YulFunctionCall",
																		"src": "8633:14:11"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nativeSrc": "8649:34:11",
																		"nodeType": "YulLiteral",
																		"src": "8649:34:11",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8626:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "8626:6:11"
																},
																"nativeSrc": "8626:58:11",
																"nodeType": "YulFunctionCall",
																"src": "8626:58:11"
															},
															"nativeSrc": "8626:58:11",
															"nodeType": "YulExpressionStatement",
															"src": "8626:58:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "8705:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "8705:6:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8713:2:11",
																				"nodeType": "YulLiteral",
																				"src": "8713:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8701:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "8701:3:11"
																		},
																		"nativeSrc": "8701:15:11",
																		"nodeType": "YulFunctionCall",
																		"src": "8701:15:11"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nativeSrc": "8718:4:11",
																		"nodeType": "YulLiteral",
																		"src": "8718:4:11",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8694:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "8694:6:11"
																},
																"nativeSrc": "8694:29:11",
																"nodeType": "YulFunctionCall",
																"src": "8694:29:11"
															},
															"nativeSrc": "8694:29:11",
															"nodeType": "YulExpressionStatement",
															"src": "8694:29:11"
														}
													]
												},
												"name": "store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
												"nativeSrc": "8509:221:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "8607:6:11",
														"nodeType": "YulTypedName",
														"src": "8607:6:11",
														"type": ""
													}
												],
												"src": "8509:221:11"
											},
											{
												"body": {
													"nativeSrc": "8882:220:11",
													"nodeType": "YulBlock",
													"src": "8882:220:11",
													"statements": [
														{
															"nativeSrc": "8892:74:11",
															"nodeType": "YulAssignment",
															"src": "8892:74:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "8958:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "8958:3:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8963:2:11",
																		"nodeType": "YulLiteral",
																		"src": "8963:2:11",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "8899:58:11",
																	"nodeType": "YulIdentifier",
																	"src": "8899:58:11"
																},
																"nativeSrc": "8899:67:11",
																"nodeType": "YulFunctionCall",
																"src": "8899:67:11"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "8892:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "8892:3:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "9064:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "9064:3:11"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																	"nativeSrc": "8975:88:11",
																	"nodeType": "YulIdentifier",
																	"src": "8975:88:11"
																},
																"nativeSrc": "8975:93:11",
																"nodeType": "YulFunctionCall",
																"src": "8975:93:11"
															},
															"nativeSrc": "8975:93:11",
															"nodeType": "YulExpressionStatement",
															"src": "8975:93:11"
														},
														{
															"nativeSrc": "9077:19:11",
															"nodeType": "YulAssignment",
															"src": "9077:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "9088:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "9088:3:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9093:2:11",
																		"nodeType": "YulLiteral",
																		"src": "9093:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "9084:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "9084:3:11"
																},
																"nativeSrc": "9084:12:11",
																"nodeType": "YulFunctionCall",
																"src": "9084:12:11"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "9077:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "9077:3:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "8736:366:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "8870:3:11",
														"nodeType": "YulTypedName",
														"src": "8870:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "8878:3:11",
														"nodeType": "YulTypedName",
														"src": "8878:3:11",
														"type": ""
													}
												],
												"src": "8736:366:11"
											},
											{
												"body": {
													"nativeSrc": "9279:248:11",
													"nodeType": "YulBlock",
													"src": "9279:248:11",
													"statements": [
														{
															"nativeSrc": "9289:26:11",
															"nodeType": "YulAssignment",
															"src": "9289:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "9301:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "9301:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9312:2:11",
																		"nodeType": "YulLiteral",
																		"src": "9312:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "9297:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "9297:3:11"
																},
																"nativeSrc": "9297:18:11",
																"nodeType": "YulFunctionCall",
																"src": "9297:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "9289:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "9289:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9336:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "9336:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9347:1:11",
																				"nodeType": "YulLiteral",
																				"src": "9347:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9332:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "9332:3:11"
																		},
																		"nativeSrc": "9332:17:11",
																		"nodeType": "YulFunctionCall",
																		"src": "9332:17:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "9355:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "9355:4:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "9361:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "9361:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "9351:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "9351:3:11"
																		},
																		"nativeSrc": "9351:20:11",
																		"nodeType": "YulFunctionCall",
																		"src": "9351:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9325:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "9325:6:11"
																},
																"nativeSrc": "9325:47:11",
																"nodeType": "YulFunctionCall",
																"src": "9325:47:11"
															},
															"nativeSrc": "9325:47:11",
															"nodeType": "YulExpressionStatement",
															"src": "9325:47:11"
														},
														{
															"nativeSrc": "9381:139:11",
															"nodeType": "YulAssignment",
															"src": "9381:139:11",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nativeSrc": "9515:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "9515:4:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "9389:124:11",
																	"nodeType": "YulIdentifier",
																	"src": "9389:124:11"
																},
																"nativeSrc": "9389:131:11",
																"nodeType": "YulFunctionCall",
																"src": "9389:131:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "9381:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "9381:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "9108:419:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "9259:9:11",
														"nodeType": "YulTypedName",
														"src": "9259:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "9274:4:11",
														"nodeType": "YulTypedName",
														"src": "9274:4:11",
														"type": ""
													}
												],
												"src": "9108:419:11"
											},
											{
												"body": {
													"nativeSrc": "9639:73:11",
													"nodeType": "YulBlock",
													"src": "9639:73:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "9661:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "9661:6:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9669:1:11",
																				"nodeType": "YulLiteral",
																				"src": "9669:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9657:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "9657:3:11"
																		},
																		"nativeSrc": "9657:14:11",
																		"nodeType": "YulFunctionCall",
																		"src": "9657:14:11"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nativeSrc": "9673:31:11",
																		"nodeType": "YulLiteral",
																		"src": "9673:31:11",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9650:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "9650:6:11"
																},
																"nativeSrc": "9650:55:11",
																"nodeType": "YulFunctionCall",
																"src": "9650:55:11"
															},
															"nativeSrc": "9650:55:11",
															"nodeType": "YulExpressionStatement",
															"src": "9650:55:11"
														}
													]
												},
												"name": "store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
												"nativeSrc": "9533:179:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "9631:6:11",
														"nodeType": "YulTypedName",
														"src": "9631:6:11",
														"type": ""
													}
												],
												"src": "9533:179:11"
											},
											{
												"body": {
													"nativeSrc": "9864:220:11",
													"nodeType": "YulBlock",
													"src": "9864:220:11",
													"statements": [
														{
															"nativeSrc": "9874:74:11",
															"nodeType": "YulAssignment",
															"src": "9874:74:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "9940:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "9940:3:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9945:2:11",
																		"nodeType": "YulLiteral",
																		"src": "9945:2:11",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "9881:58:11",
																	"nodeType": "YulIdentifier",
																	"src": "9881:58:11"
																},
																"nativeSrc": "9881:67:11",
																"nodeType": "YulFunctionCall",
																"src": "9881:67:11"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "9874:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "9874:3:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "10046:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "10046:3:11"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																	"nativeSrc": "9957:88:11",
																	"nodeType": "YulIdentifier",
																	"src": "9957:88:11"
																},
																"nativeSrc": "9957:93:11",
																"nodeType": "YulFunctionCall",
																"src": "9957:93:11"
															},
															"nativeSrc": "9957:93:11",
															"nodeType": "YulExpressionStatement",
															"src": "9957:93:11"
														},
														{
															"nativeSrc": "10059:19:11",
															"nodeType": "YulAssignment",
															"src": "10059:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "10070:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "10070:3:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10075:2:11",
																		"nodeType": "YulLiteral",
																		"src": "10075:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "10066:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "10066:3:11"
																},
																"nativeSrc": "10066:12:11",
																"nodeType": "YulFunctionCall",
																"src": "10066:12:11"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "10059:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "10059:3:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "9718:366:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "9852:3:11",
														"nodeType": "YulTypedName",
														"src": "9852:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "9860:3:11",
														"nodeType": "YulTypedName",
														"src": "9860:3:11",
														"type": ""
													}
												],
												"src": "9718:366:11"
											},
											{
												"body": {
													"nativeSrc": "10261:248:11",
													"nodeType": "YulBlock",
													"src": "10261:248:11",
													"statements": [
														{
															"nativeSrc": "10271:26:11",
															"nodeType": "YulAssignment",
															"src": "10271:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "10283:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "10283:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10294:2:11",
																		"nodeType": "YulLiteral",
																		"src": "10294:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "10279:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "10279:3:11"
																},
																"nativeSrc": "10279:18:11",
																"nodeType": "YulFunctionCall",
																"src": "10279:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "10271:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "10271:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "10318:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "10318:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10329:1:11",
																				"nodeType": "YulLiteral",
																				"src": "10329:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10314:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "10314:3:11"
																		},
																		"nativeSrc": "10314:17:11",
																		"nodeType": "YulFunctionCall",
																		"src": "10314:17:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "10337:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "10337:4:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "10343:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "10343:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "10333:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "10333:3:11"
																		},
																		"nativeSrc": "10333:20:11",
																		"nodeType": "YulFunctionCall",
																		"src": "10333:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10307:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "10307:6:11"
																},
																"nativeSrc": "10307:47:11",
																"nodeType": "YulFunctionCall",
																"src": "10307:47:11"
															},
															"nativeSrc": "10307:47:11",
															"nodeType": "YulExpressionStatement",
															"src": "10307:47:11"
														},
														{
															"nativeSrc": "10363:139:11",
															"nodeType": "YulAssignment",
															"src": "10363:139:11",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nativeSrc": "10497:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "10497:4:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "10371:124:11",
																	"nodeType": "YulIdentifier",
																	"src": "10371:124:11"
																},
																"nativeSrc": "10371:131:11",
																"nodeType": "YulFunctionCall",
																"src": "10371:131:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "10363:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "10363:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "10090:419:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "10241:9:11",
														"nodeType": "YulTypedName",
														"src": "10241:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "10256:4:11",
														"nodeType": "YulTypedName",
														"src": "10256:4:11",
														"type": ""
													}
												],
												"src": "10090:419:11"
											},
											{
												"body": {
													"nativeSrc": "10621:118:11",
													"nodeType": "YulBlock",
													"src": "10621:118:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "10643:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "10643:6:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10651:1:11",
																				"nodeType": "YulLiteral",
																				"src": "10651:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10639:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "10639:3:11"
																		},
																		"nativeSrc": "10639:14:11",
																		"nodeType": "YulFunctionCall",
																		"src": "10639:14:11"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nativeSrc": "10655:34:11",
																		"nodeType": "YulLiteral",
																		"src": "10655:34:11",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10632:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "10632:6:11"
																},
																"nativeSrc": "10632:58:11",
																"nodeType": "YulFunctionCall",
																"src": "10632:58:11"
															},
															"nativeSrc": "10632:58:11",
															"nodeType": "YulExpressionStatement",
															"src": "10632:58:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "10711:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "10711:6:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10719:2:11",
																				"nodeType": "YulLiteral",
																				"src": "10719:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10707:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "10707:3:11"
																		},
																		"nativeSrc": "10707:15:11",
																		"nodeType": "YulFunctionCall",
																		"src": "10707:15:11"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nativeSrc": "10724:7:11",
																		"nodeType": "YulLiteral",
																		"src": "10724:7:11",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10700:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "10700:6:11"
																},
																"nativeSrc": "10700:32:11",
																"nodeType": "YulFunctionCall",
																"src": "10700:32:11"
															},
															"nativeSrc": "10700:32:11",
															"nodeType": "YulExpressionStatement",
															"src": "10700:32:11"
														}
													]
												},
												"name": "store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
												"nativeSrc": "10515:224:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "10613:6:11",
														"nodeType": "YulTypedName",
														"src": "10613:6:11",
														"type": ""
													}
												],
												"src": "10515:224:11"
											},
											{
												"body": {
													"nativeSrc": "10891:220:11",
													"nodeType": "YulBlock",
													"src": "10891:220:11",
													"statements": [
														{
															"nativeSrc": "10901:74:11",
															"nodeType": "YulAssignment",
															"src": "10901:74:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "10967:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "10967:3:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10972:2:11",
																		"nodeType": "YulLiteral",
																		"src": "10972:2:11",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "10908:58:11",
																	"nodeType": "YulIdentifier",
																	"src": "10908:58:11"
																},
																"nativeSrc": "10908:67:11",
																"nodeType": "YulFunctionCall",
																"src": "10908:67:11"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "10901:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "10901:3:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "11073:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "11073:3:11"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																	"nativeSrc": "10984:88:11",
																	"nodeType": "YulIdentifier",
																	"src": "10984:88:11"
																},
																"nativeSrc": "10984:93:11",
																"nodeType": "YulFunctionCall",
																"src": "10984:93:11"
															},
															"nativeSrc": "10984:93:11",
															"nodeType": "YulExpressionStatement",
															"src": "10984:93:11"
														},
														{
															"nativeSrc": "11086:19:11",
															"nodeType": "YulAssignment",
															"src": "11086:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "11097:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "11097:3:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11102:2:11",
																		"nodeType": "YulLiteral",
																		"src": "11102:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "11093:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "11093:3:11"
																},
																"nativeSrc": "11093:12:11",
																"nodeType": "YulFunctionCall",
																"src": "11093:12:11"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "11086:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "11086:3:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "10745:366:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "10879:3:11",
														"nodeType": "YulTypedName",
														"src": "10879:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "10887:3:11",
														"nodeType": "YulTypedName",
														"src": "10887:3:11",
														"type": ""
													}
												],
												"src": "10745:366:11"
											},
											{
												"body": {
													"nativeSrc": "11288:248:11",
													"nodeType": "YulBlock",
													"src": "11288:248:11",
													"statements": [
														{
															"nativeSrc": "11298:26:11",
															"nodeType": "YulAssignment",
															"src": "11298:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "11310:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "11310:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11321:2:11",
																		"nodeType": "YulLiteral",
																		"src": "11321:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "11306:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "11306:3:11"
																},
																"nativeSrc": "11306:18:11",
																"nodeType": "YulFunctionCall",
																"src": "11306:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "11298:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "11298:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "11345:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "11345:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "11356:1:11",
																				"nodeType": "YulLiteral",
																				"src": "11356:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "11341:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "11341:3:11"
																		},
																		"nativeSrc": "11341:17:11",
																		"nodeType": "YulFunctionCall",
																		"src": "11341:17:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "11364:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "11364:4:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "11370:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "11370:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "11360:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "11360:3:11"
																		},
																		"nativeSrc": "11360:20:11",
																		"nodeType": "YulFunctionCall",
																		"src": "11360:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "11334:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "11334:6:11"
																},
																"nativeSrc": "11334:47:11",
																"nodeType": "YulFunctionCall",
																"src": "11334:47:11"
															},
															"nativeSrc": "11334:47:11",
															"nodeType": "YulExpressionStatement",
															"src": "11334:47:11"
														},
														{
															"nativeSrc": "11390:139:11",
															"nodeType": "YulAssignment",
															"src": "11390:139:11",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nativeSrc": "11524:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "11524:4:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "11398:124:11",
																	"nodeType": "YulIdentifier",
																	"src": "11398:124:11"
																},
																"nativeSrc": "11398:131:11",
																"nodeType": "YulFunctionCall",
																"src": "11398:131:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "11390:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "11390:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "11117:419:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "11268:9:11",
														"nodeType": "YulTypedName",
														"src": "11268:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "11283:4:11",
														"nodeType": "YulTypedName",
														"src": "11283:4:11",
														"type": ""
													}
												],
												"src": "11117:419:11"
											},
											{
												"body": {
													"nativeSrc": "11648:116:11",
													"nodeType": "YulBlock",
													"src": "11648:116:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "11670:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "11670:6:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "11678:1:11",
																				"nodeType": "YulLiteral",
																				"src": "11678:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "11666:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "11666:3:11"
																		},
																		"nativeSrc": "11666:14:11",
																		"nodeType": "YulFunctionCall",
																		"src": "11666:14:11"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nativeSrc": "11682:34:11",
																		"nodeType": "YulLiteral",
																		"src": "11682:34:11",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "11659:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "11659:6:11"
																},
																"nativeSrc": "11659:58:11",
																"nodeType": "YulFunctionCall",
																"src": "11659:58:11"
															},
															"nativeSrc": "11659:58:11",
															"nodeType": "YulExpressionStatement",
															"src": "11659:58:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "11738:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "11738:6:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "11746:2:11",
																				"nodeType": "YulLiteral",
																				"src": "11746:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "11734:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "11734:3:11"
																		},
																		"nativeSrc": "11734:15:11",
																		"nodeType": "YulFunctionCall",
																		"src": "11734:15:11"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nativeSrc": "11751:5:11",
																		"nodeType": "YulLiteral",
																		"src": "11751:5:11",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "11727:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "11727:6:11"
																},
																"nativeSrc": "11727:30:11",
																"nodeType": "YulFunctionCall",
																"src": "11727:30:11"
															},
															"nativeSrc": "11727:30:11",
															"nodeType": "YulExpressionStatement",
															"src": "11727:30:11"
														}
													]
												},
												"name": "store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
												"nativeSrc": "11542:222:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "11640:6:11",
														"nodeType": "YulTypedName",
														"src": "11640:6:11",
														"type": ""
													}
												],
												"src": "11542:222:11"
											},
											{
												"body": {
													"nativeSrc": "11916:220:11",
													"nodeType": "YulBlock",
													"src": "11916:220:11",
													"statements": [
														{
															"nativeSrc": "11926:74:11",
															"nodeType": "YulAssignment",
															"src": "11926:74:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "11992:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "11992:3:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11997:2:11",
																		"nodeType": "YulLiteral",
																		"src": "11997:2:11",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "11933:58:11",
																	"nodeType": "YulIdentifier",
																	"src": "11933:58:11"
																},
																"nativeSrc": "11933:67:11",
																"nodeType": "YulFunctionCall",
																"src": "11933:67:11"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "11926:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "11926:3:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "12098:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "12098:3:11"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																	"nativeSrc": "12009:88:11",
																	"nodeType": "YulIdentifier",
																	"src": "12009:88:11"
																},
																"nativeSrc": "12009:93:11",
																"nodeType": "YulFunctionCall",
																"src": "12009:93:11"
															},
															"nativeSrc": "12009:93:11",
															"nodeType": "YulExpressionStatement",
															"src": "12009:93:11"
														},
														{
															"nativeSrc": "12111:19:11",
															"nodeType": "YulAssignment",
															"src": "12111:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "12122:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "12122:3:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "12127:2:11",
																		"nodeType": "YulLiteral",
																		"src": "12127:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "12118:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "12118:3:11"
																},
																"nativeSrc": "12118:12:11",
																"nodeType": "YulFunctionCall",
																"src": "12118:12:11"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "12111:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "12111:3:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "11770:366:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "11904:3:11",
														"nodeType": "YulTypedName",
														"src": "11904:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "11912:3:11",
														"nodeType": "YulTypedName",
														"src": "11912:3:11",
														"type": ""
													}
												],
												"src": "11770:366:11"
											},
											{
												"body": {
													"nativeSrc": "12313:248:11",
													"nodeType": "YulBlock",
													"src": "12313:248:11",
													"statements": [
														{
															"nativeSrc": "12323:26:11",
															"nodeType": "YulAssignment",
															"src": "12323:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "12335:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "12335:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "12346:2:11",
																		"nodeType": "YulLiteral",
																		"src": "12346:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "12331:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "12331:3:11"
																},
																"nativeSrc": "12331:18:11",
																"nodeType": "YulFunctionCall",
																"src": "12331:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "12323:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "12323:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "12370:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "12370:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "12381:1:11",
																				"nodeType": "YulLiteral",
																				"src": "12381:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "12366:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "12366:3:11"
																		},
																		"nativeSrc": "12366:17:11",
																		"nodeType": "YulFunctionCall",
																		"src": "12366:17:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "12389:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "12389:4:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "12395:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "12395:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "12385:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "12385:3:11"
																		},
																		"nativeSrc": "12385:20:11",
																		"nodeType": "YulFunctionCall",
																		"src": "12385:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "12359:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "12359:6:11"
																},
																"nativeSrc": "12359:47:11",
																"nodeType": "YulFunctionCall",
																"src": "12359:47:11"
															},
															"nativeSrc": "12359:47:11",
															"nodeType": "YulExpressionStatement",
															"src": "12359:47:11"
														},
														{
															"nativeSrc": "12415:139:11",
															"nodeType": "YulAssignment",
															"src": "12415:139:11",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nativeSrc": "12549:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "12549:4:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "12423:124:11",
																	"nodeType": "YulIdentifier",
																	"src": "12423:124:11"
																},
																"nativeSrc": "12423:131:11",
																"nodeType": "YulFunctionCall",
																"src": "12423:131:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "12415:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "12415:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "12142:419:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "12293:9:11",
														"nodeType": "YulTypedName",
														"src": "12293:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "12308:4:11",
														"nodeType": "YulTypedName",
														"src": "12308:4:11",
														"type": ""
													}
												],
												"src": "12142:419:11"
											},
											{
												"body": {
													"nativeSrc": "12673:119:11",
													"nodeType": "YulBlock",
													"src": "12673:119:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "12695:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "12695:6:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "12703:1:11",
																				"nodeType": "YulLiteral",
																				"src": "12703:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "12691:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "12691:3:11"
																		},
																		"nativeSrc": "12691:14:11",
																		"nodeType": "YulFunctionCall",
																		"src": "12691:14:11"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nativeSrc": "12707:34:11",
																		"nodeType": "YulLiteral",
																		"src": "12707:34:11",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "12684:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "12684:6:11"
																},
																"nativeSrc": "12684:58:11",
																"nodeType": "YulFunctionCall",
																"src": "12684:58:11"
															},
															"nativeSrc": "12684:58:11",
															"nodeType": "YulExpressionStatement",
															"src": "12684:58:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "12763:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "12763:6:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "12771:2:11",
																				"nodeType": "YulLiteral",
																				"src": "12771:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "12759:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "12759:3:11"
																		},
																		"nativeSrc": "12759:15:11",
																		"nodeType": "YulFunctionCall",
																		"src": "12759:15:11"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nativeSrc": "12776:8:11",
																		"nodeType": "YulLiteral",
																		"src": "12776:8:11",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "12752:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "12752:6:11"
																},
																"nativeSrc": "12752:33:11",
																"nodeType": "YulFunctionCall",
																"src": "12752:33:11"
															},
															"nativeSrc": "12752:33:11",
															"nodeType": "YulExpressionStatement",
															"src": "12752:33:11"
														}
													]
												},
												"name": "store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
												"nativeSrc": "12567:225:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "12665:6:11",
														"nodeType": "YulTypedName",
														"src": "12665:6:11",
														"type": ""
													}
												],
												"src": "12567:225:11"
											},
											{
												"body": {
													"nativeSrc": "12944:220:11",
													"nodeType": "YulBlock",
													"src": "12944:220:11",
													"statements": [
														{
															"nativeSrc": "12954:74:11",
															"nodeType": "YulAssignment",
															"src": "12954:74:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "13020:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "13020:3:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "13025:2:11",
																		"nodeType": "YulLiteral",
																		"src": "13025:2:11",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "12961:58:11",
																	"nodeType": "YulIdentifier",
																	"src": "12961:58:11"
																},
																"nativeSrc": "12961:67:11",
																"nodeType": "YulFunctionCall",
																"src": "12961:67:11"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "12954:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "12954:3:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "13126:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "13126:3:11"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																	"nativeSrc": "13037:88:11",
																	"nodeType": "YulIdentifier",
																	"src": "13037:88:11"
																},
																"nativeSrc": "13037:93:11",
																"nodeType": "YulFunctionCall",
																"src": "13037:93:11"
															},
															"nativeSrc": "13037:93:11",
															"nodeType": "YulExpressionStatement",
															"src": "13037:93:11"
														},
														{
															"nativeSrc": "13139:19:11",
															"nodeType": "YulAssignment",
															"src": "13139:19:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "13150:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "13150:3:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "13155:2:11",
																		"nodeType": "YulLiteral",
																		"src": "13155:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "13146:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "13146:3:11"
																},
																"nativeSrc": "13146:12:11",
																"nodeType": "YulFunctionCall",
																"src": "13146:12:11"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "13139:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "13139:3:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "12798:366:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "12932:3:11",
														"nodeType": "YulTypedName",
														"src": "12932:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "12940:3:11",
														"nodeType": "YulTypedName",
														"src": "12940:3:11",
														"type": ""
													}
												],
												"src": "12798:366:11"
											},
											{
												"body": {
													"nativeSrc": "13341:248:11",
													"nodeType": "YulBlock",
													"src": "13341:248:11",
													"statements": [
														{
															"nativeSrc": "13351:26:11",
															"nodeType": "YulAssignment",
															"src": "13351:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "13363:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "13363:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "13374:2:11",
																		"nodeType": "YulLiteral",
																		"src": "13374:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "13359:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "13359:3:11"
																},
																"nativeSrc": "13359:18:11",
																"nodeType": "YulFunctionCall",
																"src": "13359:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "13351:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "13351:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "13398:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "13398:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "13409:1:11",
																				"nodeType": "YulLiteral",
																				"src": "13409:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "13394:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "13394:3:11"
																		},
																		"nativeSrc": "13394:17:11",
																		"nodeType": "YulFunctionCall",
																		"src": "13394:17:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "13417:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "13417:4:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "13423:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "13423:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "13413:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "13413:3:11"
																		},
																		"nativeSrc": "13413:20:11",
																		"nodeType": "YulFunctionCall",
																		"src": "13413:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "13387:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "13387:6:11"
																},
																"nativeSrc": "13387:47:11",
																"nodeType": "YulFunctionCall",
																"src": "13387:47:11"
															},
															"nativeSrc": "13387:47:11",
															"nodeType": "YulExpressionStatement",
															"src": "13387:47:11"
														},
														{
															"nativeSrc": "13443:139:11",
															"nodeType": "YulAssignment",
															"src": "13443:139:11",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nativeSrc": "13577:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "13577:4:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "13451:124:11",
																	"nodeType": "YulIdentifier",
																	"src": "13451:124:11"
																},
																"nativeSrc": "13451:131:11",
																"nodeType": "YulFunctionCall",
																"src": "13451:131:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "13443:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "13443:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "13170:419:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "13321:9:11",
														"nodeType": "YulTypedName",
														"src": "13321:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "13336:4:11",
														"nodeType": "YulTypedName",
														"src": "13336:4:11",
														"type": ""
													}
												],
												"src": "13170:419:11"
											}
										]
									},
									"contents": "{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        mcopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: decreased allowance below\")\n\n        mstore(add(memPtr, 32), \" zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve from the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve to the zero addre\")\n\n        mstore(add(memPtr, 32), \"ss\")\n\n    }\n\n    function abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: insufficient allowance\")\n\n    }\n\n    function abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer from the zero ad\")\n\n        mstore(add(memPtr, 32), \"dress\")\n\n    }\n\n    function abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer to the zero addr\")\n\n        mstore(add(memPtr, 32), \"ess\")\n\n    }\n\n    function abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer amount exceeds b\")\n\n        mstore(add(memPtr, 32), \"alance\")\n\n    }\n\n    function abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n",
									"id": 11,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b50600436106100a7575f3560e01c8063395093511161006f578063395093511461016557806370a082311461019557806395d89b41146101c5578063a457c2d7146101e3578063a9059cbb14610213578063dd62ed3e14610243576100a7565b806306fdde03146100ab578063095ea7b3146100c957806318160ddd146100f957806323b872dd14610117578063313ce56714610147575b5f80fd5b6100b3610273565b6040516100c09190610ac3565b60405180910390f35b6100e360048036038101906100de9190610b74565b610303565b6040516100f09190610bcc565b60405180910390f35b610101610325565b60405161010e9190610bf4565b60405180910390f35b610131600480360381019061012c9190610c0d565b61032e565b60405161013e9190610bcc565b60405180910390f35b61014f61035c565b60405161015c9190610c78565b60405180910390f35b61017f600480360381019061017a9190610b74565b610364565b60405161018c9190610bcc565b60405180910390f35b6101af60048036038101906101aa9190610c91565b61039a565b6040516101bc9190610bf4565b60405180910390f35b6101cd6103df565b6040516101da9190610ac3565b60405180910390f35b6101fd60048036038101906101f89190610b74565b61046f565b60405161020a9190610bcc565b60405180910390f35b61022d60048036038101906102289190610b74565b6104e4565b60405161023a9190610bcc565b60405180910390f35b61025d60048036038101906102589190610cbc565b610506565b60405161026a9190610bf4565b60405180910390f35b60606003805461028290610d27565b80601f01602080910402602001604051908101604052809291908181526020018280546102ae90610d27565b80156102f95780601f106102d0576101008083540402835291602001916102f9565b820191905f5260205f20905b8154815290600101906020018083116102dc57829003601f168201915b5050505050905090565b5f8061030d610588565b905061031a81858561058f565b600191505092915050565b5f600254905090565b5f80610338610588565b9050610345858285610752565b6103508585856107dd565b60019150509392505050565b5f6012905090565b5f8061036e610588565b905061038f8185856103808589610506565b61038a9190610d84565b61058f565b600191505092915050565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6060600480546103ee90610d27565b80601f016020809104026020016040519081016040528092919081815260200182805461041a90610d27565b80156104655780601f1061043c57610100808354040283529160200191610465565b820191905f5260205f20905b81548152906001019060200180831161044857829003601f168201915b5050505050905090565b5f80610479610588565b90505f6104868286610506565b9050838110156104cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c290610e27565b60405180910390fd5b6104d8828686840361058f565b60019250505092915050565b5f806104ee610588565b90506104fb8185856107dd565b600191505092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f490610eb5565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361066b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066290610f43565b60405180910390fd5b8060015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107459190610bf4565b60405180910390a3505050565b5f61075d8484610506565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107d757818110156107c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c090610fab565b60405180910390fd5b6107d6848484840361058f565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361084b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084290611039565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b0906110c7565b60405180910390fd5b6108c4838383610a49565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093e90611155565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550815f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a309190610bf4565b60405180910390a3610a43848484610a4e565b50505050565b505050565b505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610a9582610a53565b610a9f8185610a5d565b9350610aaf818560208601610a6d565b610ab881610a7b565b840191505092915050565b5f6020820190508181035f830152610adb8184610a8b565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610b1082610ae7565b9050919050565b610b2081610b06565b8114610b2a575f80fd5b50565b5f81359050610b3b81610b17565b92915050565b5f819050919050565b610b5381610b41565b8114610b5d575f80fd5b50565b5f81359050610b6e81610b4a565b92915050565b5f8060408385031215610b8a57610b89610ae3565b5b5f610b9785828601610b2d565b9250506020610ba885828601610b60565b9150509250929050565b5f8115159050919050565b610bc681610bb2565b82525050565b5f602082019050610bdf5f830184610bbd565b92915050565b610bee81610b41565b82525050565b5f602082019050610c075f830184610be5565b92915050565b5f805f60608486031215610c2457610c23610ae3565b5b5f610c3186828701610b2d565b9350506020610c4286828701610b2d565b9250506040610c5386828701610b60565b9150509250925092565b5f60ff82169050919050565b610c7281610c5d565b82525050565b5f602082019050610c8b5f830184610c69565b92915050565b5f60208284031215610ca657610ca5610ae3565b5b5f610cb384828501610b2d565b91505092915050565b5f8060408385031215610cd257610cd1610ae3565b5b5f610cdf85828601610b2d565b9250506020610cf085828601610b2d565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610d3e57607f821691505b602082108103610d5157610d50610cfa565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610d8e82610b41565b9150610d9983610b41565b9250828201905080821115610db157610db0610d57565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f775f8201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b5f610e11602583610a5d565b9150610e1c82610db7565b604082019050919050565b5f6020820190508181035f830152610e3e81610e05565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f610e9f602483610a5d565b9150610eaa82610e45565b604082019050919050565b5f6020820190508181035f830152610ecc81610e93565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f610f2d602283610a5d565b9150610f3882610ed3565b604082019050919050565b5f6020820190508181035f830152610f5a81610f21565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000005f82015250565b5f610f95601d83610a5d565b9150610fa082610f61565b602082019050919050565b5f6020820190508181035f830152610fc281610f89565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f611023602583610a5d565b915061102e82610fc9565b604082019050919050565b5f6020820190508181035f83015261105081611017565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f20616464725f8201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b5f6110b1602383610a5d565b91506110bc82611057565b604082019050919050565b5f6020820190508181035f8301526110de816110a5565b9050919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320625f8201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b5f61113f602683610a5d565b915061114a826110e5565b604082019050919050565b5f6020820190508181035f83015261116c81611133565b905091905056fea26469706673582212205c7b8c5f8721b076c916c8dbb5738d63065fca3641280c99b318c7d5db14527864736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA7 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x213 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x243 JUMPI PUSH2 0xA7 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xC9 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xF9 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x147 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xB3 PUSH2 0x273 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC0 SWAP2 SWAP1 PUSH2 0xAC3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xDE SWAP2 SWAP1 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x303 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF0 SWAP2 SWAP1 PUSH2 0xBCC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x101 PUSH2 0x325 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10E SWAP2 SWAP1 PUSH2 0xBF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x131 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12C SWAP2 SWAP1 PUSH2 0xC0D JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x13E SWAP2 SWAP1 PUSH2 0xBCC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14F PUSH2 0x35C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15C SWAP2 SWAP1 PUSH2 0xC78 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17A SWAP2 SWAP1 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18C SWAP2 SWAP1 PUSH2 0xBCC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AA SWAP2 SWAP1 PUSH2 0xC91 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BC SWAP2 SWAP1 PUSH2 0xBF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CD PUSH2 0x3DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DA SWAP2 SWAP1 PUSH2 0xAC3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F8 SWAP2 SWAP1 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x46F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20A SWAP2 SWAP1 PUSH2 0xBCC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x22D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x228 SWAP2 SWAP1 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x4E4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23A SWAP2 SWAP1 PUSH2 0xBCC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x25D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x258 SWAP2 SWAP1 PUSH2 0xCBC JUMP JUMPDEST PUSH2 0x506 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26A SWAP2 SWAP1 PUSH2 0xBF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x282 SWAP1 PUSH2 0xD27 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2AE SWAP1 PUSH2 0xD27 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2F9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2F9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2DC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x30D PUSH2 0x588 JUMP JUMPDEST SWAP1 POP PUSH2 0x31A DUP2 DUP6 DUP6 PUSH2 0x58F JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x338 PUSH2 0x588 JUMP JUMPDEST SWAP1 POP PUSH2 0x345 DUP6 DUP3 DUP6 PUSH2 0x752 JUMP JUMPDEST PUSH2 0x350 DUP6 DUP6 DUP6 PUSH2 0x7DD JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x36E PUSH2 0x588 JUMP JUMPDEST SWAP1 POP PUSH2 0x38F DUP2 DUP6 DUP6 PUSH2 0x380 DUP6 DUP10 PUSH2 0x506 JUMP JUMPDEST PUSH2 0x38A SWAP2 SWAP1 PUSH2 0xD84 JUMP JUMPDEST PUSH2 0x58F JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x3EE SWAP1 PUSH2 0xD27 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x41A SWAP1 PUSH2 0xD27 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x465 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x43C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x465 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x448 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x479 PUSH2 0x588 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x486 DUP3 DUP7 PUSH2 0x506 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4CB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4C2 SWAP1 PUSH2 0xE27 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4D8 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x58F JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x4EE PUSH2 0x588 JUMP JUMPDEST SWAP1 POP PUSH2 0x4FB DUP2 DUP6 DUP6 PUSH2 0x7DD JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x5FD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F4 SWAP1 PUSH2 0xEB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x66B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x662 SWAP1 PUSH2 0xF43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x745 SWAP2 SWAP1 PUSH2 0xBF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x75D DUP5 DUP5 PUSH2 0x506 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7D7 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7C0 SWAP1 PUSH2 0xFAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7D6 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x58F JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x84B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x842 SWAP1 PUSH2 0x1039 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x8B9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8B0 SWAP1 PUSH2 0x10C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8C4 DUP4 DUP4 DUP4 PUSH2 0xA49 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x947 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x93E SWAP1 PUSH2 0x1155 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA30 SWAP2 SWAP1 PUSH2 0xBF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA43 DUP5 DUP5 DUP5 PUSH2 0xA4E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xA95 DUP3 PUSH2 0xA53 JUMP JUMPDEST PUSH2 0xA9F DUP2 DUP6 PUSH2 0xA5D JUMP JUMPDEST SWAP4 POP PUSH2 0xAAF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xA6D JUMP JUMPDEST PUSH2 0xAB8 DUP2 PUSH2 0xA7B JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xADB DUP2 DUP5 PUSH2 0xA8B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xB10 DUP3 PUSH2 0xAE7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB20 DUP2 PUSH2 0xB06 JUMP JUMPDEST DUP2 EQ PUSH2 0xB2A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB3B DUP2 PUSH2 0xB17 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB53 DUP2 PUSH2 0xB41 JUMP JUMPDEST DUP2 EQ PUSH2 0xB5D JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB6E DUP2 PUSH2 0xB4A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB8A JUMPI PUSH2 0xB89 PUSH2 0xAE3 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xB97 DUP6 DUP3 DUP7 ADD PUSH2 0xB2D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xBA8 DUP6 DUP3 DUP7 ADD PUSH2 0xB60 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBC6 DUP2 PUSH2 0xBB2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xBDF PUSH0 DUP4 ADD DUP5 PUSH2 0xBBD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xBEE DUP2 PUSH2 0xB41 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC07 PUSH0 DUP4 ADD DUP5 PUSH2 0xBE5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC24 JUMPI PUSH2 0xC23 PUSH2 0xAE3 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xC31 DUP7 DUP3 DUP8 ADD PUSH2 0xB2D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC42 DUP7 DUP3 DUP8 ADD PUSH2 0xB2D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xC53 DUP7 DUP3 DUP8 ADD PUSH2 0xB60 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC72 DUP2 PUSH2 0xC5D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC8B PUSH0 DUP4 ADD DUP5 PUSH2 0xC69 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCA6 JUMPI PUSH2 0xCA5 PUSH2 0xAE3 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xCB3 DUP5 DUP3 DUP6 ADD PUSH2 0xB2D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCD2 JUMPI PUSH2 0xCD1 PUSH2 0xAE3 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xCDF DUP6 DUP3 DUP7 ADD PUSH2 0xB2D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xCF0 DUP6 DUP3 DUP7 ADD PUSH2 0xB2D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xD3E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xD51 JUMPI PUSH2 0xD50 PUSH2 0xCFA JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0xD8E DUP3 PUSH2 0xB41 JUMP JUMPDEST SWAP2 POP PUSH2 0xD99 DUP4 PUSH2 0xB41 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xDB1 JUMPI PUSH2 0xDB0 PUSH2 0xD57 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0xE11 PUSH1 0x25 DUP4 PUSH2 0xA5D JUMP JUMPDEST SWAP2 POP PUSH2 0xE1C DUP3 PUSH2 0xDB7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xE3E DUP2 PUSH2 0xE05 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0xE9F PUSH1 0x24 DUP4 PUSH2 0xA5D JUMP JUMPDEST SWAP2 POP PUSH2 0xEAA DUP3 PUSH2 0xE45 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xECC DUP2 PUSH2 0xE93 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0xF2D PUSH1 0x22 DUP4 PUSH2 0xA5D JUMP JUMPDEST SWAP2 POP PUSH2 0xF38 DUP3 PUSH2 0xED3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xF5A DUP2 PUSH2 0xF21 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0xF95 PUSH1 0x1D DUP4 PUSH2 0xA5D JUMP JUMPDEST SWAP2 POP PUSH2 0xFA0 DUP3 PUSH2 0xF61 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xFC2 DUP2 PUSH2 0xF89 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x1023 PUSH1 0x25 DUP4 PUSH2 0xA5D JUMP JUMPDEST SWAP2 POP PUSH2 0x102E DUP3 PUSH2 0xFC9 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1050 DUP2 PUSH2 0x1017 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x10B1 PUSH1 0x23 DUP4 PUSH2 0xA5D JUMP JUMPDEST SWAP2 POP PUSH2 0x10BC DUP3 PUSH2 0x1057 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x10DE DUP2 PUSH2 0x10A5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x113F PUSH1 0x26 DUP4 PUSH2 0xA5D JUMP JUMPDEST SWAP2 POP PUSH2 0x114A DUP3 PUSH2 0x10E5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x116C DUP2 PUSH2 0x1133 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TLOAD PUSH28 0x8C5F8721B076C916C8DBB5738D63065FCA3641280C99B318C7D5DB14 MSTORE PUSH25 0x64736F6C634300081A00330000000000000000000000000000 ",
							"sourceMap": "2664:11610:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3417:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5694:197;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4505:106;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6453:286;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4354:91;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7134:234;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4669:125;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3628:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7855:427;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4990:189;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5237:149;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3417:98;3471:13;3503:5;3496:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3417:98;:::o;5694:197::-;5777:4;5793:13;5809:12;:10;:12::i;:::-;5793:28;;5831:32;5840:5;5847:7;5856:6;5831:8;:32::i;:::-;5880:4;5873:11;;;5694:197;;;;:::o;4505:106::-;4566:7;4592:12;;4585:19;;4505:106;:::o;6453:286::-;6580:4;6596:15;6614:12;:10;:12::i;:::-;6596:30;;6636:38;6652:4;6658:7;6667:6;6636:15;:38::i;:::-;6684:27;6694:4;6700:2;6704:6;6684:9;:27::i;:::-;6728:4;6721:11;;;6453:286;;;;;:::o;4354:91::-;4412:5;4436:2;4429:9;;4354:91;:::o;7134:234::-;7222:4;7238:13;7254:12;:10;:12::i;:::-;7238:28;;7276:64;7285:5;7292:7;7329:10;7301:25;7311:5;7318:7;7301:9;:25::i;:::-;:38;;;;:::i;:::-;7276:8;:64::i;:::-;7357:4;7350:11;;;7134:234;;;;:::o;4669:125::-;4743:7;4769:9;:18;4779:7;4769:18;;;;;;;;;;;;;;;;4762:25;;4669:125;;;:::o;3628:102::-;3684:13;3716:7;3709:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3628:102;:::o;7855:427::-;7948:4;7964:13;7980:12;:10;:12::i;:::-;7964:28;;8002:24;8029:25;8039:5;8046:7;8029:9;:25::i;:::-;8002:52;;8092:15;8072:16;:35;;8064:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;8183:60;8192:5;8199:7;8227:15;8208:16;:34;8183:8;:60::i;:::-;8271:4;8264:11;;;;7855:427;;;;:::o;4990:189::-;5069:4;5085:13;5101:12;:10;:12::i;:::-;5085:28;;5123;5133:5;5140:2;5144:6;5123:9;:28::i;:::-;5168:4;5161:11;;;4990:189;;;;:::o;5237:149::-;5326:7;5352:11;:18;5364:5;5352:18;;;;;;;;;;;;;;;:27;5371:7;5352:27;;;;;;;;;;;;;;;;5345:34;;5237:149;;;;:::o;1903:96:5:-;1956:7;1982:10;1975:17;;1903:96;:::o;11767:370:0:-;11915:1;11898:19;;:5;:19;;;11890:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11995:1;11976:21;;:7;:21;;;11968:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;12077:6;12047:11;:18;12059:5;12047:18;;;;;;;;;;;;;;;:27;12066:7;12047:27;;;;;;;;;;;;;;;:36;;;;12114:7;12098:32;;12107:5;12098:32;;;12123:6;12098:32;;;;;;:::i;:::-;;;;;;;;11767:370;;;:::o;12418:441::-;12548:24;12575:25;12585:5;12592:7;12575:9;:25::i;:::-;12548:52;;12634:17;12614:16;:37;12610:243;;12695:6;12675:16;:26;;12667:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;12777:51;12786:5;12793:7;12821:6;12802:16;:25;12777:8;:51::i;:::-;12610:243;12538:321;12418:441;;;:::o;8736:818::-;8878:1;8862:18;;:4;:18;;;8854:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;8954:1;8940:16;;:2;:16;;;8932:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;9007:38;9028:4;9034:2;9038:6;9007:20;:38::i;:::-;9056:19;9078:9;:15;9088:4;9078:15;;;;;;;;;;;;;;;;9056:37;;9126:6;9111:11;:21;;9103:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;9241:6;9227:11;:20;9209:9;:15;9219:4;9209:15;;;;;;;;;;;;;;;:38;;;;9441:6;9424:9;:13;9434:2;9424:13;;;;;;;;;;;;;;;;:23;;;;;;;;;;;9488:2;9473:26;;9482:4;9473:26;;;9492:6;9473:26;;;;;;:::i;:::-;;;;;;;;9510:37;9530:4;9536:2;9540:6;9510:19;:37::i;:::-;8844:710;8736:818;;;:::o;13443:121::-;;;;:::o;14152:120::-;;;;:::o;7:99:11:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:139::-;376:6;371:3;366;360:23;417:1;408:6;403:3;399:16;392:27;287:139;;;:::o;432:102::-;473:6;524:2;520:7;515:2;508:5;504:14;500:28;490:38;;432:102;;;:::o;540:377::-;628:3;656:39;689:5;656:39;:::i;:::-;711:71;775:6;770:3;711:71;:::i;:::-;704:78;;791:65;849:6;844:3;837:4;830:5;826:16;791:65;:::i;:::-;881:29;903:6;881:29;:::i;:::-;876:3;872:39;865:46;;632:285;540:377;;;;:::o;923:313::-;1036:4;1074:2;1063:9;1059:18;1051:26;;1123:9;1117:4;1113:20;1109:1;1098:9;1094:17;1087:47;1151:78;1224:4;1215:6;1151:78;:::i;:::-;1143:86;;923:313;;;;:::o;1323:117::-;1432:1;1429;1422:12;1569:126;1606:7;1646:42;1639:5;1635:54;1624:65;;1569:126;;;:::o;1701:96::-;1738:7;1767:24;1785:5;1767:24;:::i;:::-;1756:35;;1701:96;;;:::o;1803:122::-;1876:24;1894:5;1876:24;:::i;:::-;1869:5;1866:35;1856:63;;1915:1;1912;1905:12;1856:63;1803:122;:::o;1931:139::-;1977:5;2015:6;2002:20;1993:29;;2031:33;2058:5;2031:33;:::i;:::-;1931:139;;;;:::o;2076:77::-;2113:7;2142:5;2131:16;;2076:77;;;:::o;2159:122::-;2232:24;2250:5;2232:24;:::i;:::-;2225:5;2222:35;2212:63;;2271:1;2268;2261:12;2212:63;2159:122;:::o;2287:139::-;2333:5;2371:6;2358:20;2349:29;;2387:33;2414:5;2387:33;:::i;:::-;2287:139;;;;:::o;2432:474::-;2500:6;2508;2557:2;2545:9;2536:7;2532:23;2528:32;2525:119;;;2563:79;;:::i;:::-;2525:119;2683:1;2708:53;2753:7;2744:6;2733:9;2729:22;2708:53;:::i;:::-;2698:63;;2654:117;2810:2;2836:53;2881:7;2872:6;2861:9;2857:22;2836:53;:::i;:::-;2826:63;;2781:118;2432:474;;;;;:::o;2912:90::-;2946:7;2989:5;2982:13;2975:21;2964:32;;2912:90;;;:::o;3008:109::-;3089:21;3104:5;3089:21;:::i;:::-;3084:3;3077:34;3008:109;;:::o;3123:210::-;3210:4;3248:2;3237:9;3233:18;3225:26;;3261:65;3323:1;3312:9;3308:17;3299:6;3261:65;:::i;:::-;3123:210;;;;:::o;3339:118::-;3426:24;3444:5;3426:24;:::i;:::-;3421:3;3414:37;3339:118;;:::o;3463:222::-;3556:4;3594:2;3583:9;3579:18;3571:26;;3607:71;3675:1;3664:9;3660:17;3651:6;3607:71;:::i;:::-;3463:222;;;;:::o;3691:619::-;3768:6;3776;3784;3833:2;3821:9;3812:7;3808:23;3804:32;3801:119;;;3839:79;;:::i;:::-;3801:119;3959:1;3984:53;4029:7;4020:6;4009:9;4005:22;3984:53;:::i;:::-;3974:63;;3930:117;4086:2;4112:53;4157:7;4148:6;4137:9;4133:22;4112:53;:::i;:::-;4102:63;;4057:118;4214:2;4240:53;4285:7;4276:6;4265:9;4261:22;4240:53;:::i;:::-;4230:63;;4185:118;3691:619;;;;;:::o;4316:86::-;4351:7;4391:4;4384:5;4380:16;4369:27;;4316:86;;;:::o;4408:112::-;4491:22;4507:5;4491:22;:::i;:::-;4486:3;4479:35;4408:112;;:::o;4526:214::-;4615:4;4653:2;4642:9;4638:18;4630:26;;4666:67;4730:1;4719:9;4715:17;4706:6;4666:67;:::i;:::-;4526:214;;;;:::o;4746:329::-;4805:6;4854:2;4842:9;4833:7;4829:23;4825:32;4822:119;;;4860:79;;:::i;:::-;4822:119;4980:1;5005:53;5050:7;5041:6;5030:9;5026:22;5005:53;:::i;:::-;4995:63;;4951:117;4746:329;;;;:::o;5081:474::-;5149:6;5157;5206:2;5194:9;5185:7;5181:23;5177:32;5174:119;;;5212:79;;:::i;:::-;5174:119;5332:1;5357:53;5402:7;5393:6;5382:9;5378:22;5357:53;:::i;:::-;5347:63;;5303:117;5459:2;5485:53;5530:7;5521:6;5510:9;5506:22;5485:53;:::i;:::-;5475:63;;5430:118;5081:474;;;;;:::o;5561:180::-;5609:77;5606:1;5599:88;5706:4;5703:1;5696:15;5730:4;5727:1;5720:15;5747:320;5791:6;5828:1;5822:4;5818:12;5808:22;;5875:1;5869:4;5865:12;5896:18;5886:81;;5952:4;5944:6;5940:17;5930:27;;5886:81;6014:2;6006:6;6003:14;5983:18;5980:38;5977:84;;6033:18;;:::i;:::-;5977:84;5798:269;5747:320;;;:::o;6073:180::-;6121:77;6118:1;6111:88;6218:4;6215:1;6208:15;6242:4;6239:1;6232:15;6259:191;6299:3;6318:20;6336:1;6318:20;:::i;:::-;6313:25;;6352:20;6370:1;6352:20;:::i;:::-;6347:25;;6395:1;6392;6388:9;6381:16;;6416:3;6413:1;6410:10;6407:36;;;6423:18;;:::i;:::-;6407:36;6259:191;;;;:::o;6456:224::-;6596:34;6592:1;6584:6;6580:14;6573:58;6665:7;6660:2;6652:6;6648:15;6641:32;6456:224;:::o;6686:366::-;6828:3;6849:67;6913:2;6908:3;6849:67;:::i;:::-;6842:74;;6925:93;7014:3;6925:93;:::i;:::-;7043:2;7038:3;7034:12;7027:19;;6686:366;;;:::o;7058:419::-;7224:4;7262:2;7251:9;7247:18;7239:26;;7311:9;7305:4;7301:20;7297:1;7286:9;7282:17;7275:47;7339:131;7465:4;7339:131;:::i;:::-;7331:139;;7058:419;;;:::o;7483:223::-;7623:34;7619:1;7611:6;7607:14;7600:58;7692:6;7687:2;7679:6;7675:15;7668:31;7483:223;:::o;7712:366::-;7854:3;7875:67;7939:2;7934:3;7875:67;:::i;:::-;7868:74;;7951:93;8040:3;7951:93;:::i;:::-;8069:2;8064:3;8060:12;8053:19;;7712:366;;;:::o;8084:419::-;8250:4;8288:2;8277:9;8273:18;8265:26;;8337:9;8331:4;8327:20;8323:1;8312:9;8308:17;8301:47;8365:131;8491:4;8365:131;:::i;:::-;8357:139;;8084:419;;;:::o;8509:221::-;8649:34;8645:1;8637:6;8633:14;8626:58;8718:4;8713:2;8705:6;8701:15;8694:29;8509:221;:::o;8736:366::-;8878:3;8899:67;8963:2;8958:3;8899:67;:::i;:::-;8892:74;;8975:93;9064:3;8975:93;:::i;:::-;9093:2;9088:3;9084:12;9077:19;;8736:366;;;:::o;9108:419::-;9274:4;9312:2;9301:9;9297:18;9289:26;;9361:9;9355:4;9351:20;9347:1;9336:9;9332:17;9325:47;9389:131;9515:4;9389:131;:::i;:::-;9381:139;;9108:419;;;:::o;9533:179::-;9673:31;9669:1;9661:6;9657:14;9650:55;9533:179;:::o;9718:366::-;9860:3;9881:67;9945:2;9940:3;9881:67;:::i;:::-;9874:74;;9957:93;10046:3;9957:93;:::i;:::-;10075:2;10070:3;10066:12;10059:19;;9718:366;;;:::o;10090:419::-;10256:4;10294:2;10283:9;10279:18;10271:26;;10343:9;10337:4;10333:20;10329:1;10318:9;10314:17;10307:47;10371:131;10497:4;10371:131;:::i;:::-;10363:139;;10090:419;;;:::o;10515:224::-;10655:34;10651:1;10643:6;10639:14;10632:58;10724:7;10719:2;10711:6;10707:15;10700:32;10515:224;:::o;10745:366::-;10887:3;10908:67;10972:2;10967:3;10908:67;:::i;:::-;10901:74;;10984:93;11073:3;10984:93;:::i;:::-;11102:2;11097:3;11093:12;11086:19;;10745:366;;;:::o;11117:419::-;11283:4;11321:2;11310:9;11306:18;11298:26;;11370:9;11364:4;11360:20;11356:1;11345:9;11341:17;11334:47;11398:131;11524:4;11398:131;:::i;:::-;11390:139;;11117:419;;;:::o;11542:222::-;11682:34;11678:1;11670:6;11666:14;11659:58;11751:5;11746:2;11738:6;11734:15;11727:30;11542:222;:::o;11770:366::-;11912:3;11933:67;11997:2;11992:3;11933:67;:::i;:::-;11926:74;;12009:93;12098:3;12009:93;:::i;:::-;12127:2;12122:3;12118:12;12111:19;;11770:366;;;:::o;12142:419::-;12308:4;12346:2;12335:9;12331:18;12323:26;;12395:9;12389:4;12385:20;12381:1;12370:9;12366:17;12359:47;12423:131;12549:4;12423:131;:::i;:::-;12415:139;;12142:419;;;:::o;12567:225::-;12707:34;12703:1;12695:6;12691:14;12684:58;12776:8;12771:2;12763:6;12759:15;12752:33;12567:225;:::o;12798:366::-;12940:3;12961:67;13025:2;13020:3;12961:67;:::i;:::-;12954:74;;13037:93;13126:3;13037:93;:::i;:::-;13155:2;13150:3;13146:12;13139:19;;12798:366;;;:::o;13170:419::-;13336:4;13374:2;13363:9;13359:18;13351:26;;13423:9;13417:4;13413:20;13409:1;13398:9;13394:17;13387:47;13451:131;13577:4;13451:131;:::i;:::-;13443:139;;13170:419;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "904200",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "2851",
								"decimals()": "427",
								"decreaseAllowance(address,uint256)": "infinite",
								"increaseAllowance(address,uint256)": "infinite",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2477",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfer(address,address,uint256)": "15",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "15",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 2664,
									"end": 14274,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 2664,
									"end": 14274,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2664,
									"end": 14274,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "CODESIZE",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 3239,
									"end": 3352,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "tag",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 3313,
									"end": 3318,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3305,
									"end": 3310,
									"name": "PUSH",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 3305,
									"end": 3318,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3305,
									"end": 3318,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3305,
									"end": 3318,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 3305,
									"end": 3318,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3305,
									"end": 3318,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3305,
									"end": 3318,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 3305,
									"end": 3318,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 3305,
									"end": 3318,
									"name": "tag",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 3305,
									"end": 3318,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 3305,
									"end": 3318,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 3338,
									"end": 3345,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3328,
									"end": 3335,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 3328,
									"end": 3345,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3328,
									"end": 3345,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3328,
									"end": 3345,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 3328,
									"end": 3345,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3328,
									"end": 3345,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3328,
									"end": 3345,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 3328,
									"end": 3345,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 3328,
									"end": 3345,
									"name": "tag",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 3328,
									"end": 3345,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 3328,
									"end": 3345,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 3239,
									"end": 3352,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2664,
									"end": 14274,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 2664,
									"end": 14274,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 7,
									"end": 82,
									"name": "tag",
									"source": 11,
									"value": "10"
								},
								{
									"begin": 7,
									"end": 82,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 40,
									"end": 46,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 73,
									"end": 75,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 67,
									"end": 76,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 57,
									"end": 76,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 57,
									"end": 76,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 7,
									"end": 82,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 7,
									"end": 82,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 11,
									"value": "11"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 211,
									"end": 328,
									"name": "tag",
									"source": 11,
									"value": "12"
								},
								{
									"begin": 211,
									"end": 328,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 320,
									"end": 321,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 317,
									"end": 318,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 310,
									"end": 322,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 334,
									"end": 451,
									"name": "tag",
									"source": 11,
									"value": "13"
								},
								{
									"begin": 334,
									"end": 451,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 443,
									"end": 444,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 440,
									"end": 441,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 433,
									"end": 445,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 457,
									"end": 574,
									"name": "tag",
									"source": 11,
									"value": "14"
								},
								{
									"begin": 457,
									"end": 574,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 566,
									"end": 567,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 563,
									"end": 564,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 556,
									"end": 568,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 580,
									"end": 682,
									"name": "tag",
									"source": 11,
									"value": "15"
								},
								{
									"begin": 580,
									"end": 682,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 621,
									"end": 627,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 672,
									"end": 674,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 668,
									"end": 675,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 663,
									"end": 665,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 656,
									"end": 661,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 652,
									"end": 666,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 648,
									"end": 676,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 638,
									"end": 676,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 638,
									"end": 676,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 580,
									"end": 682,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 580,
									"end": 682,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 580,
									"end": 682,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 580,
									"end": 682,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 688,
									"end": 868,
									"name": "tag",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 688,
									"end": 868,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 736,
									"end": 813,
									"name": "PUSH",
									"source": 11,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 733,
									"end": 734,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 726,
									"end": 814,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 833,
									"end": 837,
									"name": "PUSH",
									"source": 11,
									"value": "41"
								},
								{
									"begin": 830,
									"end": 831,
									"name": "PUSH",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 823,
									"end": 838,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 857,
									"end": 861,
									"name": "PUSH",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 854,
									"end": 855,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 847,
									"end": 862,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 874,
									"end": 1155,
									"name": "tag",
									"source": 11,
									"value": "17"
								},
								{
									"begin": 874,
									"end": 1155,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 957,
									"end": 984,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "51"
								},
								{
									"begin": 979,
									"end": 983,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 957,
									"end": 984,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "15"
								},
								{
									"begin": 957,
									"end": 984,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 957,
									"end": 984,
									"name": "tag",
									"source": 11,
									"value": "51"
								},
								{
									"begin": 957,
									"end": 984,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 949,
									"end": 955,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 945,
									"end": 985,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 1087,
									"end": 1093,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1075,
									"end": 1085,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1072,
									"end": 1094,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 1051,
									"end": 1069,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1039,
									"end": 1049,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1036,
									"end": 1070,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 1033,
									"end": 1095,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 1030,
									"end": 1118,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 1030,
									"end": 1118,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "52"
								},
								{
									"begin": 1030,
									"end": 1118,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 1098,
									"end": 1116,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "53"
								},
								{
									"begin": 1098,
									"end": 1116,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 1098,
									"end": 1116,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 1098,
									"end": 1116,
									"name": "tag",
									"source": 11,
									"value": "53"
								},
								{
									"begin": 1098,
									"end": 1116,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1030,
									"end": 1118,
									"name": "tag",
									"source": 11,
									"value": "52"
								},
								{
									"begin": 1030,
									"end": 1118,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1138,
									"end": 1148,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1134,
									"end": 1136,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 1127,
									"end": 1149,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 917,
									"end": 1155,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 874,
									"end": 1155,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 874,
									"end": 1155,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 874,
									"end": 1155,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 1161,
									"end": 1290,
									"name": "tag",
									"source": 11,
									"value": "18"
								},
								{
									"begin": 1161,
									"end": 1290,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1195,
									"end": 1201,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1222,
									"end": 1242,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "55"
								},
								{
									"begin": 1222,
									"end": 1242,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "10"
								},
								{
									"begin": 1222,
									"end": 1242,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 1222,
									"end": 1242,
									"name": "tag",
									"source": 11,
									"value": "55"
								},
								{
									"begin": 1222,
									"end": 1242,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1212,
									"end": 1242,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1212,
									"end": 1242,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1251,
									"end": 1284,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "56"
								},
								{
									"begin": 1279,
									"end": 1283,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1271,
									"end": 1277,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1251,
									"end": 1284,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "17"
								},
								{
									"begin": 1251,
									"end": 1284,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 1251,
									"end": 1284,
									"name": "tag",
									"source": 11,
									"value": "56"
								},
								{
									"begin": 1251,
									"end": 1284,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1161,
									"end": 1290,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 1161,
									"end": 1290,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1161,
									"end": 1290,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1161,
									"end": 1290,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 1296,
									"end": 1604,
									"name": "tag",
									"source": 11,
									"value": "19"
								},
								{
									"begin": 1296,
									"end": 1604,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1358,
									"end": 1362,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1448,
									"end": 1466,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1440,
									"end": 1446,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1437,
									"end": 1467,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 1434,
									"end": 1490,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 1434,
									"end": 1490,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "58"
								},
								{
									"begin": 1434,
									"end": 1490,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 1470,
									"end": 1488,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "59"
								},
								{
									"begin": 1470,
									"end": 1488,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 1470,
									"end": 1488,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 1470,
									"end": 1488,
									"name": "tag",
									"source": 11,
									"value": "59"
								},
								{
									"begin": 1470,
									"end": 1488,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1434,
									"end": 1490,
									"name": "tag",
									"source": 11,
									"value": "58"
								},
								{
									"begin": 1434,
									"end": 1490,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1508,
									"end": 1537,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "60"
								},
								{
									"begin": 1530,
									"end": 1536,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1508,
									"end": 1537,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "15"
								},
								{
									"begin": 1508,
									"end": 1537,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 1508,
									"end": 1537,
									"name": "tag",
									"source": 11,
									"value": "60"
								},
								{
									"begin": 1508,
									"end": 1537,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1500,
									"end": 1537,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1500,
									"end": 1537,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1592,
									"end": 1596,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 1586,
									"end": 1590,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1582,
									"end": 1597,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 1574,
									"end": 1597,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1574,
									"end": 1597,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1296,
									"end": 1604,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 1296,
									"end": 1604,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1296,
									"end": 1604,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1296,
									"end": 1604,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 1610,
									"end": 1749,
									"name": "tag",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 1610,
									"end": 1749,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1699,
									"end": 1705,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1694,
									"end": 1697,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1689,
									"end": 1692,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 1683,
									"end": 1706,
									"name": "MCOPY",
									"source": 11
								},
								{
									"begin": 1740,
									"end": 1741,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1731,
									"end": 1737,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 1726,
									"end": 1729,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 1722,
									"end": 1738,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 1715,
									"end": 1742,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1610,
									"end": 1749,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1610,
									"end": 1749,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1610,
									"end": 1749,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1610,
									"end": 1749,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 1755,
									"end": 2189,
									"name": "tag",
									"source": 11,
									"value": "21"
								},
								{
									"begin": 1755,
									"end": 2189,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1844,
									"end": 1849,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1869,
									"end": 1935,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "63"
								},
								{
									"begin": 1885,
									"end": 1934,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "64"
								},
								{
									"begin": 1927,
									"end": 1933,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 1885,
									"end": 1934,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "19"
								},
								{
									"begin": 1885,
									"end": 1934,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 1885,
									"end": 1934,
									"name": "tag",
									"source": 11,
									"value": "64"
								},
								{
									"begin": 1885,
									"end": 1934,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1869,
									"end": 1935,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "18"
								},
								{
									"begin": 1869,
									"end": 1935,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 1869,
									"end": 1935,
									"name": "tag",
									"source": 11,
									"value": "63"
								},
								{
									"begin": 1869,
									"end": 1935,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1860,
									"end": 1935,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1860,
									"end": 1935,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1958,
									"end": 1964,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1951,
									"end": 1956,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1944,
									"end": 1965,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1996,
									"end": 2000,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 1989,
									"end": 1994,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1985,
									"end": 2001,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 2034,
									"end": 2037,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 2025,
									"end": 2031,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 2020,
									"end": 2023,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 2016,
									"end": 2032,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 2013,
									"end": 2038,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 2010,
									"end": 2122,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 2010,
									"end": 2122,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "65"
								},
								{
									"begin": 2010,
									"end": 2122,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 2041,
									"end": 2120,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "66"
								},
								{
									"begin": 2041,
									"end": 2120,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "14"
								},
								{
									"begin": 2041,
									"end": 2120,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 2041,
									"end": 2120,
									"name": "tag",
									"source": 11,
									"value": "66"
								},
								{
									"begin": 2041,
									"end": 2120,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 2010,
									"end": 2122,
									"name": "tag",
									"source": 11,
									"value": "65"
								},
								{
									"begin": 2010,
									"end": 2122,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 2131,
									"end": 2183,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "67"
								},
								{
									"begin": 2176,
									"end": 2182,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 2171,
									"end": 2174,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 2166,
									"end": 2169,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 2131,
									"end": 2183,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 2131,
									"end": 2183,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 2131,
									"end": 2183,
									"name": "tag",
									"source": 11,
									"value": "67"
								},
								{
									"begin": 2131,
									"end": 2183,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1850,
									"end": 2189,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1755,
									"end": 2189,
									"name": "SWAP4",
									"source": 11
								},
								{
									"begin": 1755,
									"end": 2189,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 1755,
									"end": 2189,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1755,
									"end": 2189,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1755,
									"end": 2189,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1755,
									"end": 2189,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 2209,
									"end": 2564,
									"name": "tag",
									"source": 11,
									"value": "22"
								},
								{
									"begin": 2209,
									"end": 2564,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 2276,
									"end": 2281,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 2325,
									"end": 2328,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 2318,
									"end": 2322,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 2310,
									"end": 2316,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 2306,
									"end": 2323,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 2302,
									"end": 2329,
									"name": "SLT",
									"source": 11
								},
								{
									"begin": 2292,
									"end": 2414,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "69"
								},
								{
									"begin": 2292,
									"end": 2414,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 2333,
									"end": 2412,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "70"
								},
								{
									"begin": 2333,
									"end": 2412,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "13"
								},
								{
									"begin": 2333,
									"end": 2412,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 2333,
									"end": 2412,
									"name": "tag",
									"source": 11,
									"value": "70"
								},
								{
									"begin": 2333,
									"end": 2412,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 2292,
									"end": 2414,
									"name": "tag",
									"source": 11,
									"value": "69"
								},
								{
									"begin": 2292,
									"end": 2414,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 2443,
									"end": 2449,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 2437,
									"end": 2450,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 2468,
									"end": 2558,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "71"
								},
								{
									"begin": 2554,
									"end": 2557,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 2546,
									"end": 2552,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 2539,
									"end": 2543,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 2531,
									"end": 2537,
									"name": "DUP7",
									"source": 11
								},
								{
									"begin": 2527,
									"end": 2544,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 2468,
									"end": 2558,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "21"
								},
								{
									"begin": 2468,
									"end": 2558,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 2468,
									"end": 2558,
									"name": "tag",
									"source": 11,
									"value": "71"
								},
								{
									"begin": 2468,
									"end": 2558,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 2459,
									"end": 2558,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 2459,
									"end": 2558,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 2282,
									"end": 2564,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 2209,
									"end": 2564,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 2209,
									"end": 2564,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 2209,
									"end": 2564,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 2209,
									"end": 2564,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 2209,
									"end": 2564,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 2570,
									"end": 3423,
									"name": "tag",
									"source": 11,
									"value": "3"
								},
								{
									"begin": 2570,
									"end": 3423,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 2669,
									"end": 2675,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 2677,
									"end": 2683,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 2726,
									"end": 2728,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 2714,
									"end": 2723,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 2705,
									"end": 2712,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 2701,
									"end": 2724,
									"name": "SUB",
									"source": 11
								},
								{
									"begin": 2697,
									"end": 2729,
									"name": "SLT",
									"source": 11
								},
								{
									"begin": 2694,
									"end": 2813,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 2694,
									"end": 2813,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 2694,
									"end": 2813,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 2732,
									"end": 2811,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "74"
								},
								{
									"begin": 2732,
									"end": 2811,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "11"
								},
								{
									"begin": 2732,
									"end": 2811,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 2732,
									"end": 2811,
									"name": "tag",
									"source": 11,
									"value": "74"
								},
								{
									"begin": 2732,
									"end": 2811,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 2694,
									"end": 2813,
									"name": "tag",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 2694,
									"end": 2813,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 2873,
									"end": 2874,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 2862,
									"end": 2871,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 2858,
									"end": 2875,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 2852,
									"end": 2876,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 2903,
									"end": 2921,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2895,
									"end": 2901,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 2892,
									"end": 2922,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 2889,
									"end": 3006,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 2889,
									"end": 3006,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "75"
								},
								{
									"begin": 2889,
									"end": 3006,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 2925,
									"end": 3004,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "76"
								},
								{
									"begin": 2925,
									"end": 3004,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "12"
								},
								{
									"begin": 2925,
									"end": 3004,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 2925,
									"end": 3004,
									"name": "tag",
									"source": 11,
									"value": "76"
								},
								{
									"begin": 2925,
									"end": 3004,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 2889,
									"end": 3006,
									"name": "tag",
									"source": 11,
									"value": "75"
								},
								{
									"begin": 2889,
									"end": 3006,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3030,
									"end": 3104,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "77"
								},
								{
									"begin": 3096,
									"end": 3103,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 3087,
									"end": 3093,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 3076,
									"end": 3085,
									"name": "DUP7",
									"source": 11
								},
								{
									"begin": 3072,
									"end": 3094,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 3030,
									"end": 3104,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "22"
								},
								{
									"begin": 3030,
									"end": 3104,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 3030,
									"end": 3104,
									"name": "tag",
									"source": 11,
									"value": "77"
								},
								{
									"begin": 3030,
									"end": 3104,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3020,
									"end": 3104,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 3020,
									"end": 3104,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 2823,
									"end": 3114,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 3174,
									"end": 3176,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 3163,
									"end": 3172,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 3159,
									"end": 3177,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 3153,
									"end": 3178,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 3205,
									"end": 3223,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3197,
									"end": 3203,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 3194,
									"end": 3224,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 3191,
									"end": 3308,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 3191,
									"end": 3308,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "78"
								},
								{
									"begin": 3191,
									"end": 3308,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 3227,
									"end": 3306,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "79"
								},
								{
									"begin": 3227,
									"end": 3306,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "12"
								},
								{
									"begin": 3227,
									"end": 3306,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 3227,
									"end": 3306,
									"name": "tag",
									"source": 11,
									"value": "79"
								},
								{
									"begin": 3227,
									"end": 3306,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3191,
									"end": 3308,
									"name": "tag",
									"source": 11,
									"value": "78"
								},
								{
									"begin": 3191,
									"end": 3308,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3332,
									"end": 3406,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "80"
								},
								{
									"begin": 3398,
									"end": 3405,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 3389,
									"end": 3395,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 3378,
									"end": 3387,
									"name": "DUP7",
									"source": 11
								},
								{
									"begin": 3374,
									"end": 3396,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 3332,
									"end": 3406,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "22"
								},
								{
									"begin": 3332,
									"end": 3406,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 3332,
									"end": 3406,
									"name": "tag",
									"source": 11,
									"value": "80"
								},
								{
									"begin": 3332,
									"end": 3406,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3322,
									"end": 3406,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 3322,
									"end": 3406,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 3124,
									"end": 3416,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 2570,
									"end": 3423,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 2570,
									"end": 3423,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 2570,
									"end": 3423,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 2570,
									"end": 3423,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 2570,
									"end": 3423,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 2570,
									"end": 3423,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 3429,
									"end": 3528,
									"name": "tag",
									"source": 11,
									"value": "23"
								},
								{
									"begin": 3429,
									"end": 3528,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3481,
									"end": 3487,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 3515,
									"end": 3520,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 3509,
									"end": 3521,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 3499,
									"end": 3521,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 3499,
									"end": 3521,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 3429,
									"end": 3528,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 3429,
									"end": 3528,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 3429,
									"end": 3528,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 3429,
									"end": 3528,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 3534,
									"end": 3714,
									"name": "tag",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 3534,
									"end": 3714,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3582,
									"end": 3659,
									"name": "PUSH",
									"source": 11,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3579,
									"end": 3580,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 3572,
									"end": 3660,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 3679,
									"end": 3683,
									"name": "PUSH",
									"source": 11,
									"value": "22"
								},
								{
									"begin": 3676,
									"end": 3677,
									"name": "PUSH",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 3669,
									"end": 3684,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 3703,
									"end": 3707,
									"name": "PUSH",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 3700,
									"end": 3701,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 3693,
									"end": 3708,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 3720,
									"end": 4040,
									"name": "tag",
									"source": 11,
									"value": "25"
								},
								{
									"begin": 3720,
									"end": 4040,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3764,
									"end": 3770,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 3801,
									"end": 3802,
									"name": "PUSH",
									"source": 11,
									"value": "2"
								},
								{
									"begin": 3795,
									"end": 3799,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 3791,
									"end": 3803,
									"name": "DIV",
									"source": 11
								},
								{
									"begin": 3781,
									"end": 3803,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 3781,
									"end": 3803,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 3848,
									"end": 3849,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 3842,
									"end": 3846,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 3838,
									"end": 3850,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 3869,
									"end": 3887,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 3859,
									"end": 3940,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "84"
								},
								{
									"begin": 3859,
									"end": 3940,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 3925,
									"end": 3929,
									"name": "PUSH",
									"source": 11,
									"value": "7F"
								},
								{
									"begin": 3917,
									"end": 3923,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 3913,
									"end": 3930,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 3903,
									"end": 3930,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 3903,
									"end": 3930,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 3859,
									"end": 3940,
									"name": "tag",
									"source": 11,
									"value": "84"
								},
								{
									"begin": 3859,
									"end": 3940,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3987,
									"end": 3989,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 3979,
									"end": 3985,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 3976,
									"end": 3990,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 3956,
									"end": 3974,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 3953,
									"end": 3991,
									"name": "SUB",
									"source": 11
								},
								{
									"begin": 3950,
									"end": 4034,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "85"
								},
								{
									"begin": 3950,
									"end": 4034,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 4006,
									"end": 4024,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "86"
								},
								{
									"begin": 4006,
									"end": 4024,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 4006,
									"end": 4024,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 4006,
									"end": 4024,
									"name": "tag",
									"source": 11,
									"value": "86"
								},
								{
									"begin": 4006,
									"end": 4024,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3950,
									"end": 4034,
									"name": "tag",
									"source": 11,
									"value": "85"
								},
								{
									"begin": 3950,
									"end": 4034,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3771,
									"end": 4040,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 3720,
									"end": 4040,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 3720,
									"end": 4040,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 3720,
									"end": 4040,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 3720,
									"end": 4040,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 4046,
									"end": 4187,
									"name": "tag",
									"source": 11,
									"value": "26"
								},
								{
									"begin": 4046,
									"end": 4187,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 4095,
									"end": 4099,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 4118,
									"end": 4121,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 4110,
									"end": 4121,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 4110,
									"end": 4121,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4141,
									"end": 4144,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 4138,
									"end": 4139,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 4131,
									"end": 4145,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 4175,
									"end": 4179,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 4172,
									"end": 4173,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 4162,
									"end": 4180,
									"name": "KECCAK256",
									"source": 11
								},
								{
									"begin": 4154,
									"end": 4180,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 4154,
									"end": 4180,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4046,
									"end": 4187,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 4046,
									"end": 4187,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 4046,
									"end": 4187,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4046,
									"end": 4187,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 4193,
									"end": 4286,
									"name": "tag",
									"source": 11,
									"value": "27"
								},
								{
									"begin": 4193,
									"end": 4286,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 4230,
									"end": 4236,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 4277,
									"end": 4279,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 4272,
									"end": 4274,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 4265,
									"end": 4270,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 4261,
									"end": 4275,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 4257,
									"end": 4280,
									"name": "DIV",
									"source": 11
								},
								{
									"begin": 4247,
									"end": 4280,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 4247,
									"end": 4280,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4193,
									"end": 4286,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 4193,
									"end": 4286,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 4193,
									"end": 4286,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4193,
									"end": 4286,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 4292,
									"end": 4399,
									"name": "tag",
									"source": 11,
									"value": "28"
								},
								{
									"begin": 4292,
									"end": 4399,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 4336,
									"end": 4344,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 4386,
									"end": 4391,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 4380,
									"end": 4384,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 4376,
									"end": 4392,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": 4355,
									"end": 4392,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 4355,
									"end": 4392,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4292,
									"end": 4399,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 4292,
									"end": 4399,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 4292,
									"end": 4399,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4292,
									"end": 4399,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4292,
									"end": 4399,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 4405,
									"end": 4798,
									"name": "tag",
									"source": 11,
									"value": "29"
								},
								{
									"begin": 4405,
									"end": 4798,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 4474,
									"end": 4480,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 4524,
									"end": 4525,
									"name": "PUSH",
									"source": 11,
									"value": "8"
								},
								{
									"begin": 4512,
									"end": 4522,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 4508,
									"end": 4526,
									"name": "MUL",
									"source": 11
								},
								{
									"begin": 4547,
									"end": 4644,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "91"
								},
								{
									"begin": 4577,
									"end": 4643,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 4566,
									"end": 4575,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 4547,
									"end": 4644,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "28"
								},
								{
									"begin": 4547,
									"end": 4644,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 4547,
									"end": 4644,
									"name": "tag",
									"source": 11,
									"value": "91"
								},
								{
									"begin": 4547,
									"end": 4644,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 4665,
									"end": 4704,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "92"
								},
								{
									"begin": 4695,
									"end": 4703,
									"name": "DUP7",
									"source": 11
								},
								{
									"begin": 4684,
									"end": 4693,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 4665,
									"end": 4704,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "28"
								},
								{
									"begin": 4665,
									"end": 4704,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 4665,
									"end": 4704,
									"name": "tag",
									"source": 11,
									"value": "92"
								},
								{
									"begin": 4665,
									"end": 4704,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 4653,
									"end": 4704,
									"name": "SWAP6",
									"source": 11
								},
								{
									"begin": 4653,
									"end": 4704,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4737,
									"end": 4741,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 4733,
									"end": 4742,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 4726,
									"end": 4731,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 4722,
									"end": 4743,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 4713,
									"end": 4743,
									"name": "SWAP4",
									"source": 11
								},
								{
									"begin": 4713,
									"end": 4743,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4786,
									"end": 4790,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 4776,
									"end": 4784,
									"name": "DUP7",
									"source": 11
								},
								{
									"begin": 4772,
									"end": 4791,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 4765,
									"end": 4770,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 4762,
									"end": 4792,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 4752,
									"end": 4792,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 4752,
									"end": 4792,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4481,
									"end": 4798,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4481,
									"end": 4798,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4405,
									"end": 4798,
									"name": "SWAP4",
									"source": 11
								},
								{
									"begin": 4405,
									"end": 4798,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 4405,
									"end": 4798,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4405,
									"end": 4798,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4405,
									"end": 4798,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4405,
									"end": 4798,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 4804,
									"end": 4881,
									"name": "tag",
									"source": 11,
									"value": "30"
								},
								{
									"begin": 4804,
									"end": 4881,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 4841,
									"end": 4848,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 4870,
									"end": 4875,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 4859,
									"end": 4875,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 4859,
									"end": 4875,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4804,
									"end": 4881,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 4804,
									"end": 4881,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 4804,
									"end": 4881,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4804,
									"end": 4881,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 4887,
									"end": 4947,
									"name": "tag",
									"source": 11,
									"value": "31"
								},
								{
									"begin": 4887,
									"end": 4947,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 4915,
									"end": 4918,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 4936,
									"end": 4941,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 4929,
									"end": 4941,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 4929,
									"end": 4941,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4887,
									"end": 4947,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 4887,
									"end": 4947,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 4887,
									"end": 4947,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4887,
									"end": 4947,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 4953,
									"end": 5095,
									"name": "tag",
									"source": 11,
									"value": "32"
								},
								{
									"begin": 4953,
									"end": 5095,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 5003,
									"end": 5012,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 5036,
									"end": 5089,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "96"
								},
								{
									"begin": 5054,
									"end": 5088,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "97"
								},
								{
									"begin": 5063,
									"end": 5087,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "98"
								},
								{
									"begin": 5081,
									"end": 5086,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 5063,
									"end": 5087,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "30"
								},
								{
									"begin": 5063,
									"end": 5087,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 5063,
									"end": 5087,
									"name": "tag",
									"source": 11,
									"value": "98"
								},
								{
									"begin": 5063,
									"end": 5087,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 5054,
									"end": 5088,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "31"
								},
								{
									"begin": 5054,
									"end": 5088,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 5054,
									"end": 5088,
									"name": "tag",
									"source": 11,
									"value": "97"
								},
								{
									"begin": 5054,
									"end": 5088,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 5036,
									"end": 5089,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "30"
								},
								{
									"begin": 5036,
									"end": 5089,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 5036,
									"end": 5089,
									"name": "tag",
									"source": 11,
									"value": "96"
								},
								{
									"begin": 5036,
									"end": 5089,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 5023,
									"end": 5089,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 5023,
									"end": 5089,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4953,
									"end": 5095,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 4953,
									"end": 5095,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 4953,
									"end": 5095,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 4953,
									"end": 5095,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 5101,
									"end": 5176,
									"name": "tag",
									"source": 11,
									"value": "33"
								},
								{
									"begin": 5101,
									"end": 5176,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 5144,
									"end": 5147,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 5165,
									"end": 5170,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 5158,
									"end": 5170,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 5158,
									"end": 5170,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 5101,
									"end": 5176,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 5101,
									"end": 5176,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 5101,
									"end": 5176,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 5101,
									"end": 5176,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 5182,
									"end": 5451,
									"name": "tag",
									"source": 11,
									"value": "34"
								},
								{
									"begin": 5182,
									"end": 5451,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 5292,
									"end": 5331,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "101"
								},
								{
									"begin": 5323,
									"end": 5330,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 5292,
									"end": 5331,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "32"
								},
								{
									"begin": 5292,
									"end": 5331,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 5292,
									"end": 5331,
									"name": "tag",
									"source": 11,
									"value": "101"
								},
								{
									"begin": 5292,
									"end": 5331,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 5353,
									"end": 5444,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "102"
								},
								{
									"begin": 5402,
									"end": 5443,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "103"
								},
								{
									"begin": 5426,
									"end": 5442,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 5402,
									"end": 5443,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "33"
								},
								{
									"begin": 5402,
									"end": 5443,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 5402,
									"end": 5443,
									"name": "tag",
									"source": 11,
									"value": "103"
								},
								{
									"begin": 5402,
									"end": 5443,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 5394,
									"end": 5400,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 5387,
									"end": 5391,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 5381,
									"end": 5392,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": 5353,
									"end": 5444,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "29"
								},
								{
									"begin": 5353,
									"end": 5444,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 5353,
									"end": 5444,
									"name": "tag",
									"source": 11,
									"value": "102"
								},
								{
									"begin": 5353,
									"end": 5444,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 5347,
									"end": 5351,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 5340,
									"end": 5445,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 5258,
									"end": 5451,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 5182,
									"end": 5451,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 5182,
									"end": 5451,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 5182,
									"end": 5451,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 5182,
									"end": 5451,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 5457,
									"end": 5530,
									"name": "tag",
									"source": 11,
									"value": "35"
								},
								{
									"begin": 5457,
									"end": 5530,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 5502,
									"end": 5505,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 5457,
									"end": 5530,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 5457,
									"end": 5530,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 5536,
									"end": 5725,
									"name": "tag",
									"source": 11,
									"value": "36"
								},
								{
									"begin": 5536,
									"end": 5725,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 5613,
									"end": 5645,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "106"
								},
								{
									"begin": 5613,
									"end": 5645,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "35"
								},
								{
									"begin": 5613,
									"end": 5645,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 5613,
									"end": 5645,
									"name": "tag",
									"source": 11,
									"value": "106"
								},
								{
									"begin": 5613,
									"end": 5645,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 5654,
									"end": 5719,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "107"
								},
								{
									"begin": 5712,
									"end": 5718,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 5704,
									"end": 5710,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 5698,
									"end": 5702,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 5654,
									"end": 5719,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "34"
								},
								{
									"begin": 5654,
									"end": 5719,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 5654,
									"end": 5719,
									"name": "tag",
									"source": 11,
									"value": "107"
								},
								{
									"begin": 5654,
									"end": 5719,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 5589,
									"end": 5725,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 5536,
									"end": 5725,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 5536,
									"end": 5725,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 5536,
									"end": 5725,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 5731,
									"end": 5917,
									"name": "tag",
									"source": 11,
									"value": "37"
								},
								{
									"begin": 5731,
									"end": 5917,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 5791,
									"end": 5911,
									"name": "tag",
									"source": 11,
									"value": "109"
								},
								{
									"begin": 5791,
									"end": 5911,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 5808,
									"end": 5811,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 5801,
									"end": 5806,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 5798,
									"end": 5812,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 5791,
									"end": 5911,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 5791,
									"end": 5911,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "111"
								},
								{
									"begin": 5791,
									"end": 5911,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 5862,
									"end": 5901,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "112"
								},
								{
									"begin": 5899,
									"end": 5900,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 5892,
									"end": 5897,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 5862,
									"end": 5901,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "36"
								},
								{
									"begin": 5862,
									"end": 5901,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 5862,
									"end": 5901,
									"name": "tag",
									"source": 11,
									"value": "112"
								},
								{
									"begin": 5862,
									"end": 5901,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 5835,
									"end": 5836,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 5828,
									"end": 5833,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 5824,
									"end": 5837,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 5815,
									"end": 5837,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 5815,
									"end": 5837,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 5791,
									"end": 5911,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "109"
								},
								{
									"begin": 5791,
									"end": 5911,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 5791,
									"end": 5911,
									"name": "tag",
									"source": 11,
									"value": "111"
								},
								{
									"begin": 5791,
									"end": 5911,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 5731,
									"end": 5917,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 5731,
									"end": 5917,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 5731,
									"end": 5917,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 5923,
									"end": 6466,
									"name": "tag",
									"source": 11,
									"value": "38"
								},
								{
									"begin": 5923,
									"end": 6466,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 6024,
									"end": 6026,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 6019,
									"end": 6022,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 6016,
									"end": 6027,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 6013,
									"end": 6459,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 6013,
									"end": 6459,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "114"
								},
								{
									"begin": 6013,
									"end": 6459,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 6058,
									"end": 6096,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "115"
								},
								{
									"begin": 6090,
									"end": 6095,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 6058,
									"end": 6096,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "26"
								},
								{
									"begin": 6058,
									"end": 6096,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 6058,
									"end": 6096,
									"name": "tag",
									"source": 11,
									"value": "115"
								},
								{
									"begin": 6058,
									"end": 6096,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 6142,
									"end": 6171,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "116"
								},
								{
									"begin": 6160,
									"end": 6170,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 6142,
									"end": 6171,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "27"
								},
								{
									"begin": 6142,
									"end": 6171,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 6142,
									"end": 6171,
									"name": "tag",
									"source": 11,
									"value": "116"
								},
								{
									"begin": 6142,
									"end": 6171,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 6132,
									"end": 6140,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 6128,
									"end": 6172,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 6325,
									"end": 6327,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 6313,
									"end": 6323,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 6310,
									"end": 6328,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 6307,
									"end": 6356,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 6307,
									"end": 6356,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "117"
								},
								{
									"begin": 6307,
									"end": 6356,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 6346,
									"end": 6354,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 6331,
									"end": 6354,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 6331,
									"end": 6354,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 6307,
									"end": 6356,
									"name": "tag",
									"source": 11,
									"value": "117"
								},
								{
									"begin": 6307,
									"end": 6356,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 6369,
									"end": 6449,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "118"
								},
								{
									"begin": 6425,
									"end": 6447,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "119"
								},
								{
									"begin": 6443,
									"end": 6446,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 6425,
									"end": 6447,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "27"
								},
								{
									"begin": 6425,
									"end": 6447,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 6425,
									"end": 6447,
									"name": "tag",
									"source": 11,
									"value": "119"
								},
								{
									"begin": 6425,
									"end": 6447,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 6415,
									"end": 6423,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 6411,
									"end": 6448,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 6398,
									"end": 6409,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 6369,
									"end": 6449,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "37"
								},
								{
									"begin": 6369,
									"end": 6449,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 6369,
									"end": 6449,
									"name": "tag",
									"source": 11,
									"value": "118"
								},
								{
									"begin": 6369,
									"end": 6449,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 6028,
									"end": 6459,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 6028,
									"end": 6459,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 6013,
									"end": 6459,
									"name": "tag",
									"source": 11,
									"value": "114"
								},
								{
									"begin": 6013,
									"end": 6459,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 5923,
									"end": 6466,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 5923,
									"end": 6466,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 5923,
									"end": 6466,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 5923,
									"end": 6466,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 6472,
									"end": 6589,
									"name": "tag",
									"source": 11,
									"value": "39"
								},
								{
									"begin": 6472,
									"end": 6589,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 6526,
									"end": 6534,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 6576,
									"end": 6581,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 6570,
									"end": 6574,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 6566,
									"end": 6582,
									"name": "SHR",
									"source": 11
								},
								{
									"begin": 6545,
									"end": 6582,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 6545,
									"end": 6582,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 6472,
									"end": 6589,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 6472,
									"end": 6589,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 6472,
									"end": 6589,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 6472,
									"end": 6589,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 6472,
									"end": 6589,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 6595,
									"end": 6764,
									"name": "tag",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 6595,
									"end": 6764,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 6639,
									"end": 6645,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 6672,
									"end": 6723,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "122"
								},
								{
									"begin": 6720,
									"end": 6721,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 6716,
									"end": 6722,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 6708,
									"end": 6713,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 6705,
									"end": 6706,
									"name": "PUSH",
									"source": 11,
									"value": "8"
								},
								{
									"begin": 6701,
									"end": 6714,
									"name": "MUL",
									"source": 11
								},
								{
									"begin": 6672,
									"end": 6723,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "39"
								},
								{
									"begin": 6672,
									"end": 6723,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 6672,
									"end": 6723,
									"name": "tag",
									"source": 11,
									"value": "122"
								},
								{
									"begin": 6672,
									"end": 6723,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 6668,
									"end": 6724,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 6753,
									"end": 6757,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 6747,
									"end": 6751,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 6743,
									"end": 6758,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 6733,
									"end": 6758,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 6733,
									"end": 6758,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 6646,
									"end": 6764,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 6595,
									"end": 6764,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 6595,
									"end": 6764,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 6595,
									"end": 6764,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 6595,
									"end": 6764,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 6595,
									"end": 6764,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 6769,
									"end": 7064,
									"name": "tag",
									"source": 11,
									"value": "41"
								},
								{
									"begin": 6769,
									"end": 7064,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 6845,
									"end": 6849,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 6991,
									"end": 7020,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "124"
								},
								{
									"begin": 7016,
									"end": 7019,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 7010,
									"end": 7014,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 6991,
									"end": 7020,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 6991,
									"end": 7020,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 6991,
									"end": 7020,
									"name": "tag",
									"source": 11,
									"value": "124"
								},
								{
									"begin": 6991,
									"end": 7020,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 6983,
									"end": 7020,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 6983,
									"end": 7020,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 7053,
									"end": 7056,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 7050,
									"end": 7051,
									"name": "PUSH",
									"source": 11,
									"value": "2"
								},
								{
									"begin": 7046,
									"end": 7057,
									"name": "MUL",
									"source": 11
								},
								{
									"begin": 7040,
									"end": 7044,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 7037,
									"end": 7058,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 7029,
									"end": 7058,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 7029,
									"end": 7058,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 6769,
									"end": 7064,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 6769,
									"end": 7064,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 6769,
									"end": 7064,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 6769,
									"end": 7064,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 6769,
									"end": 7064,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 7069,
									"end": 8464,
									"name": "tag",
									"source": 11,
									"value": "7"
								},
								{
									"begin": 7069,
									"end": 8464,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 7186,
									"end": 7223,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "126"
								},
								{
									"begin": 7219,
									"end": 7222,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 7186,
									"end": 7223,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "23"
								},
								{
									"begin": 7186,
									"end": 7223,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 7186,
									"end": 7223,
									"name": "tag",
									"source": 11,
									"value": "126"
								},
								{
									"begin": 7186,
									"end": 7223,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 7288,
									"end": 7306,
									"name": "PUSH",
									"source": 11,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 7280,
									"end": 7286,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 7277,
									"end": 7307,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 7274,
									"end": 7330,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 7274,
									"end": 7330,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "127"
								},
								{
									"begin": 7274,
									"end": 7330,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 7310,
									"end": 7328,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "128"
								},
								{
									"begin": 7310,
									"end": 7328,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 7310,
									"end": 7328,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 7310,
									"end": 7328,
									"name": "tag",
									"source": 11,
									"value": "128"
								},
								{
									"begin": 7310,
									"end": 7328,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 7274,
									"end": 7330,
									"name": "tag",
									"source": 11,
									"value": "127"
								},
								{
									"begin": 7274,
									"end": 7330,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 7354,
									"end": 7392,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "129"
								},
								{
									"begin": 7386,
									"end": 7390,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 7380,
									"end": 7391,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": 7354,
									"end": 7392,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "25"
								},
								{
									"begin": 7354,
									"end": 7392,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 7354,
									"end": 7392,
									"name": "tag",
									"source": 11,
									"value": "129"
								},
								{
									"begin": 7354,
									"end": 7392,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 7439,
									"end": 7506,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "130"
								},
								{
									"begin": 7499,
									"end": 7505,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 7491,
									"end": 7497,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 7485,
									"end": 7489,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 7439,
									"end": 7506,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "38"
								},
								{
									"begin": 7439,
									"end": 7506,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 7439,
									"end": 7506,
									"name": "tag",
									"source": 11,
									"value": "130"
								},
								{
									"begin": 7439,
									"end": 7506,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 7533,
									"end": 7534,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 7557,
									"end": 7561,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 7544,
									"end": 7561,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 7544,
									"end": 7561,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 7589,
									"end": 7591,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 7581,
									"end": 7587,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 7578,
									"end": 7592,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 7606,
									"end": 7607,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 7601,
									"end": 8219,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 7601,
									"end": 8219,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 7601,
									"end": 8219,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "132"
								},
								{
									"begin": 7601,
									"end": 8219,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 8263,
									"end": 8264,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 8280,
									"end": 8286,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 8277,
									"end": 8354,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 8277,
									"end": 8354,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "133"
								},
								{
									"begin": 8277,
									"end": 8354,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 8329,
									"end": 8338,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 8324,
									"end": 8327,
									"name": "DUP8",
									"source": 11
								},
								{
									"begin": 8320,
									"end": 8339,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 8314,
									"end": 8340,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 8305,
									"end": 8340,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 8305,
									"end": 8340,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 8277,
									"end": 8354,
									"name": "tag",
									"source": 11,
									"value": "133"
								},
								{
									"begin": 8277,
									"end": 8354,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 8380,
									"end": 8447,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "134"
								},
								{
									"begin": 8440,
									"end": 8446,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 8433,
									"end": 8438,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 8380,
									"end": 8447,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "41"
								},
								{
									"begin": 8380,
									"end": 8447,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 8380,
									"end": 8447,
									"name": "tag",
									"source": 11,
									"value": "134"
								},
								{
									"begin": 8380,
									"end": 8447,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 8374,
									"end": 8378,
									"name": "DUP7",
									"source": 11
								},
								{
									"begin": 8367,
									"end": 8448,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 8236,
									"end": 8458,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 7571,
									"end": 8458,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "131"
								},
								{
									"begin": 7571,
									"end": 8458,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 7601,
									"end": 8219,
									"name": "tag",
									"source": 11,
									"value": "132"
								},
								{
									"begin": 7601,
									"end": 8219,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 7653,
									"end": 7657,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 7649,
									"end": 7658,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 7641,
									"end": 7647,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 7637,
									"end": 7659,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 7687,
									"end": 7724,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "135"
								},
								{
									"begin": 7719,
									"end": 7723,
									"name": "DUP7",
									"source": 11
								},
								{
									"begin": 7687,
									"end": 7724,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "26"
								},
								{
									"begin": 7687,
									"end": 7724,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 7687,
									"end": 7724,
									"name": "tag",
									"source": 11,
									"value": "135"
								},
								{
									"begin": 7687,
									"end": 7724,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 7746,
									"end": 7747,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 7760,
									"end": 7968,
									"name": "tag",
									"source": 11,
									"value": "136"
								},
								{
									"begin": 7760,
									"end": 7968,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 7774,
									"end": 7781,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 7771,
									"end": 7772,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 7768,
									"end": 7782,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 7760,
									"end": 7968,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 7760,
									"end": 7968,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "138"
								},
								{
									"begin": 7760,
									"end": 7968,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 7853,
									"end": 7862,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 7848,
									"end": 7851,
									"name": "DUP10",
									"source": 11
								},
								{
									"begin": 7844,
									"end": 7863,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 7838,
									"end": 7864,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 7830,
									"end": 7836,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 7823,
									"end": 7865,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 7904,
									"end": 7905,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 7896,
									"end": 7902,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 7892,
									"end": 7906,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 7882,
									"end": 7906,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 7882,
									"end": 7906,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 7951,
									"end": 7953,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 7940,
									"end": 7949,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 7936,
									"end": 7954,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 7923,
									"end": 7954,
									"name": "SWAP5",
									"source": 11
								},
								{
									"begin": 7923,
									"end": 7954,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 7797,
									"end": 7801,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 7794,
									"end": 7795,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 7790,
									"end": 7802,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 7785,
									"end": 7802,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 7785,
									"end": 7802,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 7760,
									"end": 7968,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "136"
								},
								{
									"begin": 7760,
									"end": 7968,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 7760,
									"end": 7968,
									"name": "tag",
									"source": 11,
									"value": "138"
								},
								{
									"begin": 7760,
									"end": 7968,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 7996,
									"end": 8002,
									"name": "DUP7",
									"source": 11
								},
								{
									"begin": 7987,
									"end": 7994,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 7984,
									"end": 8003,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 7981,
									"end": 8160,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 7981,
									"end": 8160,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "139"
								},
								{
									"begin": 7981,
									"end": 8160,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 8054,
									"end": 8063,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 8049,
									"end": 8052,
									"name": "DUP10",
									"source": 11
								},
								{
									"begin": 8045,
									"end": 8064,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 8039,
									"end": 8065,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 8097,
									"end": 8145,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "140"
								},
								{
									"begin": 8139,
									"end": 8143,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 8131,
									"end": 8137,
									"name": "DUP10",
									"source": 11
								},
								{
									"begin": 8127,
									"end": 8144,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 8116,
									"end": 8125,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 8097,
									"end": 8145,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 8097,
									"end": 8145,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 8097,
									"end": 8145,
									"name": "tag",
									"source": 11,
									"value": "140"
								},
								{
									"begin": 8097,
									"end": 8145,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 8089,
									"end": 8095,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 8082,
									"end": 8146,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 8004,
									"end": 8160,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 7981,
									"end": 8160,
									"name": "tag",
									"source": 11,
									"value": "139"
								},
								{
									"begin": 7981,
									"end": 8160,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 8206,
									"end": 8207,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 8202,
									"end": 8203,
									"name": "PUSH",
									"source": 11,
									"value": "2"
								},
								{
									"begin": 8194,
									"end": 8200,
									"name": "DUP9",
									"source": 11
								},
								{
									"begin": 8190,
									"end": 8204,
									"name": "MUL",
									"source": 11
								},
								{
									"begin": 8186,
									"end": 8208,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 8180,
									"end": 8184,
									"name": "DUP9",
									"source": 11
								},
								{
									"begin": 8173,
									"end": 8209,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 7608,
									"end": 8219,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 7608,
									"end": 8219,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 7608,
									"end": 8219,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 7571,
									"end": 8458,
									"name": "tag",
									"source": 11,
									"value": "131"
								},
								{
									"begin": 7571,
									"end": 8458,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 7571,
									"end": 8458,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 7161,
									"end": 8464,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 7161,
									"end": 8464,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 7161,
									"end": 8464,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 7069,
									"end": 8464,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 7069,
									"end": 8464,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 7069,
									"end": 8464,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 2664,
									"end": 14274,
									"name": "tag",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 2664,
									"end": 14274,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2664,
									"end": 14274,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 2664,
									"end": 14274,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2664,
									"end": 14274,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 2664,
									"end": 14274,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2664,
									"end": 14274,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 2664,
									"end": 14274,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2664,
									"end": 14274,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205c7b8c5f8721b076c916c8dbb5738d63065fca3641280c99b318c7d5db14527864736f6c634300081a0033",
									".code": [
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH",
											"source": 0,
											"value": "39509351"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH",
											"source": 0,
											"value": "39509351"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH",
											"source": 0,
											"value": "95D89B41"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH",
											"source": 0,
											"value": "A457C2D7"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH",
											"source": 0,
											"value": "A9059CBB"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH",
											"source": 0,
											"value": "DD62ED3E"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH",
											"source": 0,
											"value": "6FDDE03"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH",
											"source": 0,
											"value": "95EA7B3"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH",
											"source": 0,
											"value": "18160DDD"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH",
											"source": 0,
											"value": "23B872DD"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH",
											"source": 0,
											"value": "313CE567"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2664,
											"end": 14274,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 3417,
											"end": 3515,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 3417,
											"end": 3515,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 5694,
											"end": 5891,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 5694,
											"end": 5891,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 5694,
											"end": 5891,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 4505,
											"end": 4611,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 4505,
											"end": 4611,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 6453,
											"end": 6739,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 6453,
											"end": 6739,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 6453,
											"end": 6739,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "tag",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 4354,
											"end": 4445,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 4354,
											"end": 4445,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 7134,
											"end": 7368,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7134,
											"end": 7368,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "tag",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 7134,
											"end": 7368,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "tag",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 4669,
											"end": 4794,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "tag",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 4669,
											"end": 4794,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 4669,
											"end": 4794,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "tag",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 3628,
											"end": 3730,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "tag",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 3628,
											"end": 3730,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "tag",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 7855,
											"end": 8282,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 7855,
											"end": 8282,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "tag",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 7855,
											"end": 8282,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "tag",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 4990,
											"end": 5179,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "tag",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 4990,
											"end": 5179,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "tag",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 4990,
											"end": 5179,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "tag",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 5237,
											"end": 5386,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "tag",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 5237,
											"end": 5386,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "tag",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 5237,
											"end": 5386,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3471,
											"end": 3484,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 3503,
											"end": 3508,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 3496,
											"end": 3508,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "tag",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 3496,
											"end": 3508,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "tag",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "tag",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "tag",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3496,
											"end": 3508,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3417,
											"end": 3515,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3417,
											"end": 3515,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5777,
											"end": 5781,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5793,
											"end": 5806,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5809,
											"end": 5821,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 5809,
											"end": 5819,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 5809,
											"end": 5821,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5809,
											"end": 5821,
											"name": "tag",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 5809,
											"end": 5821,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5793,
											"end": 5821,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5793,
											"end": 5821,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5831,
											"end": 5863,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 5840,
											"end": 5845,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5847,
											"end": 5854,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5856,
											"end": 5862,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5831,
											"end": 5839,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 5831,
											"end": 5863,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5831,
											"end": 5863,
											"name": "tag",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 5831,
											"end": 5863,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5880,
											"end": 5884,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 5873,
											"end": 5884,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5873,
											"end": 5884,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5873,
											"end": 5884,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5694,
											"end": 5891,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4566,
											"end": 4573,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4592,
											"end": 4604,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 4592,
											"end": 4604,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4585,
											"end": 4604,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4585,
											"end": 4604,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 4611,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4505,
											"end": 4611,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "tag",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6580,
											"end": 6584,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6596,
											"end": 6611,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6614,
											"end": 6626,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 6614,
											"end": 6624,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 6614,
											"end": 6626,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6614,
											"end": 6626,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 6614,
											"end": 6626,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6596,
											"end": 6626,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6596,
											"end": 6626,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6636,
											"end": 6674,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 6652,
											"end": 6656,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6658,
											"end": 6665,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 6667,
											"end": 6673,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6636,
											"end": 6651,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 6636,
											"end": 6674,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6636,
											"end": 6674,
											"name": "tag",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 6636,
											"end": 6674,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6684,
											"end": 6711,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 6694,
											"end": 6698,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6700,
											"end": 6702,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6704,
											"end": 6710,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 6684,
											"end": 6693,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 6684,
											"end": 6711,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6684,
											"end": 6711,
											"name": "tag",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 6684,
											"end": 6711,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6728,
											"end": 6732,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 6721,
											"end": 6732,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6721,
											"end": 6732,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6721,
											"end": 6732,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6453,
											"end": 6739,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4412,
											"end": 4417,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4436,
											"end": 4438,
											"name": "PUSH",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 4429,
											"end": 4438,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4429,
											"end": 4438,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4354,
											"end": 4445,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4354,
											"end": 4445,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "tag",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7222,
											"end": 7226,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7238,
											"end": 7251,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7254,
											"end": 7266,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 7254,
											"end": 7264,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 7254,
											"end": 7266,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7254,
											"end": 7266,
											"name": "tag",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 7254,
											"end": 7266,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7238,
											"end": 7266,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7238,
											"end": 7266,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7276,
											"end": 7340,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 7285,
											"end": 7290,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7292,
											"end": 7299,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7329,
											"end": 7339,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7301,
											"end": 7326,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 7311,
											"end": 7316,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7318,
											"end": 7325,
											"name": "DUP10",
											"source": 0
										},
										{
											"begin": 7301,
											"end": 7310,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 7301,
											"end": 7326,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7301,
											"end": 7326,
											"name": "tag",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 7301,
											"end": 7326,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7301,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 7301,
											"end": 7339,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7301,
											"end": 7339,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7301,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 7301,
											"end": 7339,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7301,
											"end": 7339,
											"name": "tag",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 7301,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7276,
											"end": 7284,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 7276,
											"end": 7340,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7276,
											"end": 7340,
											"name": "tag",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 7276,
											"end": 7340,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7357,
											"end": 7361,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 7350,
											"end": 7361,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7350,
											"end": 7361,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7350,
											"end": 7361,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7134,
											"end": 7368,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "tag",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4743,
											"end": 4750,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4769,
											"end": 4778,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4769,
											"end": 4787,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4779,
											"end": 4786,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4769,
											"end": 4787,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4769,
											"end": 4787,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4769,
											"end": 4787,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4769,
											"end": 4787,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4769,
											"end": 4787,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4769,
											"end": 4787,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4769,
											"end": 4787,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4769,
											"end": 4787,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4769,
											"end": 4787,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4769,
											"end": 4787,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4769,
											"end": 4787,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4769,
											"end": 4787,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4769,
											"end": 4787,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4769,
											"end": 4787,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4769,
											"end": 4787,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4769,
											"end": 4787,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4762,
											"end": 4787,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4762,
											"end": 4787,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4669,
											"end": 4794,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "tag",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3684,
											"end": 3697,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 3716,
											"end": 3723,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 3709,
											"end": 3723,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "tag",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 3709,
											"end": 3723,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "tag",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "tag",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "tag",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "tag",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3709,
											"end": 3723,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3628,
											"end": 3730,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3628,
											"end": 3730,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7948,
											"end": 7952,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7964,
											"end": 7977,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7980,
											"end": 7992,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 7980,
											"end": 7990,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 7980,
											"end": 7992,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7980,
											"end": 7992,
											"name": "tag",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 7980,
											"end": 7992,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7964,
											"end": 7992,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7964,
											"end": 7992,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8002,
											"end": 8026,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8029,
											"end": 8054,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 8039,
											"end": 8044,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8046,
											"end": 8053,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 8029,
											"end": 8038,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 8029,
											"end": 8054,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8029,
											"end": 8054,
											"name": "tag",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 8029,
											"end": 8054,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8002,
											"end": 8054,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8002,
											"end": 8054,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8092,
											"end": 8107,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8072,
											"end": 8088,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8072,
											"end": 8107,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 8072,
											"end": 8107,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 8064,
											"end": 8149,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "tag",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "tag",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 8064,
											"end": 8149,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8183,
											"end": 8243,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 8192,
											"end": 8197,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8199,
											"end": 8206,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 8227,
											"end": 8242,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 8208,
											"end": 8224,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 8208,
											"end": 8242,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8183,
											"end": 8191,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 8183,
											"end": 8243,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8183,
											"end": 8243,
											"name": "tag",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 8183,
											"end": 8243,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8271,
											"end": 8275,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 8264,
											"end": 8275,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 8264,
											"end": 8275,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8264,
											"end": 8275,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8264,
											"end": 8275,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7855,
											"end": 8282,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "tag",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5069,
											"end": 5073,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5085,
											"end": 5098,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5101,
											"end": 5113,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 5101,
											"end": 5111,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 5101,
											"end": 5113,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5101,
											"end": 5113,
											"name": "tag",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 5101,
											"end": 5113,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5085,
											"end": 5113,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5085,
											"end": 5113,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5123,
											"end": 5151,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 5133,
											"end": 5138,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5140,
											"end": 5142,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5144,
											"end": 5150,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5123,
											"end": 5132,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 5123,
											"end": 5151,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5123,
											"end": 5151,
											"name": "tag",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 5123,
											"end": 5151,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5168,
											"end": 5172,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 5161,
											"end": 5172,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5161,
											"end": 5172,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5161,
											"end": 5172,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4990,
											"end": 5179,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5326,
											"end": 5333,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5352,
											"end": 5363,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 5352,
											"end": 5370,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5364,
											"end": 5369,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5370,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5352,
											"end": 5370,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5370,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5352,
											"end": 5370,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5370,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5370,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5370,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5352,
											"end": 5370,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5370,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5370,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5370,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5370,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5352,
											"end": 5370,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5370,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5352,
											"end": 5370,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5379,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5371,
											"end": 5378,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5379,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5352,
											"end": 5379,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5379,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5352,
											"end": 5379,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5379,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5379,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5379,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5352,
											"end": 5379,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5379,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5379,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5379,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5379,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5352,
											"end": 5379,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5379,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5352,
											"end": 5379,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 5352,
											"end": 5379,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 5345,
											"end": 5379,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5345,
											"end": 5379,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5237,
											"end": 5386,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1903,
											"end": 1999,
											"name": "tag",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 1903,
											"end": 1999,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1956,
											"end": 1963,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1982,
											"end": 1992,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1975,
											"end": 1992,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1975,
											"end": 1992,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1903,
											"end": 1999,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1903,
											"end": 1999,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 11767,
											"end": 12137,
											"name": "tag",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 11767,
											"end": 12137,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11915,
											"end": 11916,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 11898,
											"end": 11917,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11898,
											"end": 11917,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11898,
											"end": 11903,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 11898,
											"end": 11917,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11898,
											"end": 11917,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11898,
											"end": 11917,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 11890,
											"end": 11958,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "tag",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 11890,
											"end": 11958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11995,
											"end": 11996,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 11976,
											"end": 11997,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11976,
											"end": 11997,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11976,
											"end": 11983,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 11976,
											"end": 11997,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11976,
											"end": 11997,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 11976,
											"end": 11997,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 11968,
											"end": 12036,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "tag",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "tag",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 11968,
											"end": 12036,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12077,
											"end": 12083,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12058,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 12047,
											"end": 12065,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12059,
											"end": 12064,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12065,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12047,
											"end": 12065,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12065,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12047,
											"end": 12065,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12065,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12065,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12065,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12047,
											"end": 12065,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12065,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12065,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12065,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12065,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12047,
											"end": 12065,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12065,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12047,
											"end": 12065,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12074,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12066,
											"end": 12073,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12074,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12047,
											"end": 12074,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12074,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12047,
											"end": 12074,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12074,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12074,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12074,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12047,
											"end": 12074,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12074,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12074,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12074,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12074,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12047,
											"end": 12074,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12074,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12047,
											"end": 12074,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12083,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12083,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12083,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 12047,
											"end": 12083,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12114,
											"end": 12121,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12098,
											"end": 12130,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12098,
											"end": 12130,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12107,
											"end": 12112,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12098,
											"end": 12130,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12098,
											"end": 12130,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12098,
											"end": 12130,
											"name": "PUSH",
											"source": 0,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 12123,
											"end": 12129,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12098,
											"end": 12130,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 12098,
											"end": 12130,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12098,
											"end": 12130,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 12098,
											"end": 12130,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 12098,
											"end": 12130,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12098,
											"end": 12130,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 12098,
											"end": 12130,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12098,
											"end": 12130,
											"name": "tag",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 12098,
											"end": 12130,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12098,
											"end": 12130,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 12098,
											"end": 12130,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12098,
											"end": 12130,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12098,
											"end": 12130,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 12098,
											"end": 12130,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 12098,
											"end": 12130,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12098,
											"end": 12130,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 11767,
											"end": 12137,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11767,
											"end": 12137,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11767,
											"end": 12137,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11767,
											"end": 12137,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12418,
											"end": 12859,
											"name": "tag",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 12418,
											"end": 12859,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12548,
											"end": 12572,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12575,
											"end": 12600,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 12585,
											"end": 12590,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 12592,
											"end": 12599,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 12575,
											"end": 12584,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 12575,
											"end": 12600,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12575,
											"end": 12600,
											"name": "tag",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 12575,
											"end": 12600,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12548,
											"end": 12600,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12548,
											"end": 12600,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12634,
											"end": 12651,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12614,
											"end": 12630,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12614,
											"end": 12651,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 12610,
											"end": 12853,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 12610,
											"end": 12853,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 12695,
											"end": 12701,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12675,
											"end": 12691,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12675,
											"end": 12701,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 12675,
											"end": 12701,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 12667,
											"end": 12735,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "tag",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "tag",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 12667,
											"end": 12735,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12777,
											"end": 12828,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 12786,
											"end": 12791,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 12793,
											"end": 12800,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 12821,
											"end": 12827,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 12802,
											"end": 12818,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 12802,
											"end": 12827,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 12777,
											"end": 12785,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 12777,
											"end": 12828,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12777,
											"end": 12828,
											"name": "tag",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 12777,
											"end": 12828,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12610,
											"end": 12853,
											"name": "tag",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 12610,
											"end": 12853,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12538,
											"end": 12859,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12418,
											"end": 12859,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12418,
											"end": 12859,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12418,
											"end": 12859,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12418,
											"end": 12859,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8736,
											"end": 9554,
											"name": "tag",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 8736,
											"end": 9554,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8878,
											"end": 8879,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8862,
											"end": 8880,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8862,
											"end": 8880,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8862,
											"end": 8866,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8862,
											"end": 8880,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8862,
											"end": 8880,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8862,
											"end": 8880,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 8854,
											"end": 8922,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "tag",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "tag",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 8854,
											"end": 8922,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8954,
											"end": 8955,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8940,
											"end": 8956,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8940,
											"end": 8956,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8940,
											"end": 8942,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8940,
											"end": 8956,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8940,
											"end": 8956,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8940,
											"end": 8956,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 8932,
											"end": 8996,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "tag",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "tag",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 8932,
											"end": 8996,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9007,
											"end": 9045,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 9028,
											"end": 9032,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 9034,
											"end": 9036,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 9038,
											"end": 9044,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 9007,
											"end": 9027,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 9007,
											"end": 9045,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 9007,
											"end": 9045,
											"name": "tag",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 9007,
											"end": 9045,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9056,
											"end": 9075,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9078,
											"end": 9087,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9078,
											"end": 9093,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9088,
											"end": 9092,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 9078,
											"end": 9093,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9078,
											"end": 9093,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9078,
											"end": 9093,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9078,
											"end": 9093,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9078,
											"end": 9093,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9078,
											"end": 9093,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9078,
											"end": 9093,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 9078,
											"end": 9093,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9078,
											"end": 9093,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9078,
											"end": 9093,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9078,
											"end": 9093,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9078,
											"end": 9093,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 9078,
											"end": 9093,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9078,
											"end": 9093,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9078,
											"end": 9093,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 9078,
											"end": 9093,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 9056,
											"end": 9093,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9056,
											"end": 9093,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9126,
											"end": 9132,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9111,
											"end": 9122,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9111,
											"end": 9132,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 9111,
											"end": 9132,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 9103,
											"end": 9175,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "tag",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "tag",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 9103,
											"end": 9175,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9241,
											"end": 9247,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9227,
											"end": 9238,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9227,
											"end": 9247,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 9209,
											"end": 9218,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9209,
											"end": 9224,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9219,
											"end": 9223,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 9209,
											"end": 9224,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9209,
											"end": 9224,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9209,
											"end": 9224,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9209,
											"end": 9224,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9209,
											"end": 9224,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9209,
											"end": 9224,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9209,
											"end": 9224,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 9209,
											"end": 9224,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9209,
											"end": 9224,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9209,
											"end": 9224,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9209,
											"end": 9224,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9209,
											"end": 9224,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 9209,
											"end": 9224,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9209,
											"end": 9224,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9209,
											"end": 9224,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 9209,
											"end": 9247,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9209,
											"end": 9247,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9209,
											"end": 9247,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 9209,
											"end": 9247,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9441,
											"end": 9447,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9433,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9424,
											"end": 9437,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9434,
											"end": 9436,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9437,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9424,
											"end": 9437,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9437,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9424,
											"end": 9437,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9437,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9437,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9437,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 9424,
											"end": 9437,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9437,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9437,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9437,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9437,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 9424,
											"end": 9437,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9437,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9424,
											"end": 9437,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9437,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9424,
											"end": 9447,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9447,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9447,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9447,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9447,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9447,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9447,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9447,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9447,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9447,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 9424,
											"end": 9447,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9488,
											"end": 9490,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 9473,
											"end": 9499,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9473,
											"end": 9499,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9482,
											"end": 9486,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 9473,
											"end": 9499,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9473,
											"end": 9499,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9473,
											"end": 9499,
											"name": "PUSH",
											"source": 0,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 9492,
											"end": 9498,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 9473,
											"end": 9499,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 9473,
											"end": 9499,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 9473,
											"end": 9499,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 9473,
											"end": 9499,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 9473,
											"end": 9499,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9473,
											"end": 9499,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 9473,
											"end": 9499,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 9473,
											"end": 9499,
											"name": "tag",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 9473,
											"end": 9499,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9473,
											"end": 9499,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 9473,
											"end": 9499,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 9473,
											"end": 9499,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9473,
											"end": 9499,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 9473,
											"end": 9499,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 9473,
											"end": 9499,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9473,
											"end": 9499,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 9510,
											"end": 9547,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 9530,
											"end": 9534,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 9536,
											"end": 9538,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 9540,
											"end": 9546,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 9510,
											"end": 9529,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 9510,
											"end": 9547,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 9510,
											"end": 9547,
											"name": "tag",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 9510,
											"end": 9547,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8844,
											"end": 9554,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8736,
											"end": 9554,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8736,
											"end": 9554,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8736,
											"end": 9554,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8736,
											"end": 9554,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 13443,
											"end": 13564,
											"name": "tag",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 13443,
											"end": 13564,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13443,
											"end": 13564,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13443,
											"end": 13564,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13443,
											"end": 13564,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13443,
											"end": 13564,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14152,
											"end": 14272,
											"name": "tag",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 14152,
											"end": 14272,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14152,
											"end": 14272,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14152,
											"end": 14272,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14152,
											"end": 14272,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14152,
											"end": 14272,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7,
											"end": 106,
											"name": "tag",
											"source": 11,
											"value": "140"
										},
										{
											"begin": 7,
											"end": 106,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 59,
											"end": 65,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 93,
											"end": 98,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 87,
											"end": 99,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 77,
											"end": 99,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 77,
											"end": 99,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7,
											"end": 106,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7,
											"end": 106,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7,
											"end": 106,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7,
											"end": 106,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 112,
											"end": 281,
											"name": "tag",
											"source": 11,
											"value": "141"
										},
										{
											"begin": 112,
											"end": 281,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 196,
											"end": 207,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 230,
											"end": 236,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 225,
											"end": 228,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 218,
											"end": 237,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 270,
											"end": 274,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 265,
											"end": 268,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 261,
											"end": 275,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 246,
											"end": 275,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 246,
											"end": 275,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 112,
											"end": 281,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 112,
											"end": 281,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 112,
											"end": 281,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 112,
											"end": 281,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 112,
											"end": 281,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 287,
											"end": 426,
											"name": "tag",
											"source": 11,
											"value": "142"
										},
										{
											"begin": 287,
											"end": 426,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 376,
											"end": 382,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 371,
											"end": 374,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 366,
											"end": 369,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 360,
											"end": 383,
											"name": "MCOPY",
											"source": 11
										},
										{
											"begin": 417,
											"end": 418,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 408,
											"end": 414,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 403,
											"end": 406,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 399,
											"end": 415,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 392,
											"end": 419,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 287,
											"end": 426,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 287,
											"end": 426,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 287,
											"end": 426,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 287,
											"end": 426,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 432,
											"end": 534,
											"name": "tag",
											"source": 11,
											"value": "143"
										},
										{
											"begin": 432,
											"end": 534,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 473,
											"end": 479,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 524,
											"end": 526,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 520,
											"end": 527,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 515,
											"end": 517,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 508,
											"end": 513,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 504,
											"end": 518,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 500,
											"end": 528,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 490,
											"end": 528,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 490,
											"end": 528,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 432,
											"end": 534,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 432,
											"end": 534,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 432,
											"end": 534,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 432,
											"end": 534,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 540,
											"end": 917,
											"name": "tag",
											"source": 11,
											"value": "144"
										},
										{
											"begin": 540,
											"end": 917,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 628,
											"end": 631,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 656,
											"end": 695,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "182"
										},
										{
											"begin": 689,
											"end": 694,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 656,
											"end": 695,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "140"
										},
										{
											"begin": 656,
											"end": 695,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 656,
											"end": 695,
											"name": "tag",
											"source": 11,
											"value": "182"
										},
										{
											"begin": 656,
											"end": 695,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 711,
											"end": 782,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "183"
										},
										{
											"begin": 775,
											"end": 781,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 770,
											"end": 773,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 711,
											"end": 782,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "141"
										},
										{
											"begin": 711,
											"end": 782,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 711,
											"end": 782,
											"name": "tag",
											"source": 11,
											"value": "183"
										},
										{
											"begin": 711,
											"end": 782,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 704,
											"end": 782,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 704,
											"end": 782,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 791,
											"end": 856,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "184"
										},
										{
											"begin": 849,
											"end": 855,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 844,
											"end": 847,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 837,
											"end": 841,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 830,
											"end": 835,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 826,
											"end": 842,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 791,
											"end": 856,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "142"
										},
										{
											"begin": 791,
											"end": 856,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 791,
											"end": 856,
											"name": "tag",
											"source": 11,
											"value": "184"
										},
										{
											"begin": 791,
											"end": 856,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 881,
											"end": 910,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "185"
										},
										{
											"begin": 903,
											"end": 909,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 881,
											"end": 910,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "143"
										},
										{
											"begin": 881,
											"end": 910,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 881,
											"end": 910,
											"name": "tag",
											"source": 11,
											"value": "185"
										},
										{
											"begin": 881,
											"end": 910,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 876,
											"end": 879,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 872,
											"end": 911,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 865,
											"end": 911,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 865,
											"end": 911,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 632,
											"end": 917,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 540,
											"end": 917,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 540,
											"end": 917,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 540,
											"end": 917,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 540,
											"end": 917,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 540,
											"end": 917,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "tag",
											"source": 11,
											"value": "18"
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1036,
											"end": 1040,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1074,
											"end": 1076,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1063,
											"end": 1072,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1059,
											"end": 1077,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1051,
											"end": 1077,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1051,
											"end": 1077,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1123,
											"end": 1132,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1117,
											"end": 1121,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1113,
											"end": 1133,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1109,
											"end": 1110,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1098,
											"end": 1107,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1094,
											"end": 1111,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1087,
											"end": 1134,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1151,
											"end": 1229,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "187"
										},
										{
											"begin": 1224,
											"end": 1228,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1215,
											"end": 1221,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1151,
											"end": 1229,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "144"
										},
										{
											"begin": 1151,
											"end": 1229,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1151,
											"end": 1229,
											"name": "tag",
											"source": 11,
											"value": "187"
										},
										{
											"begin": 1151,
											"end": 1229,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1143,
											"end": 1229,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1143,
											"end": 1229,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 923,
											"end": 1236,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1323,
											"end": 1440,
											"name": "tag",
											"source": 11,
											"value": "146"
										},
										{
											"begin": 1323,
											"end": 1440,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1433,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1429,
											"end": 1430,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1422,
											"end": 1434,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1569,
											"end": 1695,
											"name": "tag",
											"source": 11,
											"value": "148"
										},
										{
											"begin": 1569,
											"end": 1695,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1606,
											"end": 1613,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1646,
											"end": 1688,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1639,
											"end": 1644,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1635,
											"end": 1689,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1624,
											"end": 1689,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1624,
											"end": 1689,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1569,
											"end": 1695,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1569,
											"end": 1695,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1569,
											"end": 1695,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1569,
											"end": 1695,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1701,
											"end": 1797,
											"name": "tag",
											"source": 11,
											"value": "149"
										},
										{
											"begin": 1701,
											"end": 1797,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1738,
											"end": 1745,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1767,
											"end": 1791,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "193"
										},
										{
											"begin": 1785,
											"end": 1790,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1767,
											"end": 1791,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "148"
										},
										{
											"begin": 1767,
											"end": 1791,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1767,
											"end": 1791,
											"name": "tag",
											"source": 11,
											"value": "193"
										},
										{
											"begin": 1767,
											"end": 1791,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1756,
											"end": 1791,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1756,
											"end": 1791,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1701,
											"end": 1797,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1701,
											"end": 1797,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1701,
											"end": 1797,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1701,
											"end": 1797,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1803,
											"end": 1925,
											"name": "tag",
											"source": 11,
											"value": "150"
										},
										{
											"begin": 1803,
											"end": 1925,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1876,
											"end": 1900,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 1894,
											"end": 1899,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1876,
											"end": 1900,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "149"
										},
										{
											"begin": 1876,
											"end": 1900,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1876,
											"end": 1900,
											"name": "tag",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 1876,
											"end": 1900,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1869,
											"end": 1874,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1866,
											"end": 1901,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1856,
											"end": 1919,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "196"
										},
										{
											"begin": 1856,
											"end": 1919,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1915,
											"end": 1916,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1912,
											"end": 1913,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1905,
											"end": 1917,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1856,
											"end": 1919,
											"name": "tag",
											"source": 11,
											"value": "196"
										},
										{
											"begin": 1856,
											"end": 1919,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1803,
											"end": 1925,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1803,
											"end": 1925,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "tag",
											"source": 11,
											"value": "151"
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1977,
											"end": 1982,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2015,
											"end": 2021,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2002,
											"end": 2022,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 1993,
											"end": 2022,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1993,
											"end": 2022,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2031,
											"end": 2064,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "198"
										},
										{
											"begin": 2058,
											"end": 2063,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2031,
											"end": 2064,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "150"
										},
										{
											"begin": 2031,
											"end": 2064,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2031,
											"end": 2064,
											"name": "tag",
											"source": 11,
											"value": "198"
										},
										{
											"begin": 2031,
											"end": 2064,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1931,
											"end": 2070,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2076,
											"end": 2153,
											"name": "tag",
											"source": 11,
											"value": "152"
										},
										{
											"begin": 2076,
											"end": 2153,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2113,
											"end": 2120,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2142,
											"end": 2147,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2131,
											"end": 2147,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2131,
											"end": 2147,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2076,
											"end": 2153,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2076,
											"end": 2153,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2076,
											"end": 2153,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2076,
											"end": 2153,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2159,
											"end": 2281,
											"name": "tag",
											"source": 11,
											"value": "153"
										},
										{
											"begin": 2159,
											"end": 2281,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2232,
											"end": 2256,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "201"
										},
										{
											"begin": 2250,
											"end": 2255,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2232,
											"end": 2256,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "152"
										},
										{
											"begin": 2232,
											"end": 2256,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2232,
											"end": 2256,
											"name": "tag",
											"source": 11,
											"value": "201"
										},
										{
											"begin": 2232,
											"end": 2256,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2225,
											"end": 2230,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2222,
											"end": 2257,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 2212,
											"end": 2275,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "202"
										},
										{
											"begin": 2212,
											"end": 2275,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2271,
											"end": 2272,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2268,
											"end": 2269,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2261,
											"end": 2273,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2212,
											"end": 2275,
											"name": "tag",
											"source": 11,
											"value": "202"
										},
										{
											"begin": 2212,
											"end": 2275,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2159,
											"end": 2281,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2159,
											"end": 2281,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "tag",
											"source": 11,
											"value": "154"
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2333,
											"end": 2338,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2371,
											"end": 2377,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2358,
											"end": 2378,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 2349,
											"end": 2378,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2349,
											"end": 2378,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2387,
											"end": 2420,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "204"
										},
										{
											"begin": 2414,
											"end": 2419,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2387,
											"end": 2420,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "153"
										},
										{
											"begin": 2387,
											"end": 2420,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2387,
											"end": 2420,
											"name": "tag",
											"source": 11,
											"value": "204"
										},
										{
											"begin": 2387,
											"end": 2420,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2287,
											"end": 2426,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "tag",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2500,
											"end": 2506,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2508,
											"end": 2514,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2557,
											"end": 2559,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2545,
											"end": 2554,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2536,
											"end": 2543,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 2532,
											"end": 2555,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2528,
											"end": 2560,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 2525,
											"end": 2644,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2525,
											"end": 2644,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "206"
										},
										{
											"begin": 2525,
											"end": 2644,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2563,
											"end": 2642,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "207"
										},
										{
											"begin": 2563,
											"end": 2642,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "146"
										},
										{
											"begin": 2563,
											"end": 2642,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2563,
											"end": 2642,
											"name": "tag",
											"source": 11,
											"value": "207"
										},
										{
											"begin": 2563,
											"end": 2642,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2525,
											"end": 2644,
											"name": "tag",
											"source": 11,
											"value": "206"
										},
										{
											"begin": 2525,
											"end": 2644,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2683,
											"end": 2684,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2708,
											"end": 2761,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "208"
										},
										{
											"begin": 2753,
											"end": 2760,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 2744,
											"end": 2750,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2733,
											"end": 2742,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 2729,
											"end": 2751,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2708,
											"end": 2761,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "151"
										},
										{
											"begin": 2708,
											"end": 2761,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2708,
											"end": 2761,
											"name": "tag",
											"source": 11,
											"value": "208"
										},
										{
											"begin": 2708,
											"end": 2761,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2698,
											"end": 2761,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2698,
											"end": 2761,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2654,
											"end": 2771,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2810,
											"end": 2812,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2836,
											"end": 2889,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "209"
										},
										{
											"begin": 2881,
											"end": 2888,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 2872,
											"end": 2878,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2861,
											"end": 2870,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 2857,
											"end": 2879,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2836,
											"end": 2889,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "154"
										},
										{
											"begin": 2836,
											"end": 2889,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2836,
											"end": 2889,
											"name": "tag",
											"source": 11,
											"value": "209"
										},
										{
											"begin": 2836,
											"end": 2889,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2826,
											"end": 2889,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2826,
											"end": 2889,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2781,
											"end": 2899,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2432,
											"end": 2906,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2912,
											"end": 3002,
											"name": "tag",
											"source": 11,
											"value": "155"
										},
										{
											"begin": 2912,
											"end": 3002,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2946,
											"end": 2953,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2989,
											"end": 2994,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2982,
											"end": 2995,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2975,
											"end": 2996,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2964,
											"end": 2996,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2964,
											"end": 2996,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2912,
											"end": 3002,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2912,
											"end": 3002,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2912,
											"end": 3002,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2912,
											"end": 3002,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3008,
											"end": 3117,
											"name": "tag",
											"source": 11,
											"value": "156"
										},
										{
											"begin": 3008,
											"end": 3117,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "212"
										},
										{
											"begin": 3104,
											"end": 3109,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "155"
										},
										{
											"begin": 3089,
											"end": 3110,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "tag",
											"source": 11,
											"value": "212"
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3084,
											"end": 3087,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3077,
											"end": 3111,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3008,
											"end": 3117,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3008,
											"end": 3117,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3008,
											"end": 3117,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "tag",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3210,
											"end": 3214,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3248,
											"end": 3250,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3237,
											"end": 3246,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3233,
											"end": 3251,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3225,
											"end": 3251,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3225,
											"end": 3251,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3261,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "214"
										},
										{
											"begin": 3323,
											"end": 3324,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3312,
											"end": 3321,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3308,
											"end": 3325,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3299,
											"end": 3305,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 3261,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "156"
										},
										{
											"begin": 3261,
											"end": 3326,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3261,
											"end": 3326,
											"name": "tag",
											"source": 11,
											"value": "214"
										},
										{
											"begin": 3261,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3123,
											"end": 3333,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3339,
											"end": 3457,
											"name": "tag",
											"source": 11,
											"value": "157"
										},
										{
											"begin": 3339,
											"end": 3457,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3426,
											"end": 3450,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "216"
										},
										{
											"begin": 3444,
											"end": 3449,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3426,
											"end": 3450,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "152"
										},
										{
											"begin": 3426,
											"end": 3450,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3426,
											"end": 3450,
											"name": "tag",
											"source": 11,
											"value": "216"
										},
										{
											"begin": 3426,
											"end": 3450,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3421,
											"end": 3424,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3414,
											"end": 3451,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3339,
											"end": 3457,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3339,
											"end": 3457,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3339,
											"end": 3457,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "tag",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3556,
											"end": 3560,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3594,
											"end": 3596,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3583,
											"end": 3592,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3579,
											"end": 3597,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3571,
											"end": 3597,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3571,
											"end": 3597,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3607,
											"end": 3678,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "218"
										},
										{
											"begin": 3675,
											"end": 3676,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3664,
											"end": 3673,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3660,
											"end": 3677,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3651,
											"end": 3657,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 3607,
											"end": 3678,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "157"
										},
										{
											"begin": 3607,
											"end": 3678,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3607,
											"end": 3678,
											"name": "tag",
											"source": 11,
											"value": "218"
										},
										{
											"begin": 3607,
											"end": 3678,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3463,
											"end": 3685,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "tag",
											"source": 11,
											"value": "31"
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3768,
											"end": 3774,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3776,
											"end": 3782,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3784,
											"end": 3790,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3833,
											"end": 3835,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 3821,
											"end": 3830,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 3812,
											"end": 3819,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 3808,
											"end": 3831,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3804,
											"end": 3836,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 3801,
											"end": 3920,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3801,
											"end": 3920,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "220"
										},
										{
											"begin": 3801,
											"end": 3920,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3839,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "221"
										},
										{
											"begin": 3839,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "146"
										},
										{
											"begin": 3839,
											"end": 3918,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3839,
											"end": 3918,
											"name": "tag",
											"source": 11,
											"value": "221"
										},
										{
											"begin": 3839,
											"end": 3918,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3801,
											"end": 3920,
											"name": "tag",
											"source": 11,
											"value": "220"
										},
										{
											"begin": 3801,
											"end": 3920,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3959,
											"end": 3960,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3984,
											"end": 4037,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "222"
										},
										{
											"begin": 4029,
											"end": 4036,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 4020,
											"end": 4026,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4009,
											"end": 4018,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 4005,
											"end": 4027,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3984,
											"end": 4037,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "151"
										},
										{
											"begin": 3984,
											"end": 4037,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3984,
											"end": 4037,
											"name": "tag",
											"source": 11,
											"value": "222"
										},
										{
											"begin": 3984,
											"end": 4037,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3974,
											"end": 4037,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 3974,
											"end": 4037,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3930,
											"end": 4047,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4086,
											"end": 4088,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4112,
											"end": 4165,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "223"
										},
										{
											"begin": 4157,
											"end": 4164,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 4148,
											"end": 4154,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4137,
											"end": 4146,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 4133,
											"end": 4155,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4112,
											"end": 4165,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "151"
										},
										{
											"begin": 4112,
											"end": 4165,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4112,
											"end": 4165,
											"name": "tag",
											"source": 11,
											"value": "223"
										},
										{
											"begin": 4112,
											"end": 4165,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4102,
											"end": 4165,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 4102,
											"end": 4165,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4175,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4214,
											"end": 4216,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4240,
											"end": 4293,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "224"
										},
										{
											"begin": 4285,
											"end": 4292,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 4276,
											"end": 4282,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4265,
											"end": 4274,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 4261,
											"end": 4283,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4240,
											"end": 4293,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "154"
										},
										{
											"begin": 4240,
											"end": 4293,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4240,
											"end": 4293,
											"name": "tag",
											"source": 11,
											"value": "224"
										},
										{
											"begin": 4240,
											"end": 4293,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4230,
											"end": 4293,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4230,
											"end": 4293,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4185,
											"end": 4303,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3691,
											"end": 4310,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4316,
											"end": 4402,
											"name": "tag",
											"source": 11,
											"value": "158"
										},
										{
											"begin": 4316,
											"end": 4402,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4351,
											"end": 4358,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4391,
											"end": 4395,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 4384,
											"end": 4389,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4380,
											"end": 4396,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4369,
											"end": 4396,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4369,
											"end": 4396,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4316,
											"end": 4402,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4316,
											"end": 4402,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4316,
											"end": 4402,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4316,
											"end": 4402,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4408,
											"end": 4520,
											"name": "tag",
											"source": 11,
											"value": "159"
										},
										{
											"begin": 4408,
											"end": 4520,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "227"
										},
										{
											"begin": 4507,
											"end": 4512,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "158"
										},
										{
											"begin": 4491,
											"end": 4513,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "tag",
											"source": 11,
											"value": "227"
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4486,
											"end": 4489,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4479,
											"end": 4514,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4408,
											"end": 4520,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4408,
											"end": 4520,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4408,
											"end": 4520,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "tag",
											"source": 11,
											"value": "37"
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4615,
											"end": 4619,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4653,
											"end": 4655,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4642,
											"end": 4651,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4638,
											"end": 4656,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4630,
											"end": 4656,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4630,
											"end": 4656,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4666,
											"end": 4733,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "229"
										},
										{
											"begin": 4730,
											"end": 4731,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4719,
											"end": 4728,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 4715,
											"end": 4732,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4706,
											"end": 4712,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 4666,
											"end": 4733,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "159"
										},
										{
											"begin": 4666,
											"end": 4733,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4666,
											"end": 4733,
											"name": "tag",
											"source": 11,
											"value": "229"
										},
										{
											"begin": 4666,
											"end": 4733,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4526,
											"end": 4740,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4746,
											"end": 5075,
											"name": "tag",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 4746,
											"end": 5075,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4805,
											"end": 4811,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4854,
											"end": 4856,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4842,
											"end": 4851,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4833,
											"end": 4840,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 4829,
											"end": 4852,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4825,
											"end": 4857,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 4822,
											"end": 4941,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4822,
											"end": 4941,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "231"
										},
										{
											"begin": 4822,
											"end": 4941,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4860,
											"end": 4939,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "232"
										},
										{
											"begin": 4860,
											"end": 4939,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "146"
										},
										{
											"begin": 4860,
											"end": 4939,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4860,
											"end": 4939,
											"name": "tag",
											"source": 11,
											"value": "232"
										},
										{
											"begin": 4860,
											"end": 4939,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4822,
											"end": 4941,
											"name": "tag",
											"source": 11,
											"value": "231"
										},
										{
											"begin": 4822,
											"end": 4941,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4980,
											"end": 4981,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5005,
											"end": 5058,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "233"
										},
										{
											"begin": 5050,
											"end": 5057,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 5041,
											"end": 5047,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5030,
											"end": 5039,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 5026,
											"end": 5048,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5005,
											"end": 5058,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "151"
										},
										{
											"begin": 5005,
											"end": 5058,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5005,
											"end": 5058,
											"name": "tag",
											"source": 11,
											"value": "233"
										},
										{
											"begin": 5005,
											"end": 5058,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4995,
											"end": 5058,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4995,
											"end": 5058,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4951,
											"end": 5068,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4746,
											"end": 5075,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 4746,
											"end": 5075,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4746,
											"end": 5075,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4746,
											"end": 5075,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4746,
											"end": 5075,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5081,
											"end": 5555,
											"name": "tag",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 5081,
											"end": 5555,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5149,
											"end": 5155,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5157,
											"end": 5163,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5206,
											"end": 5208,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5194,
											"end": 5203,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 5185,
											"end": 5192,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 5181,
											"end": 5204,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5177,
											"end": 5209,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 5174,
											"end": 5293,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5174,
											"end": 5293,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "235"
										},
										{
											"begin": 5174,
											"end": 5293,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 5212,
											"end": 5291,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "236"
										},
										{
											"begin": 5212,
											"end": 5291,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "146"
										},
										{
											"begin": 5212,
											"end": 5291,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5212,
											"end": 5291,
											"name": "tag",
											"source": 11,
											"value": "236"
										},
										{
											"begin": 5212,
											"end": 5291,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5174,
											"end": 5293,
											"name": "tag",
											"source": 11,
											"value": "235"
										},
										{
											"begin": 5174,
											"end": 5293,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5332,
											"end": 5333,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5357,
											"end": 5410,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "237"
										},
										{
											"begin": 5402,
											"end": 5409,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 5393,
											"end": 5399,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5382,
											"end": 5391,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 5378,
											"end": 5400,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5357,
											"end": 5410,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "151"
										},
										{
											"begin": 5357,
											"end": 5410,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5357,
											"end": 5410,
											"name": "tag",
											"source": 11,
											"value": "237"
										},
										{
											"begin": 5357,
											"end": 5410,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5347,
											"end": 5410,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 5347,
											"end": 5410,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5303,
											"end": 5420,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5459,
											"end": 5461,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 5485,
											"end": 5538,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "238"
										},
										{
											"begin": 5530,
											"end": 5537,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 5521,
											"end": 5527,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5510,
											"end": 5519,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 5506,
											"end": 5528,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5485,
											"end": 5538,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "151"
										},
										{
											"begin": 5485,
											"end": 5538,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5485,
											"end": 5538,
											"name": "tag",
											"source": 11,
											"value": "238"
										},
										{
											"begin": 5485,
											"end": 5538,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5475,
											"end": 5538,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5475,
											"end": 5538,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5430,
											"end": 5548,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5081,
											"end": 5555,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 5081,
											"end": 5555,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5081,
											"end": 5555,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 5081,
											"end": 5555,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5081,
											"end": 5555,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5081,
											"end": 5555,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5561,
											"end": 5741,
											"name": "tag",
											"source": 11,
											"value": "160"
										},
										{
											"begin": 5561,
											"end": 5741,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5609,
											"end": 5686,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5606,
											"end": 5607,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5599,
											"end": 5687,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5706,
											"end": 5710,
											"name": "PUSH",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 5703,
											"end": 5704,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 5696,
											"end": 5711,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5730,
											"end": 5734,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 5727,
											"end": 5728,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5720,
											"end": 5735,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 5747,
											"end": 6067,
											"name": "tag",
											"source": 11,
											"value": "65"
										},
										{
											"begin": 5747,
											"end": 6067,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5791,
											"end": 5797,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5828,
											"end": 5829,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 5822,
											"end": 5826,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5818,
											"end": 5830,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 5808,
											"end": 5830,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5808,
											"end": 5830,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5875,
											"end": 5876,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 5869,
											"end": 5873,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5865,
											"end": 5877,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 5896,
											"end": 5914,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5886,
											"end": 5967,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "241"
										},
										{
											"begin": 5886,
											"end": 5967,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 5952,
											"end": 5956,
											"name": "PUSH",
											"source": 11,
											"value": "7F"
										},
										{
											"begin": 5944,
											"end": 5950,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5940,
											"end": 5957,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 5930,
											"end": 5957,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5930,
											"end": 5957,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5886,
											"end": 5967,
											"name": "tag",
											"source": 11,
											"value": "241"
										},
										{
											"begin": 5886,
											"end": 5967,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6014,
											"end": 6016,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 6006,
											"end": 6012,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6003,
											"end": 6017,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 5983,
											"end": 6001,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5980,
											"end": 6018,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5977,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "242"
										},
										{
											"begin": 5977,
											"end": 6061,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 6033,
											"end": 6051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "243"
										},
										{
											"begin": 6033,
											"end": 6051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "160"
										},
										{
											"begin": 6033,
											"end": 6051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6033,
											"end": 6051,
											"name": "tag",
											"source": 11,
											"value": "243"
										},
										{
											"begin": 6033,
											"end": 6051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5977,
											"end": 6061,
											"name": "tag",
											"source": 11,
											"value": "242"
										},
										{
											"begin": 5977,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5798,
											"end": 6067,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5747,
											"end": 6067,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5747,
											"end": 6067,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5747,
											"end": 6067,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5747,
											"end": 6067,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6073,
											"end": 6253,
											"name": "tag",
											"source": 11,
											"value": "161"
										},
										{
											"begin": 6073,
											"end": 6253,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6121,
											"end": 6198,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6118,
											"end": 6119,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6111,
											"end": 6199,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6218,
											"end": 6222,
											"name": "PUSH",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 6215,
											"end": 6216,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 6208,
											"end": 6223,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6242,
											"end": 6246,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 6239,
											"end": 6240,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6232,
											"end": 6247,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 6259,
											"end": 6450,
											"name": "tag",
											"source": 11,
											"value": "88"
										},
										{
											"begin": 6259,
											"end": 6450,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6299,
											"end": 6302,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6318,
											"end": 6338,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "246"
										},
										{
											"begin": 6336,
											"end": 6337,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6318,
											"end": 6338,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "152"
										},
										{
											"begin": 6318,
											"end": 6338,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6318,
											"end": 6338,
											"name": "tag",
											"source": 11,
											"value": "246"
										},
										{
											"begin": 6318,
											"end": 6338,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6313,
											"end": 6338,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6313,
											"end": 6338,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6352,
											"end": 6372,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "247"
										},
										{
											"begin": 6370,
											"end": 6371,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 6352,
											"end": 6372,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "152"
										},
										{
											"begin": 6352,
											"end": 6372,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6352,
											"end": 6372,
											"name": "tag",
											"source": 11,
											"value": "247"
										},
										{
											"begin": 6352,
											"end": 6372,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6347,
											"end": 6372,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 6347,
											"end": 6372,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6395,
											"end": 6396,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6392,
											"end": 6393,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6388,
											"end": 6397,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6381,
											"end": 6397,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6381,
											"end": 6397,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6416,
											"end": 6419,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6413,
											"end": 6414,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6410,
											"end": 6420,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 6407,
											"end": 6443,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 6407,
											"end": 6443,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "248"
										},
										{
											"begin": 6407,
											"end": 6443,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 6423,
											"end": 6441,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "249"
										},
										{
											"begin": 6423,
											"end": 6441,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "161"
										},
										{
											"begin": 6423,
											"end": 6441,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6423,
											"end": 6441,
											"name": "tag",
											"source": 11,
											"value": "249"
										},
										{
											"begin": 6423,
											"end": 6441,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6407,
											"end": 6443,
											"name": "tag",
											"source": 11,
											"value": "248"
										},
										{
											"begin": 6407,
											"end": 6443,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6259,
											"end": 6450,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 6259,
											"end": 6450,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6259,
											"end": 6450,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6259,
											"end": 6450,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6259,
											"end": 6450,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6456,
											"end": 6680,
											"name": "tag",
											"source": 11,
											"value": "162"
										},
										{
											"begin": 6456,
											"end": 6680,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6596,
											"end": 6630,
											"name": "PUSH",
											"source": 11,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 6592,
											"end": 6593,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6584,
											"end": 6590,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6580,
											"end": 6594,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6573,
											"end": 6631,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6665,
											"end": 6672,
											"name": "PUSH",
											"source": 11,
											"value": "207A65726F000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6660,
											"end": 6662,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 6652,
											"end": 6658,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6648,
											"end": 6663,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6641,
											"end": 6673,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6456,
											"end": 6680,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6456,
											"end": 6680,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6686,
											"end": 7052,
											"name": "tag",
											"source": 11,
											"value": "163"
										},
										{
											"begin": 6686,
											"end": 7052,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6828,
											"end": 6831,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6849,
											"end": 6916,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "252"
										},
										{
											"begin": 6913,
											"end": 6915,
											"name": "PUSH",
											"source": 11,
											"value": "25"
										},
										{
											"begin": 6908,
											"end": 6911,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 6849,
											"end": 6916,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "141"
										},
										{
											"begin": 6849,
											"end": 6916,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6849,
											"end": 6916,
											"name": "tag",
											"source": 11,
											"value": "252"
										},
										{
											"begin": 6849,
											"end": 6916,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6842,
											"end": 6916,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6842,
											"end": 6916,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6925,
											"end": 7018,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "253"
										},
										{
											"begin": 7014,
											"end": 7017,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6925,
											"end": 7018,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "162"
										},
										{
											"begin": 6925,
											"end": 7018,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6925,
											"end": 7018,
											"name": "tag",
											"source": 11,
											"value": "253"
										},
										{
											"begin": 6925,
											"end": 7018,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7043,
											"end": 7045,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7038,
											"end": 7041,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7034,
											"end": 7046,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7027,
											"end": 7046,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7027,
											"end": 7046,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6686,
											"end": 7052,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6686,
											"end": 7052,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6686,
											"end": 7052,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6686,
											"end": 7052,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7058,
											"end": 7477,
											"name": "tag",
											"source": 11,
											"value": "101"
										},
										{
											"begin": 7058,
											"end": 7477,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7224,
											"end": 7228,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7262,
											"end": 7264,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7251,
											"end": 7260,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7247,
											"end": 7265,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7239,
											"end": 7265,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7239,
											"end": 7265,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7311,
											"end": 7320,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7305,
											"end": 7309,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7301,
											"end": 7321,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 7297,
											"end": 7298,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7286,
											"end": 7295,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7282,
											"end": 7299,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7275,
											"end": 7322,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7339,
											"end": 7470,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "255"
										},
										{
											"begin": 7465,
											"end": 7469,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7339,
											"end": 7470,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "163"
										},
										{
											"begin": 7339,
											"end": 7470,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7339,
											"end": 7470,
											"name": "tag",
											"source": 11,
											"value": "255"
										},
										{
											"begin": 7339,
											"end": 7470,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7331,
											"end": 7470,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7331,
											"end": 7470,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7058,
											"end": 7477,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7058,
											"end": 7477,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7058,
											"end": 7477,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7058,
											"end": 7477,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7483,
											"end": 7706,
											"name": "tag",
											"source": 11,
											"value": "164"
										},
										{
											"begin": 7483,
											"end": 7706,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7623,
											"end": 7657,
											"name": "PUSH",
											"source": 11,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 7619,
											"end": 7620,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7611,
											"end": 7617,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7607,
											"end": 7621,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7600,
											"end": 7658,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7692,
											"end": 7698,
											"name": "PUSH",
											"source": 11,
											"value": "7265737300000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7687,
											"end": 7689,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7679,
											"end": 7685,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7675,
											"end": 7690,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7668,
											"end": 7699,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7483,
											"end": 7706,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7483,
											"end": 7706,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7712,
											"end": 8078,
											"name": "tag",
											"source": 11,
											"value": "165"
										},
										{
											"begin": 7712,
											"end": 8078,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7854,
											"end": 7857,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7875,
											"end": 7942,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "258"
										},
										{
											"begin": 7939,
											"end": 7941,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 7934,
											"end": 7937,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7875,
											"end": 7942,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "141"
										},
										{
											"begin": 7875,
											"end": 7942,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7875,
											"end": 7942,
											"name": "tag",
											"source": 11,
											"value": "258"
										},
										{
											"begin": 7875,
											"end": 7942,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7868,
											"end": 7942,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7868,
											"end": 7942,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7951,
											"end": 8044,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "259"
										},
										{
											"begin": 8040,
											"end": 8043,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7951,
											"end": 8044,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "164"
										},
										{
											"begin": 7951,
											"end": 8044,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7951,
											"end": 8044,
											"name": "tag",
											"source": 11,
											"value": "259"
										},
										{
											"begin": 7951,
											"end": 8044,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8069,
											"end": 8071,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8064,
											"end": 8067,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8060,
											"end": 8072,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8053,
											"end": 8072,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8053,
											"end": 8072,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7712,
											"end": 8078,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7712,
											"end": 8078,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7712,
											"end": 8078,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7712,
											"end": 8078,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8084,
											"end": 8503,
											"name": "tag",
											"source": 11,
											"value": "111"
										},
										{
											"begin": 8084,
											"end": 8503,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8250,
											"end": 8254,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8288,
											"end": 8290,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 8277,
											"end": 8286,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8273,
											"end": 8291,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8265,
											"end": 8291,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8265,
											"end": 8291,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8337,
											"end": 8346,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8331,
											"end": 8335,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8327,
											"end": 8347,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 8323,
											"end": 8324,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8312,
											"end": 8321,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8308,
											"end": 8325,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8301,
											"end": 8348,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8365,
											"end": 8496,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "261"
										},
										{
											"begin": 8491,
											"end": 8495,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8365,
											"end": 8496,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "165"
										},
										{
											"begin": 8365,
											"end": 8496,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8365,
											"end": 8496,
											"name": "tag",
											"source": 11,
											"value": "261"
										},
										{
											"begin": 8365,
											"end": 8496,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8357,
											"end": 8496,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8357,
											"end": 8496,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8084,
											"end": 8503,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8084,
											"end": 8503,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8084,
											"end": 8503,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8084,
											"end": 8503,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8509,
											"end": 8730,
											"name": "tag",
											"source": 11,
											"value": "166"
										},
										{
											"begin": 8509,
											"end": 8730,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8649,
											"end": 8683,
											"name": "PUSH",
											"source": 11,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 8645,
											"end": 8646,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8637,
											"end": 8643,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8633,
											"end": 8647,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8626,
											"end": 8684,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8718,
											"end": 8722,
											"name": "PUSH",
											"source": 11,
											"value": "7373000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8713,
											"end": 8715,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 8705,
											"end": 8711,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8701,
											"end": 8716,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8694,
											"end": 8723,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8509,
											"end": 8730,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8509,
											"end": 8730,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8736,
											"end": 9102,
											"name": "tag",
											"source": 11,
											"value": "167"
										},
										{
											"begin": 8736,
											"end": 9102,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8878,
											"end": 8881,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8899,
											"end": 8966,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "264"
										},
										{
											"begin": 8963,
											"end": 8965,
											"name": "PUSH",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 8958,
											"end": 8961,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8899,
											"end": 8966,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "141"
										},
										{
											"begin": 8899,
											"end": 8966,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8899,
											"end": 8966,
											"name": "tag",
											"source": 11,
											"value": "264"
										},
										{
											"begin": 8899,
											"end": 8966,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8892,
											"end": 8966,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8892,
											"end": 8966,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8975,
											"end": 9068,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "265"
										},
										{
											"begin": 9064,
											"end": 9067,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8975,
											"end": 9068,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "166"
										},
										{
											"begin": 8975,
											"end": 9068,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8975,
											"end": 9068,
											"name": "tag",
											"source": 11,
											"value": "265"
										},
										{
											"begin": 8975,
											"end": 9068,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9093,
											"end": 9095,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9088,
											"end": 9091,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9084,
											"end": 9096,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9077,
											"end": 9096,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9077,
											"end": 9096,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8736,
											"end": 9102,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8736,
											"end": 9102,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8736,
											"end": 9102,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8736,
											"end": 9102,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9108,
											"end": 9527,
											"name": "tag",
											"source": 11,
											"value": "114"
										},
										{
											"begin": 9108,
											"end": 9527,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9274,
											"end": 9278,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9312,
											"end": 9314,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9301,
											"end": 9310,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9297,
											"end": 9315,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9289,
											"end": 9315,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9289,
											"end": 9315,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9361,
											"end": 9370,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9355,
											"end": 9359,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9351,
											"end": 9371,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 9347,
											"end": 9348,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9336,
											"end": 9345,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 9332,
											"end": 9349,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9325,
											"end": 9372,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9389,
											"end": 9520,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "267"
										},
										{
											"begin": 9515,
											"end": 9519,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9389,
											"end": 9520,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "167"
										},
										{
											"begin": 9389,
											"end": 9520,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9389,
											"end": 9520,
											"name": "tag",
											"source": 11,
											"value": "267"
										},
										{
											"begin": 9389,
											"end": 9520,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9381,
											"end": 9520,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9381,
											"end": 9520,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9108,
											"end": 9527,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9108,
											"end": 9527,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9108,
											"end": 9527,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9108,
											"end": 9527,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9533,
											"end": 9712,
											"name": "tag",
											"source": 11,
											"value": "168"
										},
										{
											"begin": 9533,
											"end": 9712,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9673,
											"end": 9704,
											"name": "PUSH",
											"source": 11,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 9669,
											"end": 9670,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9661,
											"end": 9667,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9657,
											"end": 9671,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9650,
											"end": 9705,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9533,
											"end": 9712,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9533,
											"end": 9712,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9718,
											"end": 10084,
											"name": "tag",
											"source": 11,
											"value": "169"
										},
										{
											"begin": 9718,
											"end": 10084,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9860,
											"end": 9863,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9881,
											"end": 9948,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "270"
										},
										{
											"begin": 9945,
											"end": 9947,
											"name": "PUSH",
											"source": 11,
											"value": "1D"
										},
										{
											"begin": 9940,
											"end": 9943,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 9881,
											"end": 9948,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "141"
										},
										{
											"begin": 9881,
											"end": 9948,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9881,
											"end": 9948,
											"name": "tag",
											"source": 11,
											"value": "270"
										},
										{
											"begin": 9881,
											"end": 9948,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9874,
											"end": 9948,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9874,
											"end": 9948,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9957,
											"end": 10050,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "271"
										},
										{
											"begin": 10046,
											"end": 10049,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9957,
											"end": 10050,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "168"
										},
										{
											"begin": 9957,
											"end": 10050,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9957,
											"end": 10050,
											"name": "tag",
											"source": 11,
											"value": "271"
										},
										{
											"begin": 9957,
											"end": 10050,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10075,
											"end": 10077,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 10070,
											"end": 10073,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10066,
											"end": 10078,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10059,
											"end": 10078,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10059,
											"end": 10078,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9718,
											"end": 10084,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9718,
											"end": 10084,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9718,
											"end": 10084,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9718,
											"end": 10084,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10090,
											"end": 10509,
											"name": "tag",
											"source": 11,
											"value": "121"
										},
										{
											"begin": 10090,
											"end": 10509,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10256,
											"end": 10260,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10294,
											"end": 10296,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 10283,
											"end": 10292,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10279,
											"end": 10297,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10271,
											"end": 10297,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10271,
											"end": 10297,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10343,
											"end": 10352,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10337,
											"end": 10341,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10333,
											"end": 10353,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 10329,
											"end": 10330,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10318,
											"end": 10327,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10314,
											"end": 10331,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10307,
											"end": 10354,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10371,
											"end": 10502,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "273"
										},
										{
											"begin": 10497,
											"end": 10501,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 10371,
											"end": 10502,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "169"
										},
										{
											"begin": 10371,
											"end": 10502,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10371,
											"end": 10502,
											"name": "tag",
											"source": 11,
											"value": "273"
										},
										{
											"begin": 10371,
											"end": 10502,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10363,
											"end": 10502,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10363,
											"end": 10502,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10090,
											"end": 10509,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 10090,
											"end": 10509,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10090,
											"end": 10509,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10090,
											"end": 10509,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10515,
											"end": 10739,
											"name": "tag",
											"source": 11,
											"value": "170"
										},
										{
											"begin": 10515,
											"end": 10739,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10655,
											"end": 10689,
											"name": "PUSH",
											"source": 11,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 10651,
											"end": 10652,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10643,
											"end": 10649,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10639,
											"end": 10653,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10632,
											"end": 10690,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10724,
											"end": 10731,
											"name": "PUSH",
											"source": 11,
											"value": "6472657373000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10719,
											"end": 10721,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 10711,
											"end": 10717,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10707,
											"end": 10722,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10700,
											"end": 10732,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10515,
											"end": 10739,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10515,
											"end": 10739,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10745,
											"end": 11111,
											"name": "tag",
											"source": 11,
											"value": "171"
										},
										{
											"begin": 10745,
											"end": 11111,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10887,
											"end": 10890,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10908,
											"end": 10975,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "276"
										},
										{
											"begin": 10972,
											"end": 10974,
											"name": "PUSH",
											"source": 11,
											"value": "25"
										},
										{
											"begin": 10967,
											"end": 10970,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10908,
											"end": 10975,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "141"
										},
										{
											"begin": 10908,
											"end": 10975,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10908,
											"end": 10975,
											"name": "tag",
											"source": 11,
											"value": "276"
										},
										{
											"begin": 10908,
											"end": 10975,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10901,
											"end": 10975,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 10901,
											"end": 10975,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10984,
											"end": 11077,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "277"
										},
										{
											"begin": 11073,
											"end": 11076,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10984,
											"end": 11077,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "170"
										},
										{
											"begin": 10984,
											"end": 11077,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10984,
											"end": 11077,
											"name": "tag",
											"source": 11,
											"value": "277"
										},
										{
											"begin": 10984,
											"end": 11077,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11102,
											"end": 11104,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 11097,
											"end": 11100,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11093,
											"end": 11105,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11086,
											"end": 11105,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11086,
											"end": 11105,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10745,
											"end": 11111,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 10745,
											"end": 11111,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10745,
											"end": 11111,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10745,
											"end": 11111,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 11117,
											"end": 11536,
											"name": "tag",
											"source": 11,
											"value": "126"
										},
										{
											"begin": 11117,
											"end": 11536,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11283,
											"end": 11287,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11321,
											"end": 11323,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 11310,
											"end": 11319,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11306,
											"end": 11324,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11298,
											"end": 11324,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11298,
											"end": 11324,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11370,
											"end": 11379,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 11364,
											"end": 11368,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 11360,
											"end": 11380,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 11356,
											"end": 11357,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11345,
											"end": 11354,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 11341,
											"end": 11358,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11334,
											"end": 11381,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11398,
											"end": 11529,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "279"
										},
										{
											"begin": 11524,
											"end": 11528,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 11398,
											"end": 11529,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "171"
										},
										{
											"begin": 11398,
											"end": 11529,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 11398,
											"end": 11529,
											"name": "tag",
											"source": 11,
											"value": "279"
										},
										{
											"begin": 11398,
											"end": 11529,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11390,
											"end": 11529,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11390,
											"end": 11529,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11117,
											"end": 11536,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 11117,
											"end": 11536,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11117,
											"end": 11536,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11117,
											"end": 11536,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 11542,
											"end": 11764,
											"name": "tag",
											"source": 11,
											"value": "172"
										},
										{
											"begin": 11542,
											"end": 11764,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11682,
											"end": 11716,
											"name": "PUSH",
											"source": 11,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 11678,
											"end": 11679,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11670,
											"end": 11676,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11666,
											"end": 11680,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11659,
											"end": 11717,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11751,
											"end": 11756,
											"name": "PUSH",
											"source": 11,
											"value": "6573730000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11746,
											"end": 11748,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 11738,
											"end": 11744,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11734,
											"end": 11749,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11727,
											"end": 11757,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11542,
											"end": 11764,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11542,
											"end": 11764,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 11770,
											"end": 12136,
											"name": "tag",
											"source": 11,
											"value": "173"
										},
										{
											"begin": 11770,
											"end": 12136,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11912,
											"end": 11915,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11933,
											"end": 12000,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "282"
										},
										{
											"begin": 11997,
											"end": 11999,
											"name": "PUSH",
											"source": 11,
											"value": "23"
										},
										{
											"begin": 11992,
											"end": 11995,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 11933,
											"end": 12000,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "141"
										},
										{
											"begin": 11933,
											"end": 12000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 11933,
											"end": 12000,
											"name": "tag",
											"source": 11,
											"value": "282"
										},
										{
											"begin": 11933,
											"end": 12000,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11926,
											"end": 12000,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 11926,
											"end": 12000,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12009,
											"end": 12102,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "283"
										},
										{
											"begin": 12098,
											"end": 12101,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12009,
											"end": 12102,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "172"
										},
										{
											"begin": 12009,
											"end": 12102,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 12009,
											"end": 12102,
											"name": "tag",
											"source": 11,
											"value": "283"
										},
										{
											"begin": 12009,
											"end": 12102,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12127,
											"end": 12129,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 12122,
											"end": 12125,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12118,
											"end": 12130,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12111,
											"end": 12130,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12111,
											"end": 12130,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11770,
											"end": 12136,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 11770,
											"end": 12136,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11770,
											"end": 12136,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11770,
											"end": 12136,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 12142,
											"end": 12561,
											"name": "tag",
											"source": 11,
											"value": "129"
										},
										{
											"begin": 12142,
											"end": 12561,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12308,
											"end": 12312,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 12346,
											"end": 12348,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 12335,
											"end": 12344,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12331,
											"end": 12349,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12323,
											"end": 12349,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12323,
											"end": 12349,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12395,
											"end": 12404,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 12389,
											"end": 12393,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 12385,
											"end": 12405,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 12381,
											"end": 12382,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 12370,
											"end": 12379,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 12366,
											"end": 12383,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12359,
											"end": 12406,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12423,
											"end": 12554,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "285"
										},
										{
											"begin": 12549,
											"end": 12553,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 12423,
											"end": 12554,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "173"
										},
										{
											"begin": 12423,
											"end": 12554,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 12423,
											"end": 12554,
											"name": "tag",
											"source": 11,
											"value": "285"
										},
										{
											"begin": 12423,
											"end": 12554,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12415,
											"end": 12554,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12415,
											"end": 12554,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12142,
											"end": 12561,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 12142,
											"end": 12561,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12142,
											"end": 12561,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12142,
											"end": 12561,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 12567,
											"end": 12792,
											"name": "tag",
											"source": 11,
											"value": "174"
										},
										{
											"begin": 12567,
											"end": 12792,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12707,
											"end": 12741,
											"name": "PUSH",
											"source": 11,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 12703,
											"end": 12704,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 12695,
											"end": 12701,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12691,
											"end": 12705,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12684,
											"end": 12742,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12776,
											"end": 12784,
											"name": "PUSH",
											"source": 11,
											"value": "616C616E63650000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12771,
											"end": 12773,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 12763,
											"end": 12769,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12759,
											"end": 12774,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12752,
											"end": 12785,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12567,
											"end": 12792,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12567,
											"end": 12792,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 12798,
											"end": 13164,
											"name": "tag",
											"source": 11,
											"value": "175"
										},
										{
											"begin": 12798,
											"end": 13164,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12940,
											"end": 12943,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 12961,
											"end": 13028,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "288"
										},
										{
											"begin": 13025,
											"end": 13027,
											"name": "PUSH",
											"source": 11,
											"value": "26"
										},
										{
											"begin": 13020,
											"end": 13023,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 12961,
											"end": 13028,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "141"
										},
										{
											"begin": 12961,
											"end": 13028,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 12961,
											"end": 13028,
											"name": "tag",
											"source": 11,
											"value": "288"
										},
										{
											"begin": 12961,
											"end": 13028,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12954,
											"end": 13028,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 12954,
											"end": 13028,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13037,
											"end": 13130,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "289"
										},
										{
											"begin": 13126,
											"end": 13129,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13037,
											"end": 13130,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "174"
										},
										{
											"begin": 13037,
											"end": 13130,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 13037,
											"end": 13130,
											"name": "tag",
											"source": 11,
											"value": "289"
										},
										{
											"begin": 13037,
											"end": 13130,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13155,
											"end": 13157,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 13150,
											"end": 13153,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13146,
											"end": 13158,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 13139,
											"end": 13158,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 13139,
											"end": 13158,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12798,
											"end": 13164,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 12798,
											"end": 13164,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12798,
											"end": 13164,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12798,
											"end": 13164,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 13170,
											"end": 13589,
											"name": "tag",
											"source": 11,
											"value": "134"
										},
										{
											"begin": 13170,
											"end": 13589,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13336,
											"end": 13340,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13374,
											"end": 13376,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 13363,
											"end": 13372,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13359,
											"end": 13377,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 13351,
											"end": 13377,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 13351,
											"end": 13377,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13423,
											"end": 13432,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 13417,
											"end": 13421,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 13413,
											"end": 13433,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 13409,
											"end": 13410,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13398,
											"end": 13407,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 13394,
											"end": 13411,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 13387,
											"end": 13434,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 13451,
											"end": 13582,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "291"
										},
										{
											"begin": 13577,
											"end": 13581,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 13451,
											"end": 13582,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "175"
										},
										{
											"begin": 13451,
											"end": 13582,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 13451,
											"end": 13582,
											"name": "tag",
											"source": 11,
											"value": "291"
										},
										{
											"begin": 13451,
											"end": 13582,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13443,
											"end": 13582,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 13443,
											"end": 13582,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13170,
											"end": 13589,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 13170,
											"end": 13589,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 13170,
											"end": 13589,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13170,
											"end": 13589,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										}
									]
								}
							},
							"sourceList": [
								"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"0x/@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"0x/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"0x/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol",
								"0x/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"0x/@openzeppelin/contracts/utils/Context.sol",
								"0x/@openzeppelin/contracts/utils/Counters.sol",
								"0x/@openzeppelin/contracts/utils/Strings.sol",
								"0x/@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"0x/@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"0x/@openzeppelin/contracts/utils/math/Math.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xf40322574bcd4116b3afb756fca2d439e9094d9397f0c5dad12dffa57b08d80c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa4bb8786af2dd905ce1e40e22f7171d20bc5131015e1753a43836ee3a9c5c69\",\"dweb:/ipfs/Qmc56jJ9r58uGkgGW8LnqBARhvdks9DDujndEwsP6yBwKe\"]},\"0x/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xb98718e9848021748e17e0a0b455056e50afc2072c5ffc1791d42b3d7a5f19ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://425ed83737e7020c109d9b831155c29b74191c3dc8312f38910cf76220c21d3f\",\"dweb:/ipfs/QmSNHjTNyzcC7rkME3Eaur5QqeexQhzFKorFZuL3G2Q59k\"]},\"0x/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x939a26d76ade48bd5f95979f48972422c3fd60f6d24cce748e9f5c11b67d61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ca70ecba278fe7016faadd97028dafbc652cc0f768f0863b505c90487bbf9a28\",\"dweb:/ipfs/QmQCyJ5D8des2zWEZaEtkPakMoN9Y6Coj5ErfKZN9tCp8R\"]},\"0x/@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x263c3fa3173e8e8756bcd224dd3b8f4ee3c4a34d1cc5bdec3cc6391bb103a51a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e5e46024fbc3d6d36ab7af1aa2ac42339e55aae2ae91ffdd50efb14e2e0749f\",\"dweb:/ipfs/QmY7uxSgMFo13Ju76mcCDcuMEwhF1Loa2FxdWiZj1LGjFL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 15,
								"contract": "0x/@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 21,
								"contract": "0x/@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 23,
								"contract": "0x/@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 25,
								"contract": "0x/@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 27,
								"contract": "0x/@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"0x/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x/@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xb98718e9848021748e17e0a0b455056e50afc2072c5ffc1791d42b3d7a5f19ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://425ed83737e7020c109d9b831155c29b74191c3dc8312f38910cf76220c21d3f\",\"dweb:/ipfs/QmSNHjTNyzcC7rkME3Eaur5QqeexQhzFKorFZuL3G2Q59k\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"0x/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xb98718e9848021748e17e0a0b455056e50afc2072c5ffc1791d42b3d7a5f19ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://425ed83737e7020c109d9b831155c29b74191c3dc8312f38910cf76220c21d3f\",\"dweb:/ipfs/QmSNHjTNyzcC7rkME3Eaur5QqeexQhzFKorFZuL3G2Q59k\"]},\"0x/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x939a26d76ade48bd5f95979f48972422c3fd60f6d24cce748e9f5c11b67d61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ca70ecba278fe7016faadd97028dafbc652cc0f768f0863b505c90487bbf9a28\",\"dweb:/ipfs/QmQCyJ5D8des2zWEZaEtkPakMoN9Y6Coj5ErfKZN9tCp8R\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"0x/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
				"ERC20Permit": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "See {IERC20Permit-nonces}."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "See {IERC20Permit-permit}."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"stateVariables": {
							"_PERMIT_TYPEHASH_DEPRECATED_SLOT": {
								"custom:oz-renamed-from": "_PERMIT_TYPEHASH",
								"details": "In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`. However, to ensure consistency with the upgradeable transpiler, we will continue to reserve a slot."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"_PERMIT_TYPEHASH_DEPRECATED_SLOT\":{\"custom:oz-renamed-from\":\"_PERMIT_TYPEHASH\",\"details\":\"In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`. However, to ensure consistency with the upgradeable transpiler, we will continue to reserve a slot.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":\"ERC20Permit\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xf40322574bcd4116b3afb756fca2d439e9094d9397f0c5dad12dffa57b08d80c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa4bb8786af2dd905ce1e40e22f7171d20bc5131015e1753a43836ee3a9c5c69\",\"dweb:/ipfs/Qmc56jJ9r58uGkgGW8LnqBARhvdks9DDujndEwsP6yBwKe\"]},\"0x/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xb98718e9848021748e17e0a0b455056e50afc2072c5ffc1791d42b3d7a5f19ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://425ed83737e7020c109d9b831155c29b74191c3dc8312f38910cf76220c21d3f\",\"dweb:/ipfs/QmSNHjTNyzcC7rkME3Eaur5QqeexQhzFKorFZuL3G2Q59k\"]},\"0x/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x939a26d76ade48bd5f95979f48972422c3fd60f6d24cce748e9f5c11b67d61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ca70ecba278fe7016faadd97028dafbc652cc0f768f0863b505c90487bbf9a28\",\"dweb:/ipfs/QmQCyJ5D8des2zWEZaEtkPakMoN9Y6Coj5ErfKZN9tCp8R\"]},\"0x/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"keccak256\":\"0xa85e06f15cd95f0d5dc792cc10dcb94eaf54eba11c1a56e0bd1bda7db36264e9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://85c4526d19f968928519f64b5d0f80ecf286ea36fb83f22b96568c0518eccf54\",\"dweb:/ipfs/QmTfWBgsEtc64HsRwJ4VyRz2MmZo5Chcxu3dHJoFgbPCPP\"]},\"0x/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0x17e23545498b80ff812d1bac9d56d89c3e19b345a28982d56dbcaecfa946dc0e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://950ea62052deb5f9a93182363c59765f27e4a8869aa013213749ccaf4b25a89e\",\"dweb:/ipfs/QmTbL1DMQafrXAz8EhjNkBM41Gz7UpAoAmGCuCJmZXpeUu\"]},\"0x/@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x263c3fa3173e8e8756bcd224dd3b8f4ee3c4a34d1cc5bdec3cc6391bb103a51a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e5e46024fbc3d6d36ab7af1aa2ac42339e55aae2ae91ffdd50efb14e2e0749f\",\"dweb:/ipfs/QmY7uxSgMFo13Ju76mcCDcuMEwhF1Loa2FxdWiZj1LGjFL\"]},\"0x/@openzeppelin/contracts/utils/Counters.sol\":{\"keccak256\":\"0x85706a25d8faa15c35becf84f9c1d10284b9288c8563a70141ac0cee99acc2da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ef8ef77eae66787c448b14ded9f4f7dea3aecf27056d27c61aae76a1c5f0ec4\",\"dweb:/ipfs/QmQNH445jNghHGpbbAgsXC5zSmQwe7yW5rnfMmbaZA25M2\"]},\"0x/@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xffa03cb932c1d0dd09fe28d9443580ca2df950c44a1cd0b17b6b56257532264a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4fd109de1d916a181ca67deed97f076251e7dcce6a0781882c33b1dbef48b1da\",\"dweb:/ipfs/QmU8VfRkf1yZFA7oXG5YWRtLF1nKuE8pNXtfQgT8W9prhh\"]},\"0x/@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xae4722d439ad19e0e2f43bace85781b7324d46974fae114d6b3f71ad9d664cc5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a3fdd78813cd5436637b490f3d6b96e0a34cafe9c3f8e881ab1d908b5057fda\",\"dweb:/ipfs/QmV6NKgxShDi64RmEt7uwwawk7xTvzfCsnHHcxrKxCtXfd\"]},\"0x/@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x3f7a773b88f2d8af17a51f6ce97e1c8d4b88520b59b1f330bc42853dbe5d69fd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1092a81a57072e43d4b133d994f43fe976f7de8b970b9930948611a41d35f567\",\"dweb:/ipfs/QmXH5mjiiHA9VnCFz55VBS51LS2sFRPatx9nfCEfDEGEzp\"]},\"0x/@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xd4fe1c128b1c48cf5d4d66d1fc7b54fe96c84039d7e9a21a1450ee7b5c741e74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://efe28a568f5c4ab9042879b5eb9cf1ea7fc7dad12bf69eab8227529c008171a5\",\"dweb:/ipfs/QmNtmXBC8wBVgE6rHHMhr4kTHpLtLmWbLYjsRWbq3pHwJP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 15,
								"contract": "0x/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 21,
								"contract": "0x/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 23,
								"contract": "0x/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 25,
								"contract": "0x/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 27,
								"contract": "0x/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 712,
								"contract": "0x/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit",
								"label": "_nonces",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_struct(Counter)925_storage)"
							},
							{
								"astId": 720,
								"contract": "0x/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit",
								"label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
								"offset": 0,
								"slot": "6",
								"type": "t_bytes32"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_struct(Counter)925_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Counters.Counter)",
								"numberOfBytes": "32",
								"value": "t_struct(Counter)925_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(Counter)925_storage": {
								"encoding": "inplace",
								"label": "struct Counters.Counter",
								"members": [
									{
										"astId": 924,
										"contract": "0x/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit",
										"label": "_value",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"0x/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0x17e23545498b80ff812d1bac9d56d89c3e19b345a28982d56dbcaecfa946dc0e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://950ea62052deb5f9a93182363c59765f27e4a8869aa013213749ccaf4b25a89e\",\"dweb:/ipfs/QmTbL1DMQafrXAz8EhjNkBM41Gz7UpAoAmGCuCJmZXpeUu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"0x/@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x/@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x/@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x263c3fa3173e8e8756bcd224dd3b8f4ee3c4a34d1cc5bdec3cc6391bb103a51a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e5e46024fbc3d6d36ab7af1aa2ac42339e55aae2ae91ffdd50efb14e2e0749f\",\"dweb:/ipfs/QmY7uxSgMFo13Ju76mcCDcuMEwhF1Loa2FxdWiZj1LGjFL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"0x/@openzeppelin/contracts/utils/Counters.sol": {
				"Counters": {
					"abi": [],
					"devdoc": {
						"author": "Matt Condon (@shrugs)",
						"details": "Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`",
						"kind": "dev",
						"methods": {},
						"title": "Counters",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"0x/@openzeppelin/contracts/utils/Counters.sol\":1687:2658  library Counters {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"0x/@openzeppelin/contracts/utils/Counters.sol\":1687:2658  library Counters {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220ad9476aa8f6d0f6d43d1c602392e29a5a2ccd3d0bc3f8e0ac99a891979e29ba064736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220ad9476aa8f6d0f6d43d1c602392e29a5a2ccd3d0bc3f8e0ac99a891979e29ba064736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAD SWAP5 PUSH23 0xAA8F6D0F6D43D1C602392E29A5A2CCD3D0BC3F8E0AC99A DUP10 NOT PUSH26 0xE29BA064736F6C634300081A0033000000000000000000000000 ",
							"sourceMap": "1687:971:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220ad9476aa8f6d0f6d43d1c602392e29a5a2ccd3d0bc3f8e0ac99a891979e29ba064736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAD SWAP5 PUSH23 0xAA8F6D0F6D43D1C602392E29A5A2CCD3D0BC3F8E0AC99A DUP10 NOT PUSH26 0xE29BA064736F6C634300081A0033000000000000000000000000 ",
							"sourceMap": "1687:971:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"current(struct Counters.Counter storage pointer)": "infinite",
								"decrement(struct Counters.Counter storage pointer)": "infinite",
								"increment(struct Counters.Counter storage pointer)": "infinite",
								"reset(struct Counters.Counter storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1687,
									"end": 2658,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "PUSH",
									"source": 6,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1687,
									"end": 2658,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ad9476aa8f6d0f6d43d1c602392e29a5a2ccd3d0bc3f8e0ac99a891979e29ba064736f6c634300081a0033",
									".code": [
										{
											"begin": 1687,
											"end": 2658,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 1687,
											"end": 2658,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 1687,
											"end": 2658,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1687,
											"end": 2658,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 1687,
											"end": 2658,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1687,
											"end": 2658,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1687,
											"end": 2658,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1687,
											"end": 2658,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1687,
											"end": 2658,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"0x/@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"0x/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"0x/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol",
								"0x/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"0x/@openzeppelin/contracts/utils/Context.sol",
								"0x/@openzeppelin/contracts/utils/Counters.sol",
								"0x/@openzeppelin/contracts/utils/Strings.sol",
								"0x/@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"0x/@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"0x/@openzeppelin/contracts/utils/math/Math.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x/@openzeppelin/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x/@openzeppelin/contracts/utils/Counters.sol\":{\"keccak256\":\"0x85706a25d8faa15c35becf84f9c1d10284b9288c8563a70141ac0cee99acc2da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ef8ef77eae66787c448b14ded9f4f7dea3aecf27056d27c61aae76a1c5f0ec4\",\"dweb:/ipfs/QmQNH445jNghHGpbbAgsXC5zSmQwe7yW5rnfMmbaZA25M2\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"0x/@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"0x/@openzeppelin/contracts/utils/Strings.sol\":1451:3516  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"0x/@openzeppelin/contracts/utils/Strings.sol\":1451:3516  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212200fd16e6e693e2ed9f240b35de1efba615bc28a33bb2e409f428d2d2229a8ed2864736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212200fd16e6e693e2ed9f240b35de1efba615bc28a33bb2e409f428d2d2229a8ed2864736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF 0xD1 PUSH15 0x6E693E2ED9F240B35DE1EFBA615BC2 DUP11 CALLER 0xBB 0x2E BLOCKHASH SWAP16 TIMESTAMP DUP14 0x2D 0x22 0x29 0xA8 0xED 0x28 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "1451:2065:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212200fd16e6e693e2ed9f240b35de1efba615bc28a33bb2e409f428d2d2229a8ed2864736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF 0xD1 PUSH15 0x6E693E2ED9F240B35DE1EFBA615BC2 DUP11 CALLER 0xBB 0x2E BLOCKHASH SWAP16 TIMESTAMP DUP14 0x2D 0x22 0x29 0xA8 0xED 0x28 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "1451:2065:7:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1451,
									"end": 3516,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "PUSH",
									"source": 7,
									"value": "B"
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "BYTE",
									"source": 7
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "PUSH",
									"source": 7,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "MSTORE8",
									"source": 7
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1451,
									"end": 3516,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200fd16e6e693e2ed9f240b35de1efba615bc28a33bb2e409f428d2d2229a8ed2864736f6c634300081a0033",
									".code": [
										{
											"begin": 1451,
											"end": 3516,
											"name": "PUSHDEPLOYADDRESS",
											"source": 7
										},
										{
											"begin": 1451,
											"end": 3516,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 1451,
											"end": 3516,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1451,
											"end": 3516,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 1451,
											"end": 3516,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1451,
											"end": 3516,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1451,
											"end": 3516,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1451,
											"end": 3516,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1451,
											"end": 3516,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							},
							"sourceList": [
								"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"0x/@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"0x/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"0x/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol",
								"0x/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"0x/@openzeppelin/contracts/utils/Context.sol",
								"0x/@openzeppelin/contracts/utils/Counters.sol",
								"0x/@openzeppelin/contracts/utils/Strings.sol",
								"0x/@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"0x/@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"0x/@openzeppelin/contracts/utils/math/Math.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x/@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x/@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xffa03cb932c1d0dd09fe28d9443580ca2df950c44a1cd0b17b6b56257532264a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4fd109de1d916a181ca67deed97f076251e7dcce6a0781882c33b1dbef48b1da\",\"dweb:/ipfs/QmU8VfRkf1yZFA7oXG5YWRtLF1nKuE8pNXtfQgT8W9prhh\"]},\"0x/@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xd4fe1c128b1c48cf5d4d66d1fc7b54fe96c84039d7e9a21a1450ee7b5c741e74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://efe28a568f5c4ab9042879b5eb9cf1ea7fc7dad12bf69eab8227529c008171a5\",\"dweb:/ipfs/QmNtmXBC8wBVgE6rHHMhr4kTHpLtLmWbLYjsRWbq3pHwJP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"0x/@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ECDSA": {
					"abi": [],
					"devdoc": {
						"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"0x/@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":1632:9800  library ECDSA {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"0x/@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":1632:9800  library ECDSA {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212208ed9f32267a7303856209358d556d3e3dccfca5e5804ba7ee1ebff74cceb45d164736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212208ed9f32267a7303856209358d556d3e3dccfca5e5804ba7ee1ebff74cceb45d164736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP15 0xD9 RETURN 0x22 PUSH8 0xA7303856209358D5 JUMP 0xD3 0xE3 0xDC 0xCF 0xCA MCOPY PC DIV 0xBA PUSH31 0xE1EBFF74CCEB45D164736F6C634300081A0033000000000000000000000000 ",
							"sourceMap": "1632:8168:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212208ed9f32267a7303856209358d556d3e3dccfca5e5804ba7ee1ebff74cceb45d164736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP15 0xD9 RETURN 0x22 PUSH8 0xA7303856209358D5 JUMP 0xD3 0xE3 0xDC 0xCF 0xCA MCOPY PC DIV 0xBA PUSH31 0xE1EBFF74CCEB45D164736F6C634300081A0033000000000000000000000000 ",
							"sourceMap": "1632:8168:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"_throwError(enum ECDSA.RecoverError)": "infinite",
								"recover(bytes32,bytes memory)": "infinite",
								"recover(bytes32,bytes32,bytes32)": "infinite",
								"recover(bytes32,uint8,bytes32,bytes32)": "infinite",
								"toEthSignedMessageHash(bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes32)": "infinite",
								"toTypedDataHash(bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,bytes memory)": "infinite",
								"tryRecover(bytes32,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,uint8,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1632,
									"end": 9800,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "PUSH",
									"source": 8,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1632,
									"end": 9800,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212208ed9f32267a7303856209358d556d3e3dccfca5e5804ba7ee1ebff74cceb45d164736f6c634300081a0033",
									".code": [
										{
											"begin": 1632,
											"end": 9800,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 1632,
											"end": 9800,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 1632,
											"end": 9800,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1632,
											"end": 9800,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 1632,
											"end": 9800,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1632,
											"end": 9800,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1632,
											"end": 9800,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1632,
											"end": 9800,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1632,
											"end": 9800,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							},
							"sourceList": [
								"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"0x/@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"0x/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"0x/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol",
								"0x/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"0x/@openzeppelin/contracts/utils/Context.sol",
								"0x/@openzeppelin/contracts/utils/Counters.sol",
								"0x/@openzeppelin/contracts/utils/Strings.sol",
								"0x/@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"0x/@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"0x/@openzeppelin/contracts/utils/math/Math.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x/@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x/@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xffa03cb932c1d0dd09fe28d9443580ca2df950c44a1cd0b17b6b56257532264a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4fd109de1d916a181ca67deed97f076251e7dcce6a0781882c33b1dbef48b1da\",\"dweb:/ipfs/QmU8VfRkf1yZFA7oXG5YWRtLF1nKuE8pNXtfQgT8W9prhh\"]},\"0x/@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xae4722d439ad19e0e2f43bace85781b7324d46974fae114d6b3f71ad9d664cc5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a3fdd78813cd5436637b490f3d6b96e0a34cafe9c3f8e881ab1d908b5057fda\",\"dweb:/ipfs/QmV6NKgxShDi64RmEt7uwwawk7xTvzfCsnHHcxrKxCtXfd\"]},\"0x/@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xd4fe1c128b1c48cf5d4d66d1fc7b54fe96c84039d7e9a21a1450ee7b5c741e74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://efe28a568f5c4ab9042879b5eb9cf1ea7fc7dad12bf69eab8227529c008171a5\",\"dweb:/ipfs/QmNtmXBC8wBVgE6rHHMhr4kTHpLtLmWbLYjsRWbq3pHwJP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"0x/@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
				"EIP712": {
					"abi": [],
					"devdoc": {
						"details": "https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x/@openzeppelin/contracts/utils/cryptography/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x/@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xffa03cb932c1d0dd09fe28d9443580ca2df950c44a1cd0b17b6b56257532264a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4fd109de1d916a181ca67deed97f076251e7dcce6a0781882c33b1dbef48b1da\",\"dweb:/ipfs/QmU8VfRkf1yZFA7oXG5YWRtLF1nKuE8pNXtfQgT8W9prhh\"]},\"0x/@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xae4722d439ad19e0e2f43bace85781b7324d46974fae114d6b3f71ad9d664cc5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a3fdd78813cd5436637b490f3d6b96e0a34cafe9c3f8e881ab1d908b5057fda\",\"dweb:/ipfs/QmV6NKgxShDi64RmEt7uwwawk7xTvzfCsnHHcxrKxCtXfd\"]},\"0x/@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x3f7a773b88f2d8af17a51f6ce97e1c8d4b88520b59b1f330bc42853dbe5d69fd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1092a81a57072e43d4b133d994f43fe976f7de8b970b9930948611a41d35f567\",\"dweb:/ipfs/QmXH5mjiiHA9VnCFz55VBS51LS2sFRPatx9nfCEfDEGEzp\"]},\"0x/@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xd4fe1c128b1c48cf5d4d66d1fc7b54fe96c84039d7e9a21a1450ee7b5c741e74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://efe28a568f5c4ab9042879b5eb9cf1ea7fc7dad12bf69eab8227529c008171a5\",\"dweb:/ipfs/QmNtmXBC8wBVgE6rHHMhr4kTHpLtLmWbLYjsRWbq3pHwJP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"0x/@openzeppelin/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"0x/@openzeppelin/contracts/utils/math/Math.sol\":1465:13767  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"0x/@openzeppelin/contracts/utils/math/Math.sol\":1465:13767  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f250d3fc40a596f5996fac062a802fa936c202eef9d20e9c99fb84969c6c7c4364736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220f250d3fc40a596f5996fac062a802fa936c202eef9d20e9c99fb84969c6c7c4364736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLCODE POP 0xD3 0xFC BLOCKHASH 0xA5 SWAP7 CREATE2 SWAP10 PUSH16 0xAC062A802FA936C202EEF9D20E9C99FB DUP5 SWAP7 SWAP13 PUSH13 0x7C4364736F6C634300081A0033 ",
							"sourceMap": "1465:12302:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220f250d3fc40a596f5996fac062a802fa936c202eef9d20e9c99fb84969c6c7c4364736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLCODE POP 0xD3 0xFC BLOCKHASH 0xA5 SWAP7 CREATE2 SWAP10 PUSH16 0xAC062A802FA936C202EEF9D20E9C99FB DUP5 SWAP7 SWAP13 PUSH13 0x7C4364736F6C634300081A0033 ",
							"sourceMap": "1465:12302:10:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1465,
									"end": 13767,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "PUSH",
									"source": 10,
									"value": "B"
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "BYTE",
									"source": 10
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "ADDRESS",
									"source": 10
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "MSTORE8",
									"source": 10
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1465,
									"end": 13767,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f250d3fc40a596f5996fac062a802fa936c202eef9d20e9c99fb84969c6c7c4364736f6c634300081a0033",
									".code": [
										{
											"begin": 1465,
											"end": 13767,
											"name": "PUSHDEPLOYADDRESS",
											"source": 10
										},
										{
											"begin": 1465,
											"end": 13767,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 1465,
											"end": 13767,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1465,
											"end": 13767,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 1465,
											"end": 13767,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1465,
											"end": 13767,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1465,
											"end": 13767,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1465,
											"end": 13767,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1465,
											"end": 13767,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							},
							"sourceList": [
								"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"0x/@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"0x/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"0x/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol",
								"0x/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"0x/@openzeppelin/contracts/utils/Context.sol",
								"0x/@openzeppelin/contracts/utils/Counters.sol",
								"0x/@openzeppelin/contracts/utils/Strings.sol",
								"0x/@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"0x/@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"0x/@openzeppelin/contracts/utils/math/Math.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x/@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x/@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xd4fe1c128b1c48cf5d4d66d1fc7b54fe96c84039d7e9a21a1450ee7b5c741e74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://efe28a568f5c4ab9042879b5eb9cf1ea7fc7dad12bf69eab8227529c008171a5\",\"dweb:/ipfs/QmNtmXBC8wBVgE6rHHMhr4kTHpLtLmWbLYjsRWbq3pHwJP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"0x/@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "0x/@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							919
						],
						"ERC20": [
							586
						],
						"IERC20": [
							664
						],
						"IERC20Metadata": [
							689
						]
					},
					"id": 587,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "1368:23:0"
						},
						{
							"absolutePath": "0x/@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 587,
							"sourceUnit": 665,
							"src": "1393:22:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "0x/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 587,
							"sourceUnit": 690,
							"src": "1416:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "0x/@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 4,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 587,
							"sourceUnit": 920,
							"src": "1458:33:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 6,
										"name": "Context",
										"nameLocations": [
											"2682:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 919,
										"src": "2682:7:0"
									},
									"id": 7,
									"nodeType": "InheritanceSpecifier",
									"src": "2682:7:0"
								},
								{
									"baseName": {
										"id": 8,
										"name": "IERC20",
										"nameLocations": [
											"2691:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 664,
										"src": "2691:6:0"
									},
									"id": 9,
									"nodeType": "InheritanceSpecifier",
									"src": "2691:6:0"
								},
								{
									"baseName": {
										"id": 10,
										"name": "IERC20Metadata",
										"nameLocations": [
											"2699:14:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 689,
										"src": "2699:14:0"
									},
									"id": 11,
									"nodeType": "InheritanceSpecifier",
									"src": "2699:14:0"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 5,
								"nodeType": "StructuredDocumentation",
								"src": "1493:1170:0",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 586,
							"linearizedBaseContracts": [
								586,
								689,
								664,
								919
							],
							"name": "ERC20",
							"nameLocation": "2673:5:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 15,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "2756:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 586,
									"src": "2720:45:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 14,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 12,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2728:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2720:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 13,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2739:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 21,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "2828:11:0",
									"nodeType": "VariableDeclaration",
									"scope": 586,
									"src": "2772:67:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 20,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 16,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2780:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2772:47:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 19,
											"keyName": "",
											"keyNameLocation": "-1:-1:-1",
											"keyType": {
												"id": 17,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2799:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "2791:27:0",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 18,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2810:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 23,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "2862:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 586,
									"src": "2846:28:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 22,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2846:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 25,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "2896:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 586,
									"src": "2881:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 24,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2881:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 27,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "2922:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 586,
									"src": "2907:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 26,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2907:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 43,
										"nodeType": "Block",
										"src": "3295:57:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 35,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 25,
														"src": "3305:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 36,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 30,
														"src": "3313:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "3305:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 38,
												"nodeType": "ExpressionStatement",
												"src": "3305:13:0"
											},
											{
												"expression": {
													"id": 41,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 39,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "3328:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 40,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 32,
														"src": "3338:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "3328:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 42,
												"nodeType": "ExpressionStatement",
												"src": "3328:17:0"
											}
										]
									},
									"documentation": {
										"id": 28,
										"nodeType": "StructuredDocumentation",
										"src": "2936:298:0",
										"text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 44,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "3265:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "3251:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 29,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3251:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "3286:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "3272:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 31,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3272:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3250:44:0"
									},
									"returnParameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3295:0:0"
									},
									"scope": 586,
									"src": "3239:113:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										676
									],
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "3486:29:0",
										"statements": [
											{
												"expression": {
													"id": 51,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 25,
													"src": "3503:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 50,
												"id": 52,
												"nodeType": "Return",
												"src": "3496:12:0"
											}
										]
									},
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "3358:54:0",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "3426:4:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 47,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3453:8:0"
									},
									"parameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3430:2:0"
									},
									"returnParameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "3471:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 48,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3471:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3470:15:0"
									},
									"scope": 586,
									"src": "3417:98:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										682
									],
									"body": {
										"id": 63,
										"nodeType": "Block",
										"src": "3699:31:0",
										"statements": [
											{
												"expression": {
													"id": 61,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "3716:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 60,
												"id": 62,
												"nodeType": "Return",
												"src": "3709:14:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "3521:102:0",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 64,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "3637:6:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 57,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3666:8:0"
									},
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3643:2:0"
									},
									"returnParameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "3684:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 58,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3684:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3683:15:0"
									},
									"scope": 586,
									"src": "3628:102:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										688
									],
									"body": {
										"id": 73,
										"nodeType": "Block",
										"src": "4419:26:0",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 71,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4436:2:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 70,
												"id": 72,
												"nodeType": "Return",
												"src": "4429:9:0"
											}
										]
									},
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "3736:613:0",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 74,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "4363:8:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 67,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4394:8:0"
									},
									"parameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4371:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 74,
												"src": "4412:5:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 68,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4412:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4411:7:0"
									},
									"scope": 586,
									"src": "4354:91:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										613
									],
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "4575:36:0",
										"statements": [
											{
												"expression": {
													"id": 81,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 23,
													"src": "4592:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 80,
												"id": 82,
												"nodeType": "Return",
												"src": "4585:19:0"
											}
										]
									},
									"documentation": {
										"id": 75,
										"nodeType": "StructuredDocumentation",
										"src": "4451:49:0",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "4514:11:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 77,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4548:8:0"
									},
									"parameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4525:2:0"
									},
									"returnParameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 79,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 84,
												"src": "4566:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 78,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4566:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4565:9:0"
									},
									"scope": 586,
									"src": "4505:106:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										621
									],
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "4752:42:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 93,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 15,
														"src": "4769:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 95,
													"indexExpression": {
														"id": 94,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 87,
														"src": "4779:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4769:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 92,
												"id": 96,
												"nodeType": "Return",
												"src": "4762:25:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "4617:47:0",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "4678:9:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 89,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4725:8:0"
									},
									"parameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4696:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "4688:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 86,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4688:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4687:17:0"
									},
									"returnParameters": {
										"id": 92,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "4743:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 90,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4743:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4742:9:0"
									},
									"scope": 586,
									"src": "4669:125:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										631
									],
									"body": {
										"id": 122,
										"nodeType": "Block",
										"src": "5075:104:0",
										"statements": [
											{
												"assignments": [
													110
												],
												"declarations": [
													{
														"constant": false,
														"id": 110,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "5093:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 122,
														"src": "5085:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 109,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5085:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 113,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 111,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 909,
														"src": "5101:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5101:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5085:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 115,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 110,
															"src": "5133:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 116,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "5140:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 117,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 103,
															"src": "5144:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 114,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 346,
														"src": "5123:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5123:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 119,
												"nodeType": "ExpressionStatement",
												"src": "5123:28:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 120,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5168:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 108,
												"id": 121,
												"nodeType": "Return",
												"src": "5161:11:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "4800:185:0",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 123,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "4999:8:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 105,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5051:8:0"
									},
									"parameters": {
										"id": 104,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5016:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "5008:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5008:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 103,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5028:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "5020:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 102,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5020:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5007:28:0"
									},
									"returnParameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "5069:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 106,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5069:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5068:6:0"
									},
									"scope": 586,
									"src": "4990:189:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										641
									],
									"body": {
										"id": 140,
										"nodeType": "Block",
										"src": "5335:51:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 134,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 21,
															"src": "5352:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 136,
														"indexExpression": {
															"id": 135,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 126,
															"src": "5364:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5352:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 138,
													"indexExpression": {
														"id": 137,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 128,
														"src": "5371:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5352:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 133,
												"id": 139,
												"nodeType": "Return",
												"src": "5345:34:0"
											}
										]
									},
									"documentation": {
										"id": 124,
										"nodeType": "StructuredDocumentation",
										"src": "5185:47:0",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 141,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "5246:9:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 130,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5308:8:0"
									},
									"parameters": {
										"id": 129,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 126,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5264:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "5256:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 125,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5256:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 128,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5279:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "5271:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 127,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5271:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5255:32:0"
									},
									"returnParameters": {
										"id": 133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 132,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "5326:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 131,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5326:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5325:9:0"
									},
									"scope": 586,
									"src": "5237:149:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										651
									],
									"body": {
										"id": 165,
										"nodeType": "Block",
										"src": "5783:108:0",
										"statements": [
											{
												"assignments": [
													153
												],
												"declarations": [
													{
														"constant": false,
														"id": 153,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "5801:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 165,
														"src": "5793:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 152,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5793:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 156,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 154,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 909,
														"src": "5809:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 155,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5809:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5793:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 158,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 153,
															"src": "5840:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 159,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 144,
															"src": "5847:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 160,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 146,
															"src": "5856:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 157,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 520,
														"src": "5831:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5831:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 162,
												"nodeType": "ExpressionStatement",
												"src": "5831:32:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 163,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5880:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 151,
												"id": 164,
												"nodeType": "Return",
												"src": "5873:11:0"
											}
										]
									},
									"documentation": {
										"id": 142,
										"nodeType": "StructuredDocumentation",
										"src": "5392:297:0",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 166,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "5703:7:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 148,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5759:8:0"
									},
									"parameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 144,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5719:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "5711:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 143,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5711:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 146,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5736:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "5728:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 145,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5728:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5710:33:0"
									},
									"returnParameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "5777:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 149,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5777:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5776:6:0"
									},
									"scope": 586,
									"src": "5694:197:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										663
									],
									"body": {
										"id": 198,
										"nodeType": "Block",
										"src": "6586:153:0",
										"statements": [
											{
												"assignments": [
													180
												],
												"declarations": [
													{
														"constant": false,
														"id": 180,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "6604:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 198,
														"src": "6596:15:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 179,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6596:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 183,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 181,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 909,
														"src": "6614:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 182,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6614:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6596:30:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 185,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 169,
															"src": "6652:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 186,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 180,
															"src": "6658:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 187,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 173,
															"src": "6667:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 184,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 563,
														"src": "6636:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 188,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6636:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 189,
												"nodeType": "ExpressionStatement",
												"src": "6636:38:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 191,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 169,
															"src": "6694:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 192,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 171,
															"src": "6700:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 193,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 173,
															"src": "6704:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 190,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 346,
														"src": "6684:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 194,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6684:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 195,
												"nodeType": "ExpressionStatement",
												"src": "6684:27:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 196,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6728:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 178,
												"id": 197,
												"nodeType": "Return",
												"src": "6721:11:0"
											}
										]
									},
									"documentation": {
										"id": 167,
										"nodeType": "StructuredDocumentation",
										"src": "5897:551:0",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 199,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "6462:12:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 175,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "6562:8:0"
									},
									"parameters": {
										"id": 174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6492:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "6484:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6484:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 171,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6514:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "6506:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6506:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6534:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "6526:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 172,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6526:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6474:72:0"
									},
									"returnParameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 199,
												"src": "6580:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 176,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6580:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6579:6:0"
									},
									"scope": 586,
									"src": "6453:286:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 227,
										"nodeType": "Block",
										"src": "7228:140:0",
										"statements": [
											{
												"assignments": [
													210
												],
												"declarations": [
													{
														"constant": false,
														"id": 210,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "7246:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 227,
														"src": "7238:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 209,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7238:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 213,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 211,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 909,
														"src": "7254:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7254:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7238:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 215,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 210,
															"src": "7285:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 216,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 202,
															"src": "7292:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 222,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 218,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 210,
																		"src": "7311:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 219,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 202,
																		"src": "7318:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 217,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 141,
																	"src": "7301:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 220,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7301:25:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 221,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 204,
																"src": "7329:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7301:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 214,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 520,
														"src": "7276:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 223,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7276:64:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 224,
												"nodeType": "ExpressionStatement",
												"src": "7276:64:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 225,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7357:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 208,
												"id": 226,
												"nodeType": "Return",
												"src": "7350:11:0"
											}
										]
									},
									"documentation": {
										"id": 200,
										"nodeType": "StructuredDocumentation",
										"src": "6745:384:0",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 228,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "7143:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "7169:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "7161:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 201,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7161:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "7186:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "7178:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 203,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7178:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7160:37:0"
									},
									"returnParameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "7222:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 206,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7222:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7221:6:0"
									},
									"scope": 586,
									"src": "7134:234:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 268,
										"nodeType": "Block",
										"src": "7954:328:0",
										"statements": [
											{
												"assignments": [
													239
												],
												"declarations": [
													{
														"constant": false,
														"id": 239,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "7972:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 268,
														"src": "7964:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 238,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7964:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 242,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 240,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 909,
														"src": "7980:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 241,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7980:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7964:28:0"
											},
											{
												"assignments": [
													244
												],
												"declarations": [
													{
														"constant": false,
														"id": 244,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "8010:16:0",
														"nodeType": "VariableDeclaration",
														"scope": 268,
														"src": "8002:24:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 243,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8002:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 249,
												"initialValue": {
													"arguments": [
														{
															"id": 246,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 239,
															"src": "8039:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 247,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 231,
															"src": "8046:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 245,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "8029:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8029:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8002:52:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 253,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 251,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 244,
																"src": "8072:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 252,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 233,
																"src": "8092:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8072:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 254,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8109:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 250,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8064:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8064:85:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 256,
												"nodeType": "ExpressionStatement",
												"src": "8064:85:0"
											},
											{
												"id": 265,
												"nodeType": "UncheckedBlock",
												"src": "8159:95:0",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 258,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 239,
																	"src": "8192:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 259,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 231,
																	"src": "8199:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 262,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 260,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 244,
																		"src": "8208:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 261,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 233,
																		"src": "8227:15:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "8208:34:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 257,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 520,
																"src": "8183:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 263,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8183:60:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 264,
														"nodeType": "ExpressionStatement",
														"src": "8183:60:0"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 266,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8271:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 237,
												"id": 267,
												"nodeType": "Return",
												"src": "8264:11:0"
											}
										]
									},
									"documentation": {
										"id": 229,
										"nodeType": "StructuredDocumentation",
										"src": "7374:476:0",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 269,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "7864:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 231,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "7890:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "7882:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 230,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7882:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "7907:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "7899:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 232,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7899:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7881:42:0"
									},
									"returnParameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "7948:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 235,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7948:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7947:6:0"
									},
									"scope": 586,
									"src": "7855:427:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 345,
										"nodeType": "Block",
										"src": "8844:710:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 285,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 280,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 272,
																"src": "8862:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 283,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8878:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 282,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8870:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 281,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8870:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 284,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8870:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8862:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 286,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8882:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 279,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8854:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 287,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8854:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 288,
												"nodeType": "ExpressionStatement",
												"src": "8854:68:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 295,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 290,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 274,
																"src": "8940:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 293,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8954:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 292,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8946:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 291,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8946:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 294,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8946:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8940:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 296,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8958:37:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 289,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8932:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8932:64:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 298,
												"nodeType": "ExpressionStatement",
												"src": "8932:64:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 300,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 272,
															"src": "9028:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 301,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 274,
															"src": "9034:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 302,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 276,
															"src": "9038:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 299,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 574,
														"src": "9007:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 303,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9007:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 304,
												"nodeType": "ExpressionStatement",
												"src": "9007:38:0"
											},
											{
												"assignments": [
													306
												],
												"declarations": [
													{
														"constant": false,
														"id": 306,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "9064:11:0",
														"nodeType": "VariableDeclaration",
														"scope": 345,
														"src": "9056:19:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 305,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9056:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 310,
												"initialValue": {
													"baseExpression": {
														"id": 307,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 15,
														"src": "9078:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 309,
													"indexExpression": {
														"id": 308,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 272,
														"src": "9088:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9078:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9056:37:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 314,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 312,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 306,
																"src": "9111:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 313,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 276,
																"src": "9126:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9111:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 315,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9134:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 311,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9103:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 316,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9103:72:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 317,
												"nodeType": "ExpressionStatement",
												"src": "9103:72:0"
											},
											{
												"id": 332,
												"nodeType": "UncheckedBlock",
												"src": "9185:273:0",
												"statements": [
													{
														"expression": {
															"id": 324,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 318,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 15,
																	"src": "9209:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 320,
																"indexExpression": {
																	"id": 319,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 272,
																	"src": "9219:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9209:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 323,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 321,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 306,
																	"src": "9227:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 322,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 276,
																	"src": "9241:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9227:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9209:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 325,
														"nodeType": "ExpressionStatement",
														"src": "9209:38:0"
													},
													{
														"expression": {
															"id": 330,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 326,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 15,
																	"src": "9424:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 328,
																"indexExpression": {
																	"id": 327,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 274,
																	"src": "9434:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9424:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 329,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 276,
																"src": "9441:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9424:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 331,
														"nodeType": "ExpressionStatement",
														"src": "9424:23:0"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 334,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 272,
															"src": "9482:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 335,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 274,
															"src": "9488:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 336,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 276,
															"src": "9492:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 333,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 598,
														"src": "9473:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 337,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9473:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 338,
												"nodeType": "EmitStatement",
												"src": "9468:31:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 340,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 272,
															"src": "9530:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 341,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 274,
															"src": "9536:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 342,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 276,
															"src": "9540:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 339,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 585,
														"src": "9510:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 343,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9510:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 344,
												"nodeType": "ExpressionStatement",
												"src": "9510:37:0"
											}
										]
									},
									"documentation": {
										"id": 270,
										"nodeType": "StructuredDocumentation",
										"src": "8288:443:0",
										"text": " @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 346,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "8745:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "8772:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "8764:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 271,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8764:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "8794:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "8786:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 273,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8786:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 276,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8814:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "8806:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 275,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8806:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8754:72:0"
									},
									"returnParameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8844:0:0"
									},
									"scope": 586,
									"src": "8736:818:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 402,
										"nodeType": "Block",
										"src": "9895:470:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 360,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 355,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 349,
																"src": "9913:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 358,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9932:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 357,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9924:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 356,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9924:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 359,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9924:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9913:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 361,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9936:33:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 354,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9905:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9905:65:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 363,
												"nodeType": "ExpressionStatement",
												"src": "9905:65:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 367,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10010:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 366,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10002:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 365,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10002:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 368,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10002:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 369,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 349,
															"src": "10014:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 370,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 351,
															"src": "10023:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 364,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 574,
														"src": "9981:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9981:49:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 372,
												"nodeType": "ExpressionStatement",
												"src": "9981:49:0"
											},
											{
												"expression": {
													"id": 375,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 373,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 23,
														"src": "10041:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 374,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 351,
														"src": "10057:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10041:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 376,
												"nodeType": "ExpressionStatement",
												"src": "10041:22:0"
											},
											{
												"id": 383,
												"nodeType": "UncheckedBlock",
												"src": "10073:175:0",
												"statements": [
													{
														"expression": {
															"id": 381,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 377,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 15,
																	"src": "10209:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 379,
																"indexExpression": {
																	"id": 378,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 349,
																	"src": "10219:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "10209:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 380,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 351,
																"src": "10231:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10209:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 382,
														"nodeType": "ExpressionStatement",
														"src": "10209:28:0"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 387,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10279:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 386,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10271:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 385,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10271:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 388,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10271:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 389,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 349,
															"src": "10283:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 390,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 351,
															"src": "10292:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 384,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 598,
														"src": "10262:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 391,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10262:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 392,
												"nodeType": "EmitStatement",
												"src": "10257:42:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 396,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10338:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 395,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10330:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 394,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10330:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 397,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10330:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 398,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 349,
															"src": "10342:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 399,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 351,
															"src": "10351:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 393,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 585,
														"src": "10310:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 400,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10310:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 401,
												"nodeType": "ExpressionStatement",
												"src": "10310:48:0"
											}
										]
									},
									"documentation": {
										"id": 347,
										"nodeType": "StructuredDocumentation",
										"src": "9560:265:0",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 403,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "9839:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9853:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "9845:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 348,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9845:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 351,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9870:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "9862:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 350,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9862:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9844:33:0"
									},
									"returnParameters": {
										"id": 353,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9895:0:0"
									},
									"scope": 586,
									"src": "9830:535:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 474,
										"nodeType": "Block",
										"src": "10750:594:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 417,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 412,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 406,
																"src": "10768:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 415,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10787:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 414,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10779:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 413,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10779:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 416,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10779:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10768:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 418,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10791:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 411,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10760:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 419,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10760:67:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 420,
												"nodeType": "ExpressionStatement",
												"src": "10760:67:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 422,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 406,
															"src": "10859:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 425,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10876:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 424,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10868:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 423,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10868:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 426,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10868:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 427,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 408,
															"src": "10880:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 421,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 574,
														"src": "10838:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 428,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10838:49:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 429,
												"nodeType": "ExpressionStatement",
												"src": "10838:49:0"
											},
											{
												"assignments": [
													431
												],
												"declarations": [
													{
														"constant": false,
														"id": 431,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "10906:14:0",
														"nodeType": "VariableDeclaration",
														"scope": 474,
														"src": "10898:22:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 430,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10898:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 435,
												"initialValue": {
													"baseExpression": {
														"id": 432,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 15,
														"src": "10923:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 434,
													"indexExpression": {
														"id": 433,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 406,
														"src": "10933:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "10923:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10898:43:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 439,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 437,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 431,
																"src": "10959:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 438,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 408,
																"src": "10977:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10959:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 440,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10985:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 436,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10951:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 441,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10951:71:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 442,
												"nodeType": "ExpressionStatement",
												"src": "10951:71:0"
											},
											{
												"id": 455,
												"nodeType": "UncheckedBlock",
												"src": "11032:194:0",
												"statements": [
													{
														"expression": {
															"id": 449,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 443,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 15,
																	"src": "11056:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 445,
																"indexExpression": {
																	"id": 444,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 406,
																	"src": "11066:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "11056:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 448,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 446,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 431,
																	"src": "11077:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 447,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 408,
																	"src": "11094:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "11077:23:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "11056:44:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 450,
														"nodeType": "ExpressionStatement",
														"src": "11056:44:0"
													},
													{
														"expression": {
															"id": 453,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 451,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 23,
																"src": "11193:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"id": 452,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 408,
																"src": "11209:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "11193:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 454,
														"nodeType": "ExpressionStatement",
														"src": "11193:22:0"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 457,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 406,
															"src": "11250:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 460,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11267:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 459,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11259:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 458,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11259:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 461,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11259:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 462,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 408,
															"src": "11271:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 456,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 598,
														"src": "11241:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 463,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11241:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 464,
												"nodeType": "EmitStatement",
												"src": "11236:42:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 466,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 406,
															"src": "11309:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 469,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11326:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 468,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11318:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 467,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11318:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 470,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11318:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 471,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 408,
															"src": "11330:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 465,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 585,
														"src": "11289:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 472,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11289:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 473,
												"nodeType": "ExpressionStatement",
												"src": "11289:48:0"
											}
										]
									},
									"documentation": {
										"id": 404,
										"nodeType": "StructuredDocumentation",
										"src": "10371:309:0",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 475,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "10694:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 409,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 406,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "10708:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 475,
												"src": "10700:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 405,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10700:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 408,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10725:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 475,
												"src": "10717:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 407,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10717:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10699:33:0"
									},
									"returnParameters": {
										"id": 410,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10750:0:0"
									},
									"scope": 586,
									"src": "10685:659:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 519,
										"nodeType": "Block",
										"src": "11880:257:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 491,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 486,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 478,
																"src": "11898:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 489,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11915:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 488,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11907:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 487,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "11907:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 490,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11907:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "11898:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 492,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11919:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 485,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11890:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 493,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11890:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 494,
												"nodeType": "ExpressionStatement",
												"src": "11890:68:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 501,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 496,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 480,
																"src": "11976:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 499,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11995:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 498,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11987:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 497,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "11987:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 500,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11987:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "11976:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 502,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11999:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 495,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11968:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 503,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11968:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 504,
												"nodeType": "ExpressionStatement",
												"src": "11968:68:0"
											},
											{
												"expression": {
													"id": 511,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 505,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 21,
																"src": "12047:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 508,
															"indexExpression": {
																"id": 506,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 478,
																"src": "12059:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "12047:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 509,
														"indexExpression": {
															"id": 507,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 480,
															"src": "12066:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "12047:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 510,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 482,
														"src": "12077:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12047:36:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 512,
												"nodeType": "ExpressionStatement",
												"src": "12047:36:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 514,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 478,
															"src": "12107:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 515,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 480,
															"src": "12114:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 516,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 482,
															"src": "12123:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 513,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 607,
														"src": "12098:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 517,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12098:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 518,
												"nodeType": "EmitStatement",
												"src": "12093:37:0"
											}
										]
									},
									"documentation": {
										"id": 476,
										"nodeType": "StructuredDocumentation",
										"src": "11350:412:0",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 520,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "11776:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 478,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11802:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 520,
												"src": "11794:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 477,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11794:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 480,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11825:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 520,
												"src": "11817:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 479,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11817:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11850:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 520,
												"src": "11842:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 481,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11842:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11784:78:0"
									},
									"returnParameters": {
										"id": 484,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11880:0:0"
									},
									"scope": 586,
									"src": "11767:370:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 562,
										"nodeType": "Block",
										"src": "12538:321:0",
										"statements": [
											{
												"assignments": [
													531
												],
												"declarations": [
													{
														"constant": false,
														"id": 531,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "12556:16:0",
														"nodeType": "VariableDeclaration",
														"scope": 562,
														"src": "12548:24:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 530,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12548:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 536,
												"initialValue": {
													"arguments": [
														{
															"id": 533,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 523,
															"src": "12585:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 534,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 525,
															"src": "12592:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 532,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "12575:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 535,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12575:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12548:52:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 543,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 537,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 531,
														"src": "12614:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 540,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "12639:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 539,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "12639:7:0",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 538,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "12634:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 541,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12634:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 542,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "12648:3:0",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "12634:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12614:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 561,
												"nodeType": "IfStatement",
												"src": "12610:243:0",
												"trueBody": {
													"id": 560,
													"nodeType": "Block",
													"src": "12653:200:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 547,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 545,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 531,
																			"src": "12675:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 546,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 527,
																			"src": "12695:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "12675:26:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 548,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "12703:31:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 544,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "12667:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 549,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12667:68:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 550,
															"nodeType": "ExpressionStatement",
															"src": "12667:68:0"
														},
														{
															"id": 559,
															"nodeType": "UncheckedBlock",
															"src": "12749:94:0",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 552,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 523,
																				"src": "12786:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 553,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 525,
																				"src": "12793:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 556,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 554,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 531,
																					"src": "12802:16:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 555,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 527,
																					"src": "12821:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12802:25:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 551,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 520,
																			"src": "12777:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 557,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "12777:51:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 558,
																	"nodeType": "ExpressionStatement",
																	"src": "12777:51:0"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 521,
										"nodeType": "StructuredDocumentation",
										"src": "12143:270:0",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 563,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "12427:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 528,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 523,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "12460:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 563,
												"src": "12452:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 522,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12452:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 525,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "12483:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 563,
												"src": "12475:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 524,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12475:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 527,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12508:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 563,
												"src": "12500:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 526,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12500:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12442:78:0"
									},
									"returnParameters": {
										"id": 529,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12538:0:0"
									},
									"scope": 586,
									"src": "12418:441:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 573,
										"nodeType": "Block",
										"src": "13562:2:0",
										"statements": []
									},
									"documentation": {
										"id": 564,
										"nodeType": "StructuredDocumentation",
										"src": "12865:573:0",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 574,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "13452:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 566,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "13490:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "13482:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 565,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13482:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 568,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "13512:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "13504:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 567,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13504:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 570,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "13532:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "13524:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 569,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13524:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13472:72:0"
									},
									"returnParameters": {
										"id": 572,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13562:0:0"
									},
									"scope": 586,
									"src": "13443:121:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 584,
										"nodeType": "Block",
										"src": "14270:2:0",
										"statements": []
									},
									"documentation": {
										"id": 575,
										"nodeType": "StructuredDocumentation",
										"src": "13570:577:0",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 585,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "14161:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 582,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 577,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "14198:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "14190:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 576,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14190:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 579,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "14220:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "14212:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 578,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14212:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 581,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "14240:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "14232:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 580,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14232:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14180:72:0"
									},
									"returnParameters": {
										"id": 583,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14270:0:0"
									},
									"scope": 586,
									"src": "14152:120:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 587,
							"src": "2664:11610:0",
							"usedErrors": [],
							"usedEvents": [
								598,
								607
							]
						}
					],
					"src": "1368:12907:0"
				},
				"id": 0
			},
			"0x/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "0x/@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							664
						]
					},
					"id": 665,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 588,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "1369:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 589,
								"nodeType": "StructuredDocumentation",
								"src": "1394:70:1",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 664,
							"linearizedBaseContracts": [
								664
							],
							"name": "IERC20",
							"nameLocation": "1475:6:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 590,
										"nodeType": "StructuredDocumentation",
										"src": "1488:158:1",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 598,
									"name": "Transfer",
									"nameLocation": "1657:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 597,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 592,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1682:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 598,
												"src": "1666:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 591,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1666:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 594,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1704:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 598,
												"src": "1688:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 593,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1688:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 596,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1716:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 598,
												"src": "1708:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 595,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1708:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1665:57:1"
									},
									"src": "1651:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 599,
										"nodeType": "StructuredDocumentation",
										"src": "1729:148:1",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 607,
									"name": "Approval",
									"nameLocation": "1888:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 606,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 601,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1913:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "1897:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 600,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1897:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 603,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1936:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "1920:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 602,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1920:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 605,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1953:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "1945:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 604,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1945:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1896:63:1"
									},
									"src": "1882:78:1"
								},
								{
									"documentation": {
										"id": 608,
										"nodeType": "StructuredDocumentation",
										"src": "1966:66:1",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 613,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "2046:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 609,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2057:2:1"
									},
									"returnParameters": {
										"id": 612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 611,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "2083:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 610,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2083:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2082:9:1"
									},
									"scope": 664,
									"src": "2037:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 614,
										"nodeType": "StructuredDocumentation",
										"src": "2098:72:1",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 621,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "2184:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 617,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 616,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2202:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 621,
												"src": "2194:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 615,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2194:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2193:17:1"
									},
									"returnParameters": {
										"id": 620,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 619,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 621,
												"src": "2234:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 618,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2234:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2233:9:1"
									},
									"scope": 664,
									"src": "2175:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 622,
										"nodeType": "StructuredDocumentation",
										"src": "2249:202:1",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 631,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "2465:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 624,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2482:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "2474:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 623,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2474:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 626,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2494:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "2486:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 625,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2486:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2473:28:1"
									},
									"returnParameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "2520:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 628,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2520:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2519:6:1"
									},
									"scope": 664,
									"src": "2456:70:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 632,
										"nodeType": "StructuredDocumentation",
										"src": "2532:264:1",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 641,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "2810:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 637,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 634,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2828:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 641,
												"src": "2820:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 633,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2820:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 636,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2843:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 641,
												"src": "2835:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 635,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2835:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2819:32:1"
									},
									"returnParameters": {
										"id": 640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 639,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 641,
												"src": "2875:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 638,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2875:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2874:9:1"
									},
									"scope": 664,
									"src": "2801:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 642,
										"nodeType": "StructuredDocumentation",
										"src": "2890:642:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 651,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3546:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 647,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 644,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3562:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 651,
												"src": "3554:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 643,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3554:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 646,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3579:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 651,
												"src": "3571:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 645,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3571:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3553:33:1"
									},
									"returnParameters": {
										"id": 650,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 649,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 651,
												"src": "3605:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 648,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3605:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3604:6:1"
									},
									"scope": 664,
									"src": "3537:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 652,
										"nodeType": "StructuredDocumentation",
										"src": "3617:287:1",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 663,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3918:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 659,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 654,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3948:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "3940:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 653,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3940:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 656,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3970:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "3962:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 655,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3962:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 658,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3990:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "3982:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 657,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3982:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3930:72:1"
									},
									"returnParameters": {
										"id": 662,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 661,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "4021:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 660,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4021:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4020:6:1"
									},
									"scope": 664,
									"src": "3909:118:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 665,
							"src": "1465:2564:1",
							"usedErrors": [],
							"usedEvents": [
								598,
								607
							]
						}
					],
					"src": "1369:2661:1"
				},
				"id": 1
			},
			"0x/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "0x/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							664
						],
						"IERC20Metadata": [
							689
						]
					},
					"id": 690,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 666,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "1373:23:2"
						},
						{
							"absolutePath": "0x/@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 667,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 690,
							"sourceUnit": 665,
							"src": "1398:23:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 669,
										"name": "IERC20",
										"nameLocations": [
											"1568:6:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 664,
										"src": "1568:6:2"
									},
									"id": 670,
									"nodeType": "InheritanceSpecifier",
									"src": "1568:6:2"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 668,
								"nodeType": "StructuredDocumentation",
								"src": "1423:116:2",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 689,
							"linearizedBaseContracts": [
								689,
								664
							],
							"name": "IERC20Metadata",
							"nameLocation": "1550:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 671,
										"nodeType": "StructuredDocumentation",
										"src": "1581:54:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 676,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "1649:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 672,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1653:2:2"
									},
									"returnParameters": {
										"id": 675,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 674,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 676,
												"src": "1679:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 673,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1679:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1678:15:2"
									},
									"scope": 689,
									"src": "1640:54:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 677,
										"nodeType": "StructuredDocumentation",
										"src": "1700:56:2",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 682,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "1770:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 678,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1776:2:2"
									},
									"returnParameters": {
										"id": 681,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 680,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 682,
												"src": "1802:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 679,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1802:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1801:15:2"
									},
									"scope": 689,
									"src": "1761:56:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 683,
										"nodeType": "StructuredDocumentation",
										"src": "1823:65:2",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 688,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "1902:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 684,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1910:2:2"
									},
									"returnParameters": {
										"id": 687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 686,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 688,
												"src": "1936:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 685,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1936:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1935:7:2"
									},
									"scope": 689,
									"src": "1893:50:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 690,
							"src": "1540:405:2",
							"usedErrors": [],
							"usedEvents": [
								598,
								607
							]
						}
					],
					"src": "1373:573:2"
				},
				"id": 2
			},
			"0x/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
				"ast": {
					"absolutePath": "0x/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol",
					"exportedSymbols": {
						"Context": [
							919
						],
						"Counters": [
							993
						],
						"ECDSA": [
							1529
						],
						"EIP712": [
							1683
						],
						"ERC20": [
							586
						],
						"ERC20Permit": [
							861
						],
						"IERC20": [
							664
						],
						"IERC20Metadata": [
							689
						],
						"IERC20Permit": [
							897
						],
						"Math": [
							2548
						],
						"Strings": [
							1168
						]
					},
					"id": 862,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 691,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "1391:23:3"
						},
						{
							"absolutePath": "0x/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
							"file": "./draft-IERC20Permit.sol",
							"id": 692,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 862,
							"sourceUnit": 898,
							"src": "1416:34:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "0x/@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 693,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 862,
							"sourceUnit": 587,
							"src": "1451:22:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "0x/@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
							"file": "../../../utils/cryptography/ECDSA.sol",
							"id": 694,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 862,
							"sourceUnit": 1530,
							"src": "1474:47:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "0x/@openzeppelin/contracts/utils/cryptography/EIP712.sol",
							"file": "../../../utils/cryptography/EIP712.sol",
							"id": 695,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 862,
							"sourceUnit": 1684,
							"src": "1522:48:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "0x/@openzeppelin/contracts/utils/Counters.sol",
							"file": "../../../utils/Counters.sol",
							"id": 696,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 862,
							"sourceUnit": 994,
							"src": "1571:37:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 698,
										"name": "ERC20",
										"nameLocations": [
											"2161:5:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 586,
										"src": "2161:5:3"
									},
									"id": 699,
									"nodeType": "InheritanceSpecifier",
									"src": "2161:5:3"
								},
								{
									"baseName": {
										"id": 700,
										"name": "IERC20Permit",
										"nameLocations": [
											"2168:12:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 897,
										"src": "2168:12:3"
									},
									"id": 701,
									"nodeType": "InheritanceSpecifier",
									"src": "2168:12:3"
								},
								{
									"baseName": {
										"id": 702,
										"name": "EIP712",
										"nameLocations": [
											"2182:6:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1683,
										"src": "2182:6:3"
									},
									"id": 703,
									"nodeType": "InheritanceSpecifier",
									"src": "2182:6:3"
								}
							],
							"canonicalName": "ERC20Permit",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 697,
								"nodeType": "StructuredDocumentation",
								"src": "1610:517:3",
								"text": " @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n _Available since v3.4._"
							},
							"fullyImplemented": true,
							"id": 861,
							"linearizedBaseContracts": [
								861,
								1683,
								897,
								586,
								689,
								664,
								919
							],
							"name": "ERC20Permit",
							"nameLocation": "2146:11:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 707,
									"libraryName": {
										"id": 704,
										"name": "Counters",
										"nameLocations": [
											"2201:8:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 993,
										"src": "2201:8:3"
									},
									"nodeType": "UsingForDirective",
									"src": "2195:36:3",
									"typeName": {
										"id": 706,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 705,
											"name": "Counters.Counter",
											"nameLocations": [
												"2214:8:3",
												"2223:7:3"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 925,
											"src": "2214:16:3"
										},
										"referencedDeclaration": 925,
										"src": "2214:16:3",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_Counter_$925_storage_ptr",
											"typeString": "struct Counters.Counter"
										}
									}
								},
								{
									"constant": false,
									"id": 712,
									"mutability": "mutable",
									"name": "_nonces",
									"nameLocation": "2282:7:3",
									"nodeType": "VariableDeclaration",
									"scope": 861,
									"src": "2237:52:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$925_storage_$",
										"typeString": "mapping(address => struct Counters.Counter)"
									},
									"typeName": {
										"id": 711,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 708,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2245:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2237:36:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$925_storage_$",
											"typeString": "mapping(address => struct Counters.Counter)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 710,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 709,
												"name": "Counters.Counter",
												"nameLocations": [
													"2256:8:3",
													"2265:7:3"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 925,
												"src": "2256:16:3"
											},
											"referencedDeclaration": 925,
											"src": "2256:16:3",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Counter_$925_storage_ptr",
												"typeString": "struct Counters.Counter"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 717,
									"mutability": "constant",
									"name": "_PERMIT_TYPEHASH",
									"nameLocation": "2373:16:3",
									"nodeType": "VariableDeclaration",
									"scope": 861,
									"src": "2348:147:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 713,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2348:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529",
												"id": 715,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "2410:84:3",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												},
												"value": "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												}
											],
											"id": 714,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "2400:9:3",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 716,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "2400:95:3",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 718,
										"nodeType": "StructuredDocumentation",
										"src": "2501:254:3",
										"text": " @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n However, to ensure consistency with the upgradeable transpiler, we will continue\n to reserve a slot.\n @custom:oz-renamed-from _PERMIT_TYPEHASH"
									},
									"id": 720,
									"mutability": "mutable",
									"name": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
									"nameLocation": "2828:32:3",
									"nodeType": "VariableDeclaration",
									"scope": 861,
									"src": "2812:48:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 719,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2812:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 730,
										"nodeType": "Block",
										"src": "3142:2:3",
										"statements": []
									},
									"documentation": {
										"id": 721,
										"nodeType": "StructuredDocumentation",
										"src": "2867:220:3",
										"text": " @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n It's a good idea to use the same `name` that is defined as the ERC20 token name."
									},
									"id": 731,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 726,
													"name": "name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 723,
													"src": "3131:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												{
													"hexValue": "31",
													"id": 727,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3137:3:3",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
														"typeString": "literal_string \"1\""
													},
													"value": "1"
												}
											],
											"id": 728,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 725,
												"name": "EIP712",
												"nameLocations": [
													"3124:6:3"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1683,
												"src": "3124:6:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "3124:17:3"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 724,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 723,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "3118:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 731,
												"src": "3104:18:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 722,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3104:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3103:20:3"
									},
									"returnParameters": {
										"id": 729,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3142:0:3"
									},
									"scope": 861,
									"src": "3092:52:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										882
									],
									"body": {
										"id": 803,
										"nodeType": "Block",
										"src": "3403:428:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 754,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 751,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "3421:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 752,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3427:9:3",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "3421:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 753,
																"name": "deadline",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 740,
																"src": "3440:8:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3421:27:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332305065726d69743a206578706972656420646561646c696e65",
															"id": 755,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3450:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd",
																"typeString": "literal_string \"ERC20Permit: expired deadline\""
															},
															"value": "ERC20Permit: expired deadline"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd",
																"typeString": "literal_string \"ERC20Permit: expired deadline\""
															}
														],
														"id": 750,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3413:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 756,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3413:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 757,
												"nodeType": "ExpressionStatement",
												"src": "3413:69:3"
											},
											{
												"assignments": [
													759
												],
												"declarations": [
													{
														"constant": false,
														"id": 759,
														"mutability": "mutable",
														"name": "structHash",
														"nameLocation": "3501:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 803,
														"src": "3493:18:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 758,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "3493:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 773,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 763,
																	"name": "_PERMIT_TYPEHASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 717,
																	"src": "3535:16:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 764,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 734,
																	"src": "3553:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 765,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 736,
																	"src": "3560:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 766,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 738,
																	"src": "3569:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 768,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 734,
																			"src": "3586:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 767,
																		"name": "_useNonce",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 860,
																		"src": "3576:9:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) returns (uint256)"
																		}
																	},
																	"id": 769,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3576:16:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 770,
																	"name": "deadline",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 740,
																	"src": "3594:8:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 761,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "3524:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 762,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "3528:6:3",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "3524:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 771,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3524:79:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 760,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "3514:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 772,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3514:90:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3493:111:3"
											},
											{
												"assignments": [
													775
												],
												"declarations": [
													{
														"constant": false,
														"id": 775,
														"mutability": "mutable",
														"name": "hash",
														"nameLocation": "3623:4:3",
														"nodeType": "VariableDeclaration",
														"scope": 803,
														"src": "3615:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 774,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "3615:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 779,
												"initialValue": {
													"arguments": [
														{
															"id": 777,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "3647:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 776,
														"name": "_hashTypedDataV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1682,
														"src": "3630:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 778,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3630:28:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3615:43:3"
											},
											{
												"assignments": [
													781
												],
												"declarations": [
													{
														"constant": false,
														"id": 781,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "3677:6:3",
														"nodeType": "VariableDeclaration",
														"scope": 803,
														"src": "3669:14:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 780,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3669:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 789,
												"initialValue": {
													"arguments": [
														{
															"id": 784,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 775,
															"src": "3700:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 785,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 742,
															"src": "3706:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 786,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "3709:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 787,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 746,
															"src": "3712:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 782,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1529,
															"src": "3686:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$1529_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 783,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3692:7:3",
														"memberName": "recover",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1469,
														"src": "3686:13:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 788,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3686:28:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3669:45:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 793,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 791,
																"name": "signer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 781,
																"src": "3732:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 792,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 734,
																"src": "3742:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "3732:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332305065726d69743a20696e76616c6964207369676e6174757265",
															"id": 794,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3749:32:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124",
																"typeString": "literal_string \"ERC20Permit: invalid signature\""
															},
															"value": "ERC20Permit: invalid signature"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124",
																"typeString": "literal_string \"ERC20Permit: invalid signature\""
															}
														],
														"id": 790,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3724:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 795,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3724:58:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 796,
												"nodeType": "ExpressionStatement",
												"src": "3724:58:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 798,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 734,
															"src": "3802:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 799,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 736,
															"src": "3809:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 800,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 738,
															"src": "3818:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 797,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 520,
														"src": "3793:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 801,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3793:31:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 802,
												"nodeType": "ExpressionStatement",
												"src": "3793:31:3"
											}
										]
									},
									"documentation": {
										"id": 732,
										"nodeType": "StructuredDocumentation",
										"src": "3150:50:3",
										"text": " @dev See {IERC20Permit-permit}."
									},
									"functionSelector": "d505accf",
									"id": 804,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3214:6:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 748,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3394:8:3"
									},
									"parameters": {
										"id": 747,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 734,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3238:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 804,
												"src": "3230:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 733,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3230:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 736,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3261:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 804,
												"src": "3253:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 735,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3253:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 738,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3286:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 804,
												"src": "3278:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 737,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3278:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 740,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3309:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 804,
												"src": "3301:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 739,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3301:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3333:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 804,
												"src": "3327:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 741,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3327:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 744,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3352:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 804,
												"src": "3344:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 743,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3344:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 746,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3371:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 804,
												"src": "3363:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 745,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3363:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3220:158:3"
									},
									"returnParameters": {
										"id": 749,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3403:0:3"
									},
									"scope": 861,
									"src": "3205:626:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										890
									],
									"body": {
										"id": 819,
										"nodeType": "Block",
										"src": "3970:48:3",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"baseExpression": {
																"id": 813,
																"name": "_nonces",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 712,
																"src": "3987:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$925_storage_$",
																	"typeString": "mapping(address => struct Counters.Counter storage ref)"
																}
															},
															"id": 815,
															"indexExpression": {
																"id": 814,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 807,
																"src": "3995:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3987:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$925_storage",
																"typeString": "struct Counters.Counter storage ref"
															}
														},
														"id": 816,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4002:7:3",
														"memberName": "current",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 937,
														"src": "3987:22:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$925_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Counter_$925_storage_ptr_$",
															"typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
														}
													},
													"id": 817,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3987:24:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 812,
												"id": 818,
												"nodeType": "Return",
												"src": "3980:31:3"
											}
										]
									},
									"documentation": {
										"id": 805,
										"nodeType": "StructuredDocumentation",
										"src": "3837:50:3",
										"text": " @dev See {IERC20Permit-nonces}."
									},
									"functionSelector": "7ecebe00",
									"id": 820,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3901:6:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 809,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3943:8:3"
									},
									"parameters": {
										"id": 808,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 807,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3916:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "3908:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 806,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3908:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3907:15:3"
									},
									"returnParameters": {
										"id": 812,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 811,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "3961:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 810,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3961:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3960:9:3"
									},
									"scope": 861,
									"src": "3892:126:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										896
									],
									"body": {
										"id": 830,
										"nodeType": "Block",
										"src": "4211:44:3",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 827,
														"name": "_domainSeparatorV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1639,
														"src": "4228:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
															"typeString": "function () view returns (bytes32)"
														}
													},
													"id": 828,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4228:20:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 826,
												"id": 829,
												"nodeType": "Return",
												"src": "4221:27:3"
											}
										]
									},
									"documentation": {
										"id": 821,
										"nodeType": "StructuredDocumentation",
										"src": "4024:60:3",
										"text": " @dev See {IERC20Permit-DOMAIN_SEPARATOR}."
									},
									"functionSelector": "3644e515",
									"id": 831,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "4151:16:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 823,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4184:8:3"
									},
									"parameters": {
										"id": 822,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4167:2:3"
									},
									"returnParameters": {
										"id": 826,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 825,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 831,
												"src": "4202:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 824,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4202:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4201:9:3"
									},
									"scope": 861,
									"src": "4142:113:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 859,
										"nodeType": "Block",
										"src": "4463:126:3",
										"statements": [
											{
												"assignments": [
													843
												],
												"declarations": [
													{
														"constant": false,
														"id": 843,
														"mutability": "mutable",
														"name": "nonce",
														"nameLocation": "4498:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 859,
														"src": "4473:30:3",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$925_storage_ptr",
															"typeString": "struct Counters.Counter"
														},
														"typeName": {
															"id": 842,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 841,
																"name": "Counters.Counter",
																"nameLocations": [
																	"4473:8:3",
																	"4482:7:3"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 925,
																"src": "4473:16:3"
															},
															"referencedDeclaration": 925,
															"src": "4473:16:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$925_storage_ptr",
																"typeString": "struct Counters.Counter"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 847,
												"initialValue": {
													"baseExpression": {
														"id": 844,
														"name": "_nonces",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 712,
														"src": "4506:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$925_storage_$",
															"typeString": "mapping(address => struct Counters.Counter storage ref)"
														}
													},
													"id": 846,
													"indexExpression": {
														"id": 845,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 834,
														"src": "4514:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4506:14:3",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$925_storage",
														"typeString": "struct Counters.Counter storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4473:47:3"
											},
											{
												"expression": {
													"id": 852,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 848,
														"name": "current",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 837,
														"src": "4530:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"id": 849,
																"name": "nonce",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 843,
																"src": "4540:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Counter_$925_storage_ptr",
																	"typeString": "struct Counters.Counter storage pointer"
																}
															},
															"id": 850,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4546:7:3",
															"memberName": "current",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 937,
															"src": "4540:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$925_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Counter_$925_storage_ptr_$",
																"typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
															}
														},
														"id": 851,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4540:15:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4530:25:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 853,
												"nodeType": "ExpressionStatement",
												"src": "4530:25:3"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 854,
															"name": "nonce",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 843,
															"src": "4565:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$925_storage_ptr",
																"typeString": "struct Counters.Counter storage pointer"
															}
														},
														"id": 856,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4571:9:3",
														"memberName": "increment",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 951,
														"src": "4565:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Counter_$925_storage_ptr_$returns$__$attached_to$_t_struct$_Counter_$925_storage_ptr_$",
															"typeString": "function (struct Counters.Counter storage pointer)"
														}
													},
													"id": 857,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4565:17:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 858,
												"nodeType": "ExpressionStatement",
												"src": "4565:17:3"
											}
										]
									},
									"documentation": {
										"id": 832,
										"nodeType": "StructuredDocumentation",
										"src": "4261:120:3",
										"text": " @dev \"Consume a nonce\": return the current value and increment.\n _Available since v4.1._"
									},
									"id": 860,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useNonce",
									"nameLocation": "4395:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 834,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4413:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 860,
												"src": "4405:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 833,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4405:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4404:15:3"
									},
									"returnParameters": {
										"id": 838,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 837,
												"mutability": "mutable",
												"name": "current",
												"nameLocation": "4454:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 860,
												"src": "4446:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 836,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4446:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4445:17:3"
									},
									"scope": 861,
									"src": "4386:203:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 862,
							"src": "2128:2463:3",
							"usedErrors": [],
							"usedEvents": [
								598,
								607
							]
						}
					],
					"src": "1391:3201:3"
				},
				"id": 3
			},
			"0x/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"ast": {
					"absolutePath": "0x/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							897
						]
					},
					"id": 898,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 863,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "1377:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 864,
								"nodeType": "StructuredDocumentation",
								"src": "1402:480:4",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 897,
							"linearizedBaseContracts": [
								897
							],
							"name": "IERC20Permit",
							"nameLocation": "1893:12:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 865,
										"nodeType": "StructuredDocumentation",
										"src": "1912:792:4",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 882,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "2718:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 880,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 867,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2742:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "2734:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 866,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2734:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 869,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2765:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "2757:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 868,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2757:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 871,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2790:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "2782:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 870,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2782:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 873,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "2813:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "2805:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 872,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2805:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 875,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "2837:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "2831:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 874,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2831:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 877,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2856:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "2848:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 876,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2848:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 879,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "2875:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "2867:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 878,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2867:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2724:158:4"
									},
									"returnParameters": {
										"id": 881,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2891:0:4"
									},
									"scope": 897,
									"src": "2709:183:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 883,
										"nodeType": "StructuredDocumentation",
										"src": "2898:294:4",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 890,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3206:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 886,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 885,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3221:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "3213:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 884,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3213:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3212:15:4"
									},
									"returnParameters": {
										"id": 889,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 888,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "3251:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 887,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3251:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3250:9:4"
									},
									"scope": 897,
									"src": "3197:63:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 891,
										"nodeType": "StructuredDocumentation",
										"src": "3266:128:4",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 896,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3461:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 892,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3477:2:4"
									},
									"returnParameters": {
										"id": 895,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 894,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 896,
												"src": "3503:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 893,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3503:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3502:9:4"
									},
									"scope": 897,
									"src": "3452:60:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 898,
							"src": "1883:1631:4",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "1377:2138:4"
				},
				"id": 4
			},
			"0x/@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "0x/@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							919
						]
					},
					"id": 920,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 899,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "1349:23:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 900,
								"nodeType": "StructuredDocumentation",
								"src": "1374:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 919,
							"linearizedBaseContracts": [
								919
							],
							"name": "Context",
							"nameLocation": "1889:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 908,
										"nodeType": "Block",
										"src": "1965:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 905,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1982:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 906,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1986:6:5",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "1982:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 904,
												"id": 907,
												"nodeType": "Return",
												"src": "1975:17:5"
											}
										]
									},
									"id": 909,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "1912:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 901,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1922:2:5"
									},
									"returnParameters": {
										"id": 904,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 903,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 909,
												"src": "1956:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 902,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1956:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1955:9:5"
									},
									"scope": 919,
									"src": "1903:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 917,
										"nodeType": "Block",
										"src": "2072:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 914,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "2089:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 915,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2093:4:5",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "2089:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 913,
												"id": 916,
												"nodeType": "Return",
												"src": "2082:15:5"
											}
										]
									},
									"id": 918,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "2014:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 910,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2022:2:5"
									},
									"returnParameters": {
										"id": 913,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 912,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 918,
												"src": "2056:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 911,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2056:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2055:16:5"
									},
									"scope": 919,
									"src": "2005:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 920,
							"src": "1871:235:5",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "1349:758:5"
				},
				"id": 5
			},
			"0x/@openzeppelin/contracts/utils/Counters.sol": {
				"ast": {
					"absolutePath": "0x/@openzeppelin/contracts/utils/Counters.sol",
					"exportedSymbols": {
						"Counters": [
							993
						]
					},
					"id": 994,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 921,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "1350:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Counters",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 922,
								"nodeType": "StructuredDocumentation",
								"src": "1375:311:6",
								"text": " @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"
							},
							"fullyImplemented": true,
							"id": 993,
							"linearizedBaseContracts": [
								993
							],
							"name": "Counters",
							"nameLocation": "1695:8:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Counters.Counter",
									"id": 925,
									"members": [
										{
											"constant": false,
											"id": 924,
											"mutability": "mutable",
											"name": "_value",
											"nameLocation": "2057:6:6",
											"nodeType": "VariableDeclaration",
											"scope": 925,
											"src": "2049:14:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 923,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2049:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Counter",
									"nameLocation": "1717:7:6",
									"nodeType": "StructDefinition",
									"scope": 993,
									"src": "1710:374:6",
									"visibility": "public"
								},
								{
									"body": {
										"id": 936,
										"nodeType": "Block",
										"src": "2164:38:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 933,
														"name": "counter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 928,
														"src": "2181:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$925_storage_ptr",
															"typeString": "struct Counters.Counter storage pointer"
														}
													},
													"id": 934,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2189:6:6",
													"memberName": "_value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 924,
													"src": "2181:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 932,
												"id": 935,
												"nodeType": "Return",
												"src": "2174:21:6"
											}
										]
									},
									"id": 937,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "current",
									"nameLocation": "2099:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 929,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 928,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "2123:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "2107:23:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$925_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 927,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 926,
														"name": "Counter",
														"nameLocations": [
															"2107:7:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 925,
														"src": "2107:7:6"
													},
													"referencedDeclaration": 925,
													"src": "2107:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$925_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2106:25:6"
									},
									"returnParameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "2155:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 930,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2155:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2154:9:6"
									},
									"scope": 993,
									"src": "2090:112:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 950,
										"nodeType": "Block",
										"src": "2261:70:6",
										"statements": [
											{
												"id": 949,
												"nodeType": "UncheckedBlock",
												"src": "2271:54:6",
												"statements": [
													{
														"expression": {
															"id": 947,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 943,
																	"name": "counter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 940,
																	"src": "2295:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Counter_$925_storage_ptr",
																		"typeString": "struct Counters.Counter storage pointer"
																	}
																},
																"id": 945,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "2303:6:6",
																"memberName": "_value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 924,
																"src": "2295:14:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 946,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2313:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "2295:19:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 948,
														"nodeType": "ExpressionStatement",
														"src": "2295:19:6"
													}
												]
											}
										]
									},
									"id": 951,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increment",
									"nameLocation": "2217:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 941,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 940,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "2243:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 951,
												"src": "2227:23:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$925_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 939,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 938,
														"name": "Counter",
														"nameLocations": [
															"2227:7:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 925,
														"src": "2227:7:6"
													},
													"referencedDeclaration": 925,
													"src": "2227:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$925_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2226:25:6"
									},
									"returnParameters": {
										"id": 942,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2261:0:6"
									},
									"scope": 993,
									"src": "2208:123:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 978,
										"nodeType": "Block",
										"src": "2390:176:6",
										"statements": [
											{
												"assignments": [
													958
												],
												"declarations": [
													{
														"constant": false,
														"id": 958,
														"mutability": "mutable",
														"name": "value",
														"nameLocation": "2408:5:6",
														"nodeType": "VariableDeclaration",
														"scope": 978,
														"src": "2400:13:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 957,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2400:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 961,
												"initialValue": {
													"expression": {
														"id": 959,
														"name": "counter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 954,
														"src": "2416:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$925_storage_ptr",
															"typeString": "struct Counters.Counter storage pointer"
														}
													},
													"id": 960,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2424:6:6",
													"memberName": "_value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 924,
													"src": "2416:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2400:30:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 965,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 963,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 958,
																"src": "2448:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 964,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2456:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2448:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436f756e7465723a2064656372656d656e74206f766572666c6f77",
															"id": 966,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2459:29:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
																"typeString": "literal_string \"Counter: decrement overflow\""
															},
															"value": "Counter: decrement overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
																"typeString": "literal_string \"Counter: decrement overflow\""
															}
														],
														"id": 962,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2440:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 967,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2440:49:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 968,
												"nodeType": "ExpressionStatement",
												"src": "2440:49:6"
											},
											{
												"id": 977,
												"nodeType": "UncheckedBlock",
												"src": "2499:61:6",
												"statements": [
													{
														"expression": {
															"id": 975,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 969,
																	"name": "counter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 954,
																	"src": "2523:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Counter_$925_storage_ptr",
																		"typeString": "struct Counters.Counter storage pointer"
																	}
																},
																"id": 971,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "2531:6:6",
																"memberName": "_value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 924,
																"src": "2523:14:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 974,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 972,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 958,
																	"src": "2540:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 973,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2548:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "2540:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2523:26:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 976,
														"nodeType": "ExpressionStatement",
														"src": "2523:26:6"
													}
												]
											}
										]
									},
									"id": 979,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decrement",
									"nameLocation": "2346:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 955,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 954,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "2372:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 979,
												"src": "2356:23:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$925_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 953,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 952,
														"name": "Counter",
														"nameLocations": [
															"2356:7:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 925,
														"src": "2356:7:6"
													},
													"referencedDeclaration": 925,
													"src": "2356:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$925_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2355:25:6"
									},
									"returnParameters": {
										"id": 956,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2390:0:6"
									},
									"scope": 993,
									"src": "2337:229:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 991,
										"nodeType": "Block",
										"src": "2621:35:6",
										"statements": [
											{
												"expression": {
													"id": 989,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 985,
															"name": "counter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 982,
															"src": "2631:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$925_storage_ptr",
																"typeString": "struct Counters.Counter storage pointer"
															}
														},
														"id": 987,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2639:6:6",
														"memberName": "_value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 924,
														"src": "2631:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 988,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2648:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2631:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 990,
												"nodeType": "ExpressionStatement",
												"src": "2631:18:6"
											}
										]
									},
									"id": 992,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "reset",
									"nameLocation": "2581:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 983,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 982,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "2603:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "2587:23:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$925_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 981,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 980,
														"name": "Counter",
														"nameLocations": [
															"2587:7:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 925,
														"src": "2587:7:6"
													},
													"referencedDeclaration": 925,
													"src": "2587:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$925_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2586:25:6"
									},
									"returnParameters": {
										"id": 984,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2621:0:6"
									},
									"scope": 993,
									"src": "2572:84:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 994,
							"src": "1687:971:6",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "1350:1309:6"
				},
				"id": 6
			},
			"0x/@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "0x/@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Math": [
							2548
						],
						"Strings": [
							1168
						]
					},
					"id": 1169,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 995,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "1364:23:7"
						},
						{
							"absolutePath": "0x/@openzeppelin/contracts/utils/math/Math.sol",
							"file": "./math/Math.sol",
							"id": 996,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1169,
							"sourceUnit": 2549,
							"src": "1389:25:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 997,
								"nodeType": "StructuredDocumentation",
								"src": "1416:34:7",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 1168,
							"linearizedBaseContracts": [
								1168
							],
							"name": "Strings",
							"nameLocation": "1459:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1000,
									"mutability": "constant",
									"name": "_SYMBOLS",
									"nameLocation": "1498:8:7",
									"nodeType": "VariableDeclaration",
									"scope": 1168,
									"src": "1473:54:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 998,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "1473:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 999,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1509:18:7",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1003,
									"mutability": "constant",
									"name": "_ADDRESS_LENGTH",
									"nameLocation": "1556:15:7",
									"nodeType": "VariableDeclaration",
									"scope": 1168,
									"src": "1533:43:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1001,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "1533:5:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 1002,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1574:2:7",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1050,
										"nodeType": "Block",
										"src": "1749:625:7",
										"statements": [
											{
												"id": 1049,
												"nodeType": "UncheckedBlock",
												"src": "1759:609:7",
												"statements": [
													{
														"assignments": [
															1012
														],
														"declarations": [
															{
																"constant": false,
																"id": 1012,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "1791:6:7",
																"nodeType": "VariableDeclaration",
																"scope": 1049,
																"src": "1783:14:7",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1011,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1783:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1019,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1018,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1015,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1006,
																		"src": "1811:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1013,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2548,
																		"src": "1800:4:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$2548_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 1014,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1805:5:7",
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2385,
																	"src": "1800:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 1016,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1800:17:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1017,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1820:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "1800:21:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1783:38:7"
													},
													{
														"assignments": [
															1021
														],
														"declarations": [
															{
																"constant": false,
																"id": 1021,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "1849:6:7",
																"nodeType": "VariableDeclaration",
																"scope": 1049,
																"src": "1835:20:7",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 1020,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "1835:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1026,
														"initialValue": {
															"arguments": [
																{
																	"id": 1024,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1012,
																	"src": "1869:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1023,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "1858:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 1022,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "1862:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 1025,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1858:18:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1835:41:7"
													},
													{
														"assignments": [
															1028
														],
														"declarations": [
															{
																"constant": false,
																"id": 1028,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "1898:3:7",
																"nodeType": "VariableDeclaration",
																"scope": 1049,
																"src": "1890:11:7",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1027,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1890:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1029,
														"nodeType": "VariableDeclarationStatement",
														"src": "1890:11:7"
													},
													{
														"AST": {
															"nativeSrc": "1971:67:7",
															"nodeType": "YulBlock",
															"src": "1971:67:7",
															"statements": [
																{
																	"nativeSrc": "1989:35:7",
																	"nodeType": "YulAssignment",
																	"src": "1989:35:7",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nativeSrc": "2000:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "2000:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "2012:2:7",
																						"nodeType": "YulLiteral",
																						"src": "2012:2:7",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "2016:6:7",
																						"nodeType": "YulIdentifier",
																						"src": "2016:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2008:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "2008:3:7"
																				},
																				"nativeSrc": "2008:15:7",
																				"nodeType": "YulFunctionCall",
																				"src": "2008:15:7"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1996:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "1996:3:7"
																		},
																		"nativeSrc": "1996:28:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1996:28:7"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nativeSrc": "1989:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "1989:3:7"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 1021,
																"isOffset": false,
																"isSlot": false,
																"src": "2000:6:7",
																"valueSize": 1
															},
															{
																"declaration": 1012,
																"isOffset": false,
																"isSlot": false,
																"src": "2016:6:7",
																"valueSize": 1
															},
															{
																"declaration": 1028,
																"isOffset": false,
																"isSlot": false,
																"src": "1989:3:7",
																"valueSize": 1
															}
														],
														"id": 1030,
														"nodeType": "InlineAssembly",
														"src": "1962:76:7"
													},
													{
														"body": {
															"id": 1045,
															"nodeType": "Block",
															"src": "2064:267:7",
															"statements": [
																{
																	"expression": {
																		"id": 1033,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "2082:5:7",
																		"subExpression": {
																			"id": 1032,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1028,
																			"src": "2082:3:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1034,
																	"nodeType": "ExpressionStatement",
																	"src": "2082:5:7"
																},
																{
																	"AST": {
																		"nativeSrc": "2165:84:7",
																		"nodeType": "YulBlock",
																		"src": "2165:84:7",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nativeSrc": "2195:3:7",
																							"nodeType": "YulIdentifier",
																							"src": "2195:3:7"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nativeSrc": "2209:5:7",
																											"nodeType": "YulIdentifier",
																											"src": "2209:5:7"
																										},
																										{
																											"kind": "number",
																											"nativeSrc": "2216:2:7",
																											"nodeType": "YulLiteral",
																											"src": "2216:2:7",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nativeSrc": "2205:3:7",
																										"nodeType": "YulIdentifier",
																										"src": "2205:3:7"
																									},
																									"nativeSrc": "2205:14:7",
																									"nodeType": "YulFunctionCall",
																									"src": "2205:14:7"
																								},
																								{
																									"name": "_SYMBOLS",
																									"nativeSrc": "2221:8:7",
																									"nodeType": "YulIdentifier",
																									"src": "2221:8:7"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nativeSrc": "2200:4:7",
																								"nodeType": "YulIdentifier",
																								"src": "2200:4:7"
																							},
																							"nativeSrc": "2200:30:7",
																							"nodeType": "YulFunctionCall",
																							"src": "2200:30:7"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nativeSrc": "2187:7:7",
																						"nodeType": "YulIdentifier",
																						"src": "2187:7:7"
																					},
																					"nativeSrc": "2187:44:7",
																					"nodeType": "YulFunctionCall",
																					"src": "2187:44:7"
																				},
																				"nativeSrc": "2187:44:7",
																				"nodeType": "YulExpressionStatement",
																				"src": "2187:44:7"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "cancun",
																	"externalReferences": [
																		{
																			"declaration": 1000,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "2221:8:7",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1028,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "2195:3:7",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1006,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "2209:5:7",
																			"valueSize": 1
																		}
																	],
																	"id": 1035,
																	"nodeType": "InlineAssembly",
																	"src": "2156:93:7"
																},
																{
																	"expression": {
																		"id": 1038,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1036,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1006,
																			"src": "2266:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 1037,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2275:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "2266:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1039,
																	"nodeType": "ExpressionStatement",
																	"src": "2266:11:7"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1042,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1040,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1006,
																			"src": "2299:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1041,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2308:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "2299:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1044,
																	"nodeType": "IfStatement",
																	"src": "2295:21:7",
																	"trueBody": {
																		"id": 1043,
																		"nodeType": "Break",
																		"src": "2311:5:7"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 1031,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2058:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 1046,
														"nodeType": "WhileStatement",
														"src": "2051:280:7"
													},
													{
														"expression": {
															"id": 1047,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1021,
															"src": "2351:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1010,
														"id": 1048,
														"nodeType": "Return",
														"src": "2344:13:7"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1004,
										"nodeType": "StructuredDocumentation",
										"src": "1583:90:7",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 1051,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "1687:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1007,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1006,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1704:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1051,
												"src": "1696:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1005,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1696:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1695:15:7"
									},
									"returnParameters": {
										"id": 1010,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1009,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1051,
												"src": "1734:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1008,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1734:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1733:15:7"
									},
									"scope": 1168,
									"src": "1678:696:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1070,
										"nodeType": "Block",
										"src": "2553:100:7",
										"statements": [
											{
												"id": 1069,
												"nodeType": "UncheckedBlock",
												"src": "2563:84:7",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 1060,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1054,
																	"src": "2606:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1066,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 1063,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1054,
																				"src": "2625:5:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1061,
																				"name": "Math",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2548,
																				"src": "2613:4:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_Math_$2548_$",
																					"typeString": "type(library Math)"
																				}
																			},
																			"id": 1062,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2618:6:7",
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2508,
																			"src": "2613:11:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1064,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2613:18:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 1065,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2634:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "2613:22:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1059,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1071,
																	1147,
																	1167
																],
																"referencedDeclaration": 1147,
																"src": "2594:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 1067,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2594:42:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1058,
														"id": 1068,
														"nodeType": "Return",
														"src": "2587:49:7"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1052,
										"nodeType": "StructuredDocumentation",
										"src": "2380:94:7",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 1071,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2488:11:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1055,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1054,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2508:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1071,
												"src": "2500:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1053,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2500:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2499:15:7"
									},
									"returnParameters": {
										"id": 1058,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1057,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1071,
												"src": "2538:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1056,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2538:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2537:15:7"
									},
									"scope": 1168,
									"src": "2479:174:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1146,
										"nodeType": "Block",
										"src": "2866:347:7",
										"statements": [
											{
												"assignments": [
													1082
												],
												"declarations": [
													{
														"constant": false,
														"id": 1082,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "2889:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 1146,
														"src": "2876:19:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1081,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2876:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1091,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1089,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1087,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1085,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2908:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1086,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1076,
																	"src": "2912:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2908:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 1088,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2921:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "2908:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1084,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2898:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1083,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2902:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1090,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2898:25:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2876:47:7"
											},
											{
												"expression": {
													"id": 1096,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1092,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1082,
															"src": "2933:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1094,
														"indexExpression": {
															"hexValue": "30",
															"id": 1093,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2940:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2933:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1095,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2945:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "2933:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1097,
												"nodeType": "ExpressionStatement",
												"src": "2933:15:7"
											},
											{
												"expression": {
													"id": 1102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1098,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1082,
															"src": "2958:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1100,
														"indexExpression": {
															"hexValue": "31",
															"id": 1099,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2965:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2958:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 1101,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2970:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "2958:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1103,
												"nodeType": "ExpressionStatement",
												"src": "2958:15:7"
											},
											{
												"body": {
													"id": 1132,
													"nodeType": "Block",
													"src": "3028:83:7",
													"statements": [
														{
															"expression": {
																"id": 1126,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1118,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1082,
																		"src": "3042:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1120,
																	"indexExpression": {
																		"id": 1119,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1105,
																		"src": "3049:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "3042:9:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1121,
																		"name": "_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1000,
																		"src": "3054:8:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 1125,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1124,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1122,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1074,
																			"src": "3063:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 1123,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3071:3:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "3063:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3054:21:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "3042:33:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1127,
															"nodeType": "ExpressionStatement",
															"src": "3042:33:7"
														},
														{
															"expression": {
																"id": 1130,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1128,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1074,
																	"src": "3089:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 1129,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3099:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "3089:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1131,
															"nodeType": "ExpressionStatement",
															"src": "3089:11:7"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1112,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1105,
														"src": "3016:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 1113,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3020:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "3016:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1133,
												"initializationExpression": {
													"assignments": [
														1105
													],
													"declarations": [
														{
															"constant": false,
															"id": 1105,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2996:1:7",
															"nodeType": "VariableDeclaration",
															"scope": 1133,
															"src": "2988:9:7",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1104,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2988:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1111,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1110,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1108,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 1106,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3000:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1107,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1076,
																"src": "3004:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3000:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1109,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3013:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "3000:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2988:26:7"
												},
												"isSimpleCounterLoop": false,
												"loopExpression": {
													"expression": {
														"id": 1116,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "3023:3:7",
														"subExpression": {
															"id": 1115,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1105,
															"src": "3025:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1117,
													"nodeType": "ExpressionStatement",
													"src": "3023:3:7"
												},
												"nodeType": "ForStatement",
												"src": "2983:128:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1137,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1135,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1074,
																"src": "3128:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1136,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3137:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3128:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 1138,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3140:34:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 1134,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3120:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1139,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3120:55:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1140,
												"nodeType": "ExpressionStatement",
												"src": "3120:55:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1143,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1082,
															"src": "3199:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1142,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "3192:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1141,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "3192:6:7",
															"typeDescriptions": {}
														}
													},
													"id": 1144,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3192:14:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1080,
												"id": 1145,
												"nodeType": "Return",
												"src": "3185:21:7"
											}
										]
									},
									"documentation": {
										"id": 1072,
										"nodeType": "StructuredDocumentation",
										"src": "2659:112:7",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 1147,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2785:11:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1077,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1074,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2805:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1147,
												"src": "2797:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1073,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2797:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1076,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "2820:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1147,
												"src": "2812:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1075,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2812:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2796:31:7"
									},
									"returnParameters": {
										"id": 1080,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1079,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1147,
												"src": "2851:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1078,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2851:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2850:15:7"
									},
									"scope": 1168,
									"src": "2776:437:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1166,
										"nodeType": "Block",
										"src": "3438:76:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1160,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1150,
																			"src": "3483:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1159,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3475:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 1158,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "3475:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1161,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3475:13:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 1157,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3467:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1156,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3467:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1162,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3467:22:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1163,
															"name": "_ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1003,
															"src": "3491:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 1155,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1071,
															1147,
															1167
														],
														"referencedDeclaration": 1147,
														"src": "3455:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 1164,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3455:52:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1154,
												"id": 1165,
												"nodeType": "Return",
												"src": "3448:59:7"
											}
										]
									},
									"documentation": {
										"id": 1148,
										"nodeType": "StructuredDocumentation",
										"src": "3219:141:7",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."
									},
									"id": 1167,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "3374:11:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1150,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "3394:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1167,
												"src": "3386:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1149,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3386:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3385:14:7"
									},
									"returnParameters": {
										"id": 1154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1153,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1167,
												"src": "3423:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1152,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3423:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3422:15:7"
									},
									"scope": 1168,
									"src": "3365:149:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1169,
							"src": "1451:2065:7",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "1364:2153:7"
				},
				"id": 7
			},
			"0x/@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ast": {
					"absolutePath": "0x/@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
					"exportedSymbols": {
						"ECDSA": [
							1529
						],
						"Math": [
							2548
						],
						"Strings": [
							1168
						]
					},
					"id": 1530,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1170,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "1375:23:8"
						},
						{
							"absolutePath": "0x/@openzeppelin/contracts/utils/Strings.sol",
							"file": "../Strings.sol",
							"id": 1171,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1530,
							"sourceUnit": 1169,
							"src": "1400:24:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ECDSA",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1172,
								"nodeType": "StructuredDocumentation",
								"src": "1426:205:8",
								"text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
							},
							"fullyImplemented": true,
							"id": 1529,
							"linearizedBaseContracts": [
								1529
							],
							"name": "ECDSA",
							"nameLocation": "1640:5:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ECDSA.RecoverError",
									"id": 1178,
									"members": [
										{
											"id": 1173,
											"name": "NoError",
											"nameLocation": "1680:7:8",
											"nodeType": "EnumValue",
											"src": "1680:7:8"
										},
										{
											"id": 1174,
											"name": "InvalidSignature",
											"nameLocation": "1697:16:8",
											"nodeType": "EnumValue",
											"src": "1697:16:8"
										},
										{
											"id": 1175,
											"name": "InvalidSignatureLength",
											"nameLocation": "1723:22:8",
											"nodeType": "EnumValue",
											"src": "1723:22:8"
										},
										{
											"id": 1176,
											"name": "InvalidSignatureS",
											"nameLocation": "1755:17:8",
											"nodeType": "EnumValue",
											"src": "1755:17:8"
										},
										{
											"id": 1177,
											"name": "InvalidSignatureV",
											"nameLocation": "1782:17:8",
											"nodeType": "EnumValue",
											"src": "1782:17:8"
										}
									],
									"name": "RecoverError",
									"nameLocation": "1657:12:8",
									"nodeType": "EnumDefinition",
									"src": "1652:175:8"
								},
								{
									"body": {
										"id": 1221,
										"nodeType": "Block",
										"src": "1887:457:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_RecoverError_$1178",
														"typeString": "enum ECDSA.RecoverError"
													},
													"id": 1187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1184,
														"name": "error",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1181,
														"src": "1901:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1178",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 1185,
															"name": "RecoverError",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1178,
															"src": "1910:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_RecoverError_$1178_$",
																"typeString": "type(enum ECDSA.RecoverError)"
															}
														},
														"id": 1186,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "1923:7:8",
														"memberName": "NoError",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1173,
														"src": "1910:20:8",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1178",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"src": "1901:29:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_enum$_RecoverError_$1178",
															"typeString": "enum ECDSA.RecoverError"
														},
														"id": 1193,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1190,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1181,
															"src": "1997:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1178",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 1191,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1178,
																"src": "2006:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1178_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 1192,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "2019:16:8",
															"memberName": "InvalidSignature",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1174,
															"src": "2006:29:8",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1178",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"src": "1997:38:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_enum$_RecoverError_$1178",
																"typeString": "enum ECDSA.RecoverError"
															},
															"id": 1202,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1199,
																"name": "error",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1181,
																"src": "2106:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1178",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1200,
																	"name": "RecoverError",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1178,
																	"src": "2115:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_RecoverError_$1178_$",
																		"typeString": "type(enum ECDSA.RecoverError)"
																	}
																},
																"id": 1201,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2128:22:8",
																"memberName": "InvalidSignatureLength",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1175,
																"src": "2115:35:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1178",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"src": "2106:44:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_enum$_RecoverError_$1178",
																	"typeString": "enum ECDSA.RecoverError"
																},
																"id": 1211,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1208,
																	"name": "error",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1181,
																	"src": "2228:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1178",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 1209,
																		"name": "RecoverError",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1178,
																		"src": "2237:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_enum$_RecoverError_$1178_$",
																			"typeString": "type(enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 1210,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "2250:17:8",
																	"memberName": "InvalidSignatureS",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1176,
																	"src": "2237:30:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1178",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"src": "2228:39:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1217,
															"nodeType": "IfStatement",
															"src": "2224:114:8",
															"trueBody": {
																"id": 1216,
																"nodeType": "Block",
																"src": "2269:69:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"hexValue": "45434453413a20696e76616c6964207369676e6174757265202773272076616c7565",
																					"id": 1213,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "2290:36:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
																						"typeString": "literal_string \"ECDSA: invalid signature 's' value\""
																					},
																					"value": "ECDSA: invalid signature 's' value"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
																						"typeString": "literal_string \"ECDSA: invalid signature 's' value\""
																					}
																				],
																				"id": 1212,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "2283:6:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 1214,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2283:44:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1215,
																		"nodeType": "ExpressionStatement",
																		"src": "2283:44:8"
																	}
																]
															}
														},
														"id": 1218,
														"nodeType": "IfStatement",
														"src": "2102:236:8",
														"trueBody": {
															"id": 1207,
															"nodeType": "Block",
															"src": "2152:66:8",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"hexValue": "45434453413a20696e76616c6964207369676e6174757265206c656e677468",
																				"id": 1204,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "string",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2173:33:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
																					"typeString": "literal_string \"ECDSA: invalid signature length\""
																				},
																				"value": "ECDSA: invalid signature length"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
																					"typeString": "literal_string \"ECDSA: invalid signature length\""
																				}
																			],
																			"id": 1203,
																			"name": "revert",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				4294967277,
																				4294967277
																			],
																			"referencedDeclaration": 4294967277,
																			"src": "2166:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																				"typeString": "function (string memory) pure"
																			}
																		},
																		"id": 1205,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2166:41:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1206,
																	"nodeType": "ExpressionStatement",
																	"src": "2166:41:8"
																}
															]
														}
													},
													"id": 1219,
													"nodeType": "IfStatement",
													"src": "1993:345:8",
													"trueBody": {
														"id": 1198,
														"nodeType": "Block",
														"src": "2037:59:8",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"hexValue": "45434453413a20696e76616c6964207369676e6174757265",
																			"id": 1195,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "string",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2058:26:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
																				"typeString": "literal_string \"ECDSA: invalid signature\""
																			},
																			"value": "ECDSA: invalid signature"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
																				"typeString": "literal_string \"ECDSA: invalid signature\""
																			}
																		],
																		"id": 1194,
																		"name": "revert",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			4294967277,
																			4294967277
																		],
																		"referencedDeclaration": 4294967277,
																		"src": "2051:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																			"typeString": "function (string memory) pure"
																		}
																	},
																	"id": 1196,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2051:34:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1197,
																"nodeType": "ExpressionStatement",
																"src": "2051:34:8"
															}
														]
													}
												},
												"id": 1220,
												"nodeType": "IfStatement",
												"src": "1897:441:8",
												"trueBody": {
													"id": 1189,
													"nodeType": "Block",
													"src": "1932:55:8",
													"statements": [
														{
															"functionReturnParameters": 1183,
															"id": 1188,
															"nodeType": "Return",
															"src": "1946:7:8"
														}
													]
												}
											}
										]
									},
									"id": 1222,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_throwError",
									"nameLocation": "1842:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1181,
												"mutability": "mutable",
												"name": "error",
												"nameLocation": "1867:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1222,
												"src": "1854:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1178",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1180,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1179,
														"name": "RecoverError",
														"nameLocations": [
															"1854:12:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1178,
														"src": "1854:12:8"
													},
													"referencedDeclaration": 1178,
													"src": "1854:12:8",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1178",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1853:20:8"
									},
									"returnParameters": {
										"id": 1183,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1887:0:8"
									},
									"scope": 1529,
									"src": "1833:511:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1267,
										"nodeType": "Block",
										"src": "3512:626:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1238,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1235,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1227,
															"src": "3526:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1236,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3536:6:8",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3526:16:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "3635",
														"id": 1237,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3546:2:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "3526:22:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1265,
													"nodeType": "Block",
													"src": "4051:81:8",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1259,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4081:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1258,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4073:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1257,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "4073:7:8",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1260,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4073:10:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1261,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1178,
																			"src": "4085:12:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1178_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1262,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "4098:22:8",
																		"memberName": "InvalidSignatureLength",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1175,
																		"src": "4085:35:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1178",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 1263,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4072:49:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1178_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 1234,
															"id": 1264,
															"nodeType": "Return",
															"src": "4065:56:8"
														}
													]
												},
												"id": 1266,
												"nodeType": "IfStatement",
												"src": "3522:610:8",
												"trueBody": {
													"id": 1256,
													"nodeType": "Block",
													"src": "3550:495:8",
													"statements": [
														{
															"assignments": [
																1240
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1240,
																	"mutability": "mutable",
																	"name": "r",
																	"nameLocation": "3572:1:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1256,
																	"src": "3564:9:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1239,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "3564:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1241,
															"nodeType": "VariableDeclarationStatement",
															"src": "3564:9:8"
														},
														{
															"assignments": [
																1243
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1243,
																	"mutability": "mutable",
																	"name": "s",
																	"nameLocation": "3595:1:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1256,
																	"src": "3587:9:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1242,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "3587:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1244,
															"nodeType": "VariableDeclarationStatement",
															"src": "3587:9:8"
														},
														{
															"assignments": [
																1246
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1246,
																	"mutability": "mutable",
																	"name": "v",
																	"nameLocation": "3616:1:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1256,
																	"src": "3610:7:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 1245,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "3610:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1247,
															"nodeType": "VariableDeclarationStatement",
															"src": "3610:7:8"
														},
														{
															"AST": {
																"nativeSrc": "3818:171:8",
																"nodeType": "YulBlock",
																"src": "3818:171:8",
																"statements": [
																	{
																		"nativeSrc": "3836:32:8",
																		"nodeType": "YulAssignment",
																		"src": "3836:32:8",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "3851:9:8",
																							"nodeType": "YulIdentifier",
																							"src": "3851:9:8"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "3862:4:8",
																							"nodeType": "YulLiteral",
																							"src": "3862:4:8",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "3847:3:8",
																						"nodeType": "YulIdentifier",
																						"src": "3847:3:8"
																					},
																					"nativeSrc": "3847:20:8",
																					"nodeType": "YulFunctionCall",
																					"src": "3847:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "3841:5:8",
																				"nodeType": "YulIdentifier",
																				"src": "3841:5:8"
																			},
																			"nativeSrc": "3841:27:8",
																			"nodeType": "YulFunctionCall",
																			"src": "3841:27:8"
																		},
																		"variableNames": [
																			{
																				"name": "r",
																				"nativeSrc": "3836:1:8",
																				"nodeType": "YulIdentifier",
																				"src": "3836:1:8"
																			}
																		]
																	},
																	{
																		"nativeSrc": "3885:32:8",
																		"nodeType": "YulAssignment",
																		"src": "3885:32:8",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "3900:9:8",
																							"nodeType": "YulIdentifier",
																							"src": "3900:9:8"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "3911:4:8",
																							"nodeType": "YulLiteral",
																							"src": "3911:4:8",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "3896:3:8",
																						"nodeType": "YulIdentifier",
																						"src": "3896:3:8"
																					},
																					"nativeSrc": "3896:20:8",
																					"nodeType": "YulFunctionCall",
																					"src": "3896:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "3890:5:8",
																				"nodeType": "YulIdentifier",
																				"src": "3890:5:8"
																			},
																			"nativeSrc": "3890:27:8",
																			"nodeType": "YulFunctionCall",
																			"src": "3890:27:8"
																		},
																		"variableNames": [
																			{
																				"name": "s",
																				"nativeSrc": "3885:1:8",
																				"nodeType": "YulIdentifier",
																				"src": "3885:1:8"
																			}
																		]
																	},
																	{
																		"nativeSrc": "3934:41:8",
																		"nodeType": "YulAssignment",
																		"src": "3934:41:8",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3944:1:8",
																					"nodeType": "YulLiteral",
																					"src": "3944:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "signature",
																									"nativeSrc": "3957:9:8",
																									"nodeType": "YulIdentifier",
																									"src": "3957:9:8"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "3968:4:8",
																									"nodeType": "YulLiteral",
																									"src": "3968:4:8",
																									"type": "",
																									"value": "0x60"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "3953:3:8",
																								"nodeType": "YulIdentifier",
																								"src": "3953:3:8"
																							},
																							"nativeSrc": "3953:20:8",
																							"nodeType": "YulFunctionCall",
																							"src": "3953:20:8"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "3947:5:8",
																						"nodeType": "YulIdentifier",
																						"src": "3947:5:8"
																					},
																					"nativeSrc": "3947:27:8",
																					"nodeType": "YulFunctionCall",
																					"src": "3947:27:8"
																				}
																			],
																			"functionName": {
																				"name": "byte",
																				"nativeSrc": "3939:4:8",
																				"nodeType": "YulIdentifier",
																				"src": "3939:4:8"
																			},
																			"nativeSrc": "3939:36:8",
																			"nodeType": "YulFunctionCall",
																			"src": "3939:36:8"
																		},
																		"variableNames": [
																			{
																				"name": "v",
																				"nativeSrc": "3934:1:8",
																				"nodeType": "YulIdentifier",
																				"src": "3934:1:8"
																			}
																		]
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "cancun",
															"externalReferences": [
																{
																	"declaration": 1240,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "3836:1:8",
																	"valueSize": 1
																},
																{
																	"declaration": 1243,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "3885:1:8",
																	"valueSize": 1
																},
																{
																	"declaration": 1227,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "3851:9:8",
																	"valueSize": 1
																},
																{
																	"declaration": 1227,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "3900:9:8",
																	"valueSize": 1
																},
																{
																	"declaration": 1227,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "3957:9:8",
																	"valueSize": 1
																},
																{
																	"declaration": 1246,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "3934:1:8",
																	"valueSize": 1
																}
															],
															"id": 1248,
															"nodeType": "InlineAssembly",
															"src": "3809:180:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1250,
																		"name": "hash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1225,
																		"src": "4020:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1251,
																		"name": "v",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1246,
																		"src": "4026:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	{
																		"id": 1252,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1240,
																		"src": "4029:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1253,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1243,
																		"src": "4032:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 1249,
																	"name": "tryRecover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		1268,
																		1342,
																		1436
																	],
																	"referencedDeclaration": 1436,
																	"src": "4009:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1178_$",
																		"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
																	}
																},
																"id": 1254,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4009:25:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1178_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 1234,
															"id": 1255,
															"nodeType": "Return",
															"src": "4002:32:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1223,
										"nodeType": "StructuredDocumentation",
										"src": "2350:1053:8",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"
									},
									"id": 1268,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "3417:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1225,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "3436:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1268,
												"src": "3428:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1224,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3428:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1227,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "3455:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 1268,
												"src": "3442:22:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1226,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3442:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3427:38:8"
									},
									"returnParameters": {
										"id": 1234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1230,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1268,
												"src": "3489:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1229,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3489:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1233,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1268,
												"src": "3498:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1178",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1232,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1231,
														"name": "RecoverError",
														"nameLocations": [
															"3498:12:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1178,
														"src": "3498:12:8"
													},
													"referencedDeclaration": 1178,
													"src": "3498:12:8",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1178",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3488:23:8"
									},
									"scope": 1529,
									"src": "3408:730:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1294,
										"nodeType": "Block",
										"src": "5011:140:8",
										"statements": [
											{
												"assignments": [
													1279,
													1282
												],
												"declarations": [
													{
														"constant": false,
														"id": 1279,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "5030:9:8",
														"nodeType": "VariableDeclaration",
														"scope": 1294,
														"src": "5022:17:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1278,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5022:7:8",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1282,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "5054:5:8",
														"nodeType": "VariableDeclaration",
														"scope": 1294,
														"src": "5041:18:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1178",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1281,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1280,
																"name": "RecoverError",
																"nameLocations": [
																	"5041:12:8"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1178,
																"src": "5041:12:8"
															},
															"referencedDeclaration": 1178,
															"src": "5041:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1178",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1287,
												"initialValue": {
													"arguments": [
														{
															"id": 1284,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1271,
															"src": "5074:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1285,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1273,
															"src": "5080:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1283,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1268,
															1342,
															1436
														],
														"referencedDeclaration": 1268,
														"src": "5063:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1178_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 1286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5063:27:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1178_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5021:69:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1289,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1282,
															"src": "5112:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1178",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1178",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 1288,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1222,
														"src": "5100:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1178_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 1290,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5100:18:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1291,
												"nodeType": "ExpressionStatement",
												"src": "5100:18:8"
											},
											{
												"expression": {
													"id": 1292,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1279,
													"src": "5135:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1277,
												"id": 1293,
												"nodeType": "Return",
												"src": "5128:16:8"
											}
										]
									},
									"documentation": {
										"id": 1269,
										"nodeType": "StructuredDocumentation",
										"src": "4144:775:8",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."
									},
									"id": 1295,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "4933:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1271,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4949:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1295,
												"src": "4941:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1270,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4941:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1273,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "4968:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 1295,
												"src": "4955:22:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1272,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4955:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4940:38:8"
									},
									"returnParameters": {
										"id": 1277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1276,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1295,
												"src": "5002:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1275,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5002:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5001:9:8"
									},
									"scope": 1529,
									"src": "4924:227:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1341,
										"nodeType": "Block",
										"src": "5538:203:8",
										"statements": [
											{
												"assignments": [
													1311
												],
												"declarations": [
													{
														"constant": false,
														"id": 1311,
														"mutability": "mutable",
														"name": "s",
														"nameLocation": "5556:1:8",
														"nodeType": "VariableDeclaration",
														"scope": 1341,
														"src": "5548:9:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1310,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "5548:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1318,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1317,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1312,
														"name": "vs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1302,
														"src": "5560:2:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
																"id": 1315,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5573:66:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9967"
																},
																"value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9967"
																}
															],
															"id": 1314,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5565:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_bytes32_$",
																"typeString": "type(bytes32)"
															},
															"typeName": {
																"id": 1313,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "5565:7:8",
																"typeDescriptions": {}
															}
														},
														"id": 1316,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5565:75:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "5560:80:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5548:92:8"
											},
											{
												"assignments": [
													1320
												],
												"declarations": [
													{
														"constant": false,
														"id": 1320,
														"mutability": "mutable",
														"name": "v",
														"nameLocation": "5656:1:8",
														"nodeType": "VariableDeclaration",
														"scope": 1341,
														"src": "5650:7:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 1319,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "5650:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1333,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1331,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1328,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"id": 1325,
																					"name": "vs",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1302,
																					"src": "5675:2:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"id": 1324,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "5667:7:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint256_$",
																					"typeString": "type(uint256)"
																				},
																				"typeName": {
																					"id": 1323,
																					"name": "uint256",
																					"nodeType": "ElementaryTypeName",
																					"src": "5667:7:8",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1326,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5667:11:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">>",
																		"rightExpression": {
																			"hexValue": "323535",
																			"id": 1327,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5682:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_255_by_1",
																				"typeString": "int_const 255"
																			},
																			"value": "255"
																		},
																		"src": "5667:18:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1329,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5666:20:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "3237",
																"id": 1330,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5689:2:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_27_by_1",
																	"typeString": "int_const 27"
																},
																"value": "27"
															},
															"src": "5666:25:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1322,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "5660:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint8_$",
															"typeString": "type(uint8)"
														},
														"typeName": {
															"id": 1321,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "5660:5:8",
															"typeDescriptions": {}
														}
													},
													"id": 1332,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5660:32:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5650:42:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1335,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1298,
															"src": "5720:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1336,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1320,
															"src": "5726:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1337,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1300,
															"src": "5729:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1338,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1311,
															"src": "5732:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1334,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1268,
															1342,
															1436
														],
														"referencedDeclaration": 1436,
														"src": "5709:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1178_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 1339,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5709:25:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1178_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"functionReturnParameters": 1309,
												"id": 1340,
												"nodeType": "Return",
												"src": "5702:32:8"
											}
										]
									},
									"documentation": {
										"id": 1296,
										"nodeType": "StructuredDocumentation",
										"src": "5157:243:8",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"
									},
									"id": 1342,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "5414:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1298,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "5442:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1342,
												"src": "5434:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1297,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5434:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1300,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "5464:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1342,
												"src": "5456:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1299,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5456:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1302,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "5483:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1342,
												"src": "5475:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1301,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5475:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5424:67:8"
									},
									"returnParameters": {
										"id": 1309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1305,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1342,
												"src": "5515:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1304,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5515:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1308,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1342,
												"src": "5524:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1178",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1307,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1306,
														"name": "RecoverError",
														"nameLocations": [
															"5524:12:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1178,
														"src": "5524:12:8"
													},
													"referencedDeclaration": 1178,
													"src": "5524:12:8",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1178",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5514:23:8"
									},
									"scope": 1529,
									"src": "5405:336:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1371,
										"nodeType": "Block",
										"src": "6022:136:8",
										"statements": [
											{
												"assignments": [
													1355,
													1358
												],
												"declarations": [
													{
														"constant": false,
														"id": 1355,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "6041:9:8",
														"nodeType": "VariableDeclaration",
														"scope": 1371,
														"src": "6033:17:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1354,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6033:7:8",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1358,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "6065:5:8",
														"nodeType": "VariableDeclaration",
														"scope": 1371,
														"src": "6052:18:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1178",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1357,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1356,
																"name": "RecoverError",
																"nameLocations": [
																	"6052:12:8"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1178,
																"src": "6052:12:8"
															},
															"referencedDeclaration": 1178,
															"src": "6052:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1178",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1364,
												"initialValue": {
													"arguments": [
														{
															"id": 1360,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1345,
															"src": "6085:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1361,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1347,
															"src": "6091:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1362,
															"name": "vs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1349,
															"src": "6094:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1359,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1268,
															1342,
															1436
														],
														"referencedDeclaration": 1342,
														"src": "6074:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1178_$",
															"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 1363,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6074:23:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1178_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6032:65:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1366,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1358,
															"src": "6119:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1178",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1178",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 1365,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1222,
														"src": "6107:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1178_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 1367,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6107:18:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1368,
												"nodeType": "ExpressionStatement",
												"src": "6107:18:8"
											},
											{
												"expression": {
													"id": 1369,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1355,
													"src": "6142:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1353,
												"id": 1370,
												"nodeType": "Return",
												"src": "6135:16:8"
											}
										]
									},
									"documentation": {
										"id": 1343,
										"nodeType": "StructuredDocumentation",
										"src": "5747:154:8",
										"text": " @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"
									},
									"id": 1372,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "5915:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1345,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "5940:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1372,
												"src": "5932:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1344,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5932:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1347,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "5962:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1372,
												"src": "5954:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1346,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5954:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1349,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "5981:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1372,
												"src": "5973:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1348,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5973:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5922:67:8"
									},
									"returnParameters": {
										"id": 1353,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1352,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1372,
												"src": "6013:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1351,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6013:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6012:9:8"
									},
									"scope": 1529,
									"src": "5906:252:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1435,
										"nodeType": "Block",
										"src": "6481:1345:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1394,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1391,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1381,
																"src": "7377:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1390,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7369:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1389,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "7369:7:8",
																"typeDescriptions": {}
															}
														},
														"id": 1392,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7369:10:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
														"id": 1393,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7382:66:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
															"typeString": "int_const 5789...(69 digits omitted)...7168"
														},
														"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
													},
													"src": "7369:79:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1404,
												"nodeType": "IfStatement",
												"src": "7365:161:8",
												"trueBody": {
													"id": 1403,
													"nodeType": "Block",
													"src": "7450:76:8",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1397,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7480:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1396,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7472:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1395,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7472:7:8",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1398,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7472:10:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1399,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1178,
																			"src": "7484:12:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1178_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1400,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "7497:17:8",
																		"memberName": "InvalidSignatureS",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1176,
																		"src": "7484:30:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1178",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 1401,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "7471:44:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1178_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 1388,
															"id": 1402,
															"nodeType": "Return",
															"src": "7464:51:8"
														}
													]
												}
											},
											{
												"assignments": [
													1406
												],
												"declarations": [
													{
														"constant": false,
														"id": 1406,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "7628:6:8",
														"nodeType": "VariableDeclaration",
														"scope": 1435,
														"src": "7620:14:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1405,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7620:7:8",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1413,
												"initialValue": {
													"arguments": [
														{
															"id": 1408,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1375,
															"src": "7647:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1409,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1377,
															"src": "7653:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1410,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1379,
															"src": "7656:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1411,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1381,
															"src": "7659:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1407,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "7637:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 1412,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7637:24:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7620:41:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1419,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1414,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1406,
														"src": "7675:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1417,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7693:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1416,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7685:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1415,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7685:7:8",
																"typeDescriptions": {}
															}
														},
														"id": 1418,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7685:10:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7675:20:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1429,
												"nodeType": "IfStatement",
												"src": "7671:101:8",
												"trueBody": {
													"id": 1428,
													"nodeType": "Block",
													"src": "7697:75:8",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1422,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7727:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1421,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7719:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1420,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7719:7:8",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1423,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7719:10:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1424,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1178,
																			"src": "7731:12:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1178_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1425,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "7744:16:8",
																		"memberName": "InvalidSignature",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1174,
																		"src": "7731:29:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1178",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 1426,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "7718:43:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1178_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 1388,
															"id": 1427,
															"nodeType": "Return",
															"src": "7711:50:8"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 1430,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1406,
															"src": "7790:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1431,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1178,
																"src": "7798:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1178_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 1432,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7811:7:8",
															"memberName": "NoError",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1173,
															"src": "7798:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1178",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"id": 1433,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "7789:30:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1178_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"functionReturnParameters": 1388,
												"id": 1434,
												"nodeType": "Return",
												"src": "7782:37:8"
											}
										]
									},
									"documentation": {
										"id": 1373,
										"nodeType": "StructuredDocumentation",
										"src": "6164:163:8",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"
									},
									"id": 1436,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "6341:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1375,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "6369:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1436,
												"src": "6361:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1374,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6361:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1377,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "6389:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1436,
												"src": "6383:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1376,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6383:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1379,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "6408:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1436,
												"src": "6400:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1378,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6400:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1381,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "6427:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1436,
												"src": "6419:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1380,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6419:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6351:83:8"
									},
									"returnParameters": {
										"id": 1388,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1384,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1436,
												"src": "6458:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1383,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6458:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1387,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1436,
												"src": "6467:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1178",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1386,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1385,
														"name": "RecoverError",
														"nameLocations": [
															"6467:12:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1178,
														"src": "6467:12:8"
													},
													"referencedDeclaration": 1178,
													"src": "6467:12:8",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1178",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6457:23:8"
									},
									"scope": 1529,
									"src": "6332:1494:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1468,
										"nodeType": "Block",
										"src": "8091:138:8",
										"statements": [
											{
												"assignments": [
													1451,
													1454
												],
												"declarations": [
													{
														"constant": false,
														"id": 1451,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "8110:9:8",
														"nodeType": "VariableDeclaration",
														"scope": 1468,
														"src": "8102:17:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1450,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "8102:7:8",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1454,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "8134:5:8",
														"nodeType": "VariableDeclaration",
														"scope": 1468,
														"src": "8121:18:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1178",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1453,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1452,
																"name": "RecoverError",
																"nameLocations": [
																	"8121:12:8"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1178,
																"src": "8121:12:8"
															},
															"referencedDeclaration": 1178,
															"src": "8121:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1178",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1461,
												"initialValue": {
													"arguments": [
														{
															"id": 1456,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "8154:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1457,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1441,
															"src": "8160:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1458,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1443,
															"src": "8163:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1459,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1445,
															"src": "8166:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1455,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1268,
															1342,
															1436
														],
														"referencedDeclaration": 1436,
														"src": "8143:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1178_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 1460,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8143:25:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1178_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8101:67:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1463,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1454,
															"src": "8190:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1178",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1178",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 1462,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1222,
														"src": "8178:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1178_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 1464,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8178:18:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1465,
												"nodeType": "ExpressionStatement",
												"src": "8178:18:8"
											},
											{
												"expression": {
													"id": 1466,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1451,
													"src": "8213:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1449,
												"id": 1467,
												"nodeType": "Return",
												"src": "8206:16:8"
											}
										]
									},
									"documentation": {
										"id": 1437,
										"nodeType": "StructuredDocumentation",
										"src": "7832:122:8",
										"text": " @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 1469,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "7968:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1439,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "7993:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1469,
												"src": "7985:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1438,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7985:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1441,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "8013:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1469,
												"src": "8007:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1440,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "8007:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1443,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "8032:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1469,
												"src": "8024:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1442,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8024:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1445,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "8051:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1469,
												"src": "8043:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1444,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8043:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7975:83:8"
									},
									"returnParameters": {
										"id": 1449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1448,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1469,
												"src": "8082:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1447,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8082:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8081:9:8"
									},
									"scope": 1529,
									"src": "7959:270:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1485,
										"nodeType": "Block",
										"src": "8597:187:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a3332",
																	"id": 1480,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8735:34:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n32"
																},
																{
																	"id": 1481,
																	"name": "hash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1472,
																	"src": "8771:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 1478,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "8718:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1479,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "8722:12:8",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "8718:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1482,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8718:58:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1477,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "8708:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1483,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8708:69:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1476,
												"id": 1484,
												"nodeType": "Return",
												"src": "8701:76:8"
											}
										]
									},
									"documentation": {
										"id": 1470,
										"nodeType": "StructuredDocumentation",
										"src": "8235:279:8",
										"text": " @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."
									},
									"id": 1486,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "8528:22:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1473,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1472,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "8559:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1486,
												"src": "8551:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1471,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8551:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8550:14:8"
									},
									"returnParameters": {
										"id": 1476,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1475,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1486,
												"src": "8588:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1474,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8588:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8587:9:8"
									},
									"scope": 1529,
									"src": "8519:265:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1507,
										"nodeType": "Block",
										"src": "9149:116:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a",
																	"id": 1497,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9193:32:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n"
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"id": 1500,
																				"name": "s",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1489,
																				"src": "9244:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 1501,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "9246:6:8",
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "9244:8:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1498,
																			"name": "Strings",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1168,
																			"src": "9227:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Strings_$1168_$",
																				"typeString": "type(library Strings)"
																			}
																		},
																		"id": 1499,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "9235:8:8",
																		"memberName": "toString",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1051,
																		"src": "9227:16:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																			"typeString": "function (uint256) pure returns (string memory)"
																		}
																	},
																	"id": 1502,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9227:26:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																{
																	"id": 1503,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1489,
																	"src": "9255:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 1495,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "9176:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1496,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "9180:12:8",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "9176:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1504,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9176:81:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1494,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "9166:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1505,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9166:92:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1493,
												"id": 1506,
												"nodeType": "Return",
												"src": "9159:99:8"
											}
										]
									},
									"documentation": {
										"id": 1487,
										"nodeType": "StructuredDocumentation",
										"src": "8790:274:8",
										"text": " @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."
									},
									"id": 1508,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "9078:22:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1489,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "9114:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1508,
												"src": "9101:14:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1488,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9101:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9100:16:8"
									},
									"returnParameters": {
										"id": 1493,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1492,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1508,
												"src": "9140:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1491,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9140:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9139:9:8"
									},
									"scope": 1529,
									"src": "9069:196:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1527,
										"nodeType": "Block",
										"src": "9706:92:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "1901",
																	"id": 1521,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9750:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541",
																		"typeString": "literal_string hex\"1901\""
																	},
																	"value": "\u0019\u0001"
																},
																{
																	"id": 1522,
																	"name": "domainSeparator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1511,
																	"src": "9762:15:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1523,
																	"name": "structHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1513,
																	"src": "9779:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541",
																		"typeString": "literal_string hex\"1901\""
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 1519,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "9733:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1520,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "9737:12:8",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "9733:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1524,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9733:57:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1518,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "9723:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1525,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9723:68:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1517,
												"id": 1526,
												"nodeType": "Return",
												"src": "9716:75:8"
											}
										]
									},
									"documentation": {
										"id": 1509,
										"nodeType": "StructuredDocumentation",
										"src": "9271:328:8",
										"text": " @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."
									},
									"id": 1528,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toTypedDataHash",
									"nameLocation": "9613:15:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1514,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1511,
												"mutability": "mutable",
												"name": "domainSeparator",
												"nameLocation": "9637:15:8",
												"nodeType": "VariableDeclaration",
												"scope": 1528,
												"src": "9629:23:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1510,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9629:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1513,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "9662:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1528,
												"src": "9654:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1512,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9654:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9628:45:8"
									},
									"returnParameters": {
										"id": 1517,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1516,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1528,
												"src": "9697:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1515,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9697:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9696:9:8"
									},
									"scope": 1529,
									"src": "9604:194:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1530,
							"src": "1632:8168:8",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "1375:8426:8"
				},
				"id": 8
			},
			"0x/@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
				"ast": {
					"absolutePath": "0x/@openzeppelin/contracts/utils/cryptography/EIP712.sol",
					"exportedSymbols": {
						"ECDSA": [
							1529
						],
						"EIP712": [
							1683
						],
						"Math": [
							2548
						],
						"Strings": [
							1168
						]
					},
					"id": 1684,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1531,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "1376:23:9"
						},
						{
							"absolutePath": "0x/@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
							"file": "./ECDSA.sol",
							"id": 1532,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1684,
							"sourceUnit": 1530,
							"src": "1401:21:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "EIP712",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1533,
								"nodeType": "StructuredDocumentation",
								"src": "1424:1142:9",
								"text": " @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n they need in their contracts using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n _Available since v3.4._"
							},
							"fullyImplemented": true,
							"id": 1683,
							"linearizedBaseContracts": [
								1683
							],
							"name": "EIP712",
							"nameLocation": "2585:6:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 1535,
									"mutability": "immutable",
									"name": "_CACHED_DOMAIN_SEPARATOR",
									"nameLocation": "2861:24:9",
									"nodeType": "VariableDeclaration",
									"scope": 1683,
									"src": "2835:50:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1534,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2835:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1537,
									"mutability": "immutable",
									"name": "_CACHED_CHAIN_ID",
									"nameLocation": "2917:16:9",
									"nodeType": "VariableDeclaration",
									"scope": 1683,
									"src": "2891:42:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1536,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2891:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1539,
									"mutability": "immutable",
									"name": "_CACHED_THIS",
									"nameLocation": "2965:12:9",
									"nodeType": "VariableDeclaration",
									"scope": 1683,
									"src": "2939:38:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1538,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2939:7:9",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1541,
									"mutability": "immutable",
									"name": "_HASHED_NAME",
									"nameLocation": "3010:12:9",
									"nodeType": "VariableDeclaration",
									"scope": 1683,
									"src": "2984:38:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1540,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2984:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1543,
									"mutability": "immutable",
									"name": "_HASHED_VERSION",
									"nameLocation": "3054:15:9",
									"nodeType": "VariableDeclaration",
									"scope": 1683,
									"src": "3028:41:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1542,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "3028:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1545,
									"mutability": "immutable",
									"name": "_TYPE_HASH",
									"nameLocation": "3101:10:9",
									"nodeType": "VariableDeclaration",
									"scope": 1683,
									"src": "3075:36:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1544,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "3075:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1609,
										"nodeType": "Block",
										"src": "3782:547:9",
										"statements": [
											{
												"assignments": [
													1554
												],
												"declarations": [
													{
														"constant": false,
														"id": 1554,
														"mutability": "mutable",
														"name": "hashedName",
														"nameLocation": "3800:10:9",
														"nodeType": "VariableDeclaration",
														"scope": 1609,
														"src": "3792:18:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1553,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "3792:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1561,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1558,
																	"name": "name",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1548,
																	"src": "3829:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1557,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3823:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 1556,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "3823:5:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1559,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3823:11:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1555,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "3813:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1560,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3813:22:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3792:43:9"
											},
											{
												"assignments": [
													1563
												],
												"declarations": [
													{
														"constant": false,
														"id": 1563,
														"mutability": "mutable",
														"name": "hashedVersion",
														"nameLocation": "3853:13:9",
														"nodeType": "VariableDeclaration",
														"scope": 1609,
														"src": "3845:21:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1562,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "3845:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1570,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1567,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1550,
																	"src": "3885:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1566,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3879:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 1565,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "3879:5:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1568,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3879:14:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1564,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "3869:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1569,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3869:25:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3845:49:9"
											},
											{
												"assignments": [
													1572
												],
												"declarations": [
													{
														"constant": false,
														"id": 1572,
														"mutability": "mutable",
														"name": "typeHash",
														"nameLocation": "3912:8:9",
														"nodeType": "VariableDeclaration",
														"scope": 1609,
														"src": "3904:16:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1571,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "3904:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1576,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
															"id": 1574,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3946:84:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
																"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
															},
															"value": "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
																"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
															}
														],
														"id": 1573,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "3923:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1575,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3923:117:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3904:136:9"
											},
											{
												"expression": {
													"id": 1579,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1577,
														"name": "_HASHED_NAME",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1541,
														"src": "4050:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1578,
														"name": "hashedName",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1554,
														"src": "4065:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4050:25:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1580,
												"nodeType": "ExpressionStatement",
												"src": "4050:25:9"
											},
											{
												"expression": {
													"id": 1583,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1581,
														"name": "_HASHED_VERSION",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1543,
														"src": "4085:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1582,
														"name": "hashedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1563,
														"src": "4103:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4085:31:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1584,
												"nodeType": "ExpressionStatement",
												"src": "4085:31:9"
											},
											{
												"expression": {
													"id": 1588,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1585,
														"name": "_CACHED_CHAIN_ID",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1537,
														"src": "4126:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1586,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "4145:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1587,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4151:7:9",
														"memberName": "chainid",
														"nodeType": "MemberAccess",
														"src": "4145:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4126:32:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1589,
												"nodeType": "ExpressionStatement",
												"src": "4126:32:9"
											},
											{
												"expression": {
													"id": 1596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1590,
														"name": "_CACHED_DOMAIN_SEPARATOR",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1535,
														"src": "4168:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1592,
																"name": "typeHash",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1572,
																"src": "4217:8:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 1593,
																"name": "hashedName",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1554,
																"src": "4227:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 1594,
																"name": "hashedVersion",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1563,
																"src": "4239:13:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1591,
															"name": "_buildDomainSeparator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1666,
															"src": "4195:21:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32,bytes32,bytes32) view returns (bytes32)"
															}
														},
														"id": 1595,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4195:58:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4168:85:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1597,
												"nodeType": "ExpressionStatement",
												"src": "4168:85:9"
											},
											{
												"expression": {
													"id": 1603,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1598,
														"name": "_CACHED_THIS",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1539,
														"src": "4263:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1601,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "4286:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_EIP712_$1683",
																	"typeString": "contract EIP712"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_EIP712_$1683",
																	"typeString": "contract EIP712"
																}
															],
															"id": 1600,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4278:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1599,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "4278:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 1602,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4278:13:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4263:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1604,
												"nodeType": "ExpressionStatement",
												"src": "4263:28:9"
											},
											{
												"expression": {
													"id": 1607,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1605,
														"name": "_TYPE_HASH",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1545,
														"src": "4301:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1606,
														"name": "typeHash",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1572,
														"src": "4314:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4301:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1608,
												"nodeType": "ExpressionStatement",
												"src": "4301:21:9"
											}
										]
									},
									"documentation": {
										"id": 1546,
										"nodeType": "StructuredDocumentation",
										"src": "3163:559:9",
										"text": " @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."
									},
									"id": 1610,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1551,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1548,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "3753:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1610,
												"src": "3739:18:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1547,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3739:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1550,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3773:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1610,
												"src": "3759:21:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1549,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3759:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3738:43:9"
									},
									"returnParameters": {
										"id": 1552,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3782:0:9"
									},
									"scope": 1683,
									"src": "3727:602:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1638,
										"nodeType": "Block",
										"src": "4477:246:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1626,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1621,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 1618,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4499:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$1683",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$1683",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 1617,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4491:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1616,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4491:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1619,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4491:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 1620,
															"name": "_CACHED_THIS",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1539,
															"src": "4508:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "4491:29:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1625,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 1622,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "4524:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1623,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4530:7:9",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "4524:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 1624,
															"name": "_CACHED_CHAIN_ID",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1537,
															"src": "4541:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4524:33:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4491:66:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1636,
													"nodeType": "Block",
													"src": "4621:96:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1631,
																		"name": "_TYPE_HASH",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1545,
																		"src": "4664:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1632,
																		"name": "_HASHED_NAME",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1541,
																		"src": "4676:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1633,
																		"name": "_HASHED_VERSION",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1543,
																		"src": "4690:15:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 1630,
																	"name": "_buildDomainSeparator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1666,
																	"src": "4642:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																		"typeString": "function (bytes32,bytes32,bytes32) view returns (bytes32)"
																	}
																},
																"id": 1634,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4642:64:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 1615,
															"id": 1635,
															"nodeType": "Return",
															"src": "4635:71:9"
														}
													]
												},
												"id": 1637,
												"nodeType": "IfStatement",
												"src": "4487:230:9",
												"trueBody": {
													"id": 1629,
													"nodeType": "Block",
													"src": "4559:56:9",
													"statements": [
														{
															"expression": {
																"id": 1627,
																"name": "_CACHED_DOMAIN_SEPARATOR",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1535,
																"src": "4580:24:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 1615,
															"id": 1628,
															"nodeType": "Return",
															"src": "4573:31:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1611,
										"nodeType": "StructuredDocumentation",
										"src": "4335:75:9",
										"text": " @dev Returns the domain separator for the current chain."
									},
									"id": 1639,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_domainSeparatorV4",
									"nameLocation": "4424:18:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1612,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4442:2:9"
									},
									"returnParameters": {
										"id": 1615,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1614,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1639,
												"src": "4468:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1613,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4468:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4467:9:9"
									},
									"scope": 1683,
									"src": "4415:308:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1665,
										"nodeType": "Block",
										"src": "4878:108:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1653,
																	"name": "typeHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1641,
																	"src": "4916:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1654,
																	"name": "nameHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1643,
																	"src": "4926:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1655,
																	"name": "versionHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1645,
																	"src": "4936:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"expression": {
																		"id": 1656,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "4949:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1657,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4955:7:9",
																	"memberName": "chainid",
																	"nodeType": "MemberAccess",
																	"src": "4949:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 1660,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4972:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_EIP712_$1683",
																				"typeString": "contract EIP712"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_EIP712_$1683",
																				"typeString": "contract EIP712"
																			}
																		],
																		"id": 1659,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4964:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1658,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4964:7:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1661,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4964:13:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1651,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4905:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1652,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4909:6:9",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "4905:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1662,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4905:73:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1650,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "4895:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1663,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4895:84:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1649,
												"id": 1664,
												"nodeType": "Return",
												"src": "4888:91:9"
											}
										]
									},
									"id": 1666,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_buildDomainSeparator",
									"nameLocation": "4738:21:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1641,
												"mutability": "mutable",
												"name": "typeHash",
												"nameLocation": "4777:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1666,
												"src": "4769:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1640,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4769:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1643,
												"mutability": "mutable",
												"name": "nameHash",
												"nameLocation": "4803:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1666,
												"src": "4795:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1642,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4795:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1645,
												"mutability": "mutable",
												"name": "versionHash",
												"nameLocation": "4829:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 1666,
												"src": "4821:19:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1644,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4821:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4759:87:9"
									},
									"returnParameters": {
										"id": 1649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1648,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1666,
												"src": "4869:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1647,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4869:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4868:9:9"
									},
									"scope": 1683,
									"src": "4729:257:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1681,
										"nodeType": "Block",
										"src": "5697:79:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1676,
																"name": "_domainSeparatorV4",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1639,
																"src": "5736:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																	"typeString": "function () view returns (bytes32)"
																}
															},
															"id": 1677,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5736:20:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1678,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1669,
															"src": "5758:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1674,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1529,
															"src": "5714:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$1529_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 1675,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5720:15:9",
														"memberName": "toTypedDataHash",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1528,
														"src": "5714:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
														}
													},
													"id": 1679,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5714:55:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1673,
												"id": 1680,
												"nodeType": "Return",
												"src": "5707:62:9"
											}
										]
									},
									"documentation": {
										"id": 1667,
										"nodeType": "StructuredDocumentation",
										"src": "4992:614:9",
										"text": " @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"
									},
									"id": 1682,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_hashTypedDataV4",
									"nameLocation": "5620:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1669,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "5645:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1682,
												"src": "5637:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1668,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5637:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5636:20:9"
									},
									"returnParameters": {
										"id": 1673,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1672,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1682,
												"src": "5688:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1671,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5688:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5687:9:9"
									},
									"scope": 1683,
									"src": "5611:165:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1684,
							"src": "2567:3211:9",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "1376:4403:9"
				},
				"id": 9
			},
			"0x/@openzeppelin/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "0x/@openzeppelin/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							2548
						]
					},
					"id": 2549,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1685,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "1366:23:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1686,
								"nodeType": "StructuredDocumentation",
								"src": "1391:73:10",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 2548,
							"linearizedBaseContracts": [
								2548
							],
							"name": "Math",
							"nameLocation": "1473:4:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Math.Rounding",
									"id": 1690,
									"members": [
										{
											"id": 1687,
											"name": "Down",
											"nameLocation": "1508:4:10",
											"nodeType": "EnumValue",
											"src": "1508:4:10"
										},
										{
											"id": 1688,
											"name": "Up",
											"nameLocation": "1550:2:10",
											"nodeType": "EnumValue",
											"src": "1550:2:10"
										},
										{
											"id": 1689,
											"name": "Zero",
											"nameLocation": "1581:4:10",
											"nodeType": "EnumValue",
											"src": "1581:4:10"
										}
									],
									"name": "Rounding",
									"nameLocation": "1489:8:10",
									"nodeType": "EnumDefinition",
									"src": "1484:122:10"
								},
								{
									"body": {
										"id": 1707,
										"nodeType": "Block",
										"src": "1743:37:10",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1702,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1700,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1693,
															"src": "1760:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 1701,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1695,
															"src": "1764:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1760:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 1704,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1695,
														"src": "1772:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1705,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1760:13:10",
													"trueExpression": {
														"id": 1703,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1693,
														"src": "1768:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1699,
												"id": 1706,
												"nodeType": "Return",
												"src": "1753:20:10"
											}
										]
									},
									"documentation": {
										"id": 1691,
										"nodeType": "StructuredDocumentation",
										"src": "1612:59:10",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 1708,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "1685:3:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1693,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1697:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1708,
												"src": "1689:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1692,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1689:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1695,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1708:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1708,
												"src": "1700:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1694,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1700:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1688:22:10"
									},
									"returnParameters": {
										"id": 1699,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1698,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1708,
												"src": "1734:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1697,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1734:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1733:9:10"
									},
									"scope": 2548,
									"src": "1676:104:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1725,
										"nodeType": "Block",
										"src": "1918:37:10",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1720,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1718,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1711,
															"src": "1935:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 1719,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1713,
															"src": "1939:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1935:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 1722,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1713,
														"src": "1947:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1723,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1935:13:10",
													"trueExpression": {
														"id": 1721,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1711,
														"src": "1943:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1717,
												"id": 1724,
												"nodeType": "Return",
												"src": "1928:20:10"
											}
										]
									},
									"documentation": {
										"id": 1709,
										"nodeType": "StructuredDocumentation",
										"src": "1786:60:10",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 1726,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "1860:3:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1714,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1711,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1872:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1726,
												"src": "1864:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1710,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1864:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1713,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1883:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1726,
												"src": "1875:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1712,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1875:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1863:22:10"
									},
									"returnParameters": {
										"id": 1717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1716,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1726,
												"src": "1909:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1715,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1909:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1908:9:10"
									},
									"scope": 2548,
									"src": "1851:104:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1748,
										"nodeType": "Block",
										"src": "2139:82:10",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1746,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1738,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1736,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1729,
																	"src": "2194:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 1737,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1731,
																	"src": "2198:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2194:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1739,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2193:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1745,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1742,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1740,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1729,
																		"src": "2204:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 1741,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1731,
																		"src": "2208:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2204:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1743,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2203:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 1744,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2213:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "2203:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2193:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1735,
												"id": 1747,
												"nodeType": "Return",
												"src": "2186:28:10"
											}
										]
									},
									"documentation": {
										"id": 1727,
										"nodeType": "StructuredDocumentation",
										"src": "1961:102:10",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 1749,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "2077:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1732,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1729,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2093:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1749,
												"src": "2085:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1728,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2085:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1731,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2104:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1749,
												"src": "2096:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1730,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2096:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2084:22:10"
									},
									"returnParameters": {
										"id": 1735,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1734,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1749,
												"src": "2130:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1733,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2130:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2129:9:10"
									},
									"scope": 2548,
									"src": "2068:153:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1773,
										"nodeType": "Block",
										"src": "2491:123:10",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1761,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1759,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1752,
															"src": "2579:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 1760,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2584:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "2579:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1770,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1768,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1765,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1763,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1752,
																			"src": "2593:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 1764,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2597:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "2593:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1766,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2592:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1767,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1754,
																"src": "2602:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2592:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1769,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2606:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "2592:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1771,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2579:28:10",
													"trueExpression": {
														"hexValue": "30",
														"id": 1762,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2588:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1758,
												"id": 1772,
												"nodeType": "Return",
												"src": "2572:35:10"
											}
										]
									},
									"documentation": {
										"id": 1750,
										"nodeType": "StructuredDocumentation",
										"src": "2227:188:10",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."
									},
									"id": 1774,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "2429:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1755,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1752,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2445:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1774,
												"src": "2437:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1751,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2437:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1754,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2456:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1774,
												"src": "2448:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1753,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2448:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2436:22:10"
									},
									"returnParameters": {
										"id": 1758,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1757,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1774,
												"src": "2482:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1756,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2482:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2481:9:10"
									},
									"scope": 2548,
									"src": "2420:194:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1895,
										"nodeType": "Block",
										"src": "3058:3797:10",
										"statements": [
											{
												"id": 1894,
												"nodeType": "UncheckedBlock",
												"src": "3068:3781:10",
												"statements": [
													{
														"assignments": [
															1787
														],
														"declarations": [
															{
																"constant": false,
																"id": 1787,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "3397:5:10",
																"nodeType": "VariableDeclaration",
																"scope": 1894,
																"src": "3389:13:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1786,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3389:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1788,
														"nodeType": "VariableDeclarationStatement",
														"src": "3389:13:10"
													},
													{
														"assignments": [
															1790
														],
														"declarations": [
															{
																"constant": false,
																"id": 1790,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "3469:5:10",
																"nodeType": "VariableDeclaration",
																"scope": 1894,
																"src": "3461:13:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1789,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3461:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1791,
														"nodeType": "VariableDeclarationStatement",
														"src": "3461:13:10"
													},
													{
														"AST": {
															"nativeSrc": "3541:157:10",
															"nodeType": "YulBlock",
															"src": "3541:157:10",
															"statements": [
																{
																	"nativeSrc": "3559:30:10",
																	"nodeType": "YulVariableDeclaration",
																	"src": "3559:30:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "3576:1:10",
																				"nodeType": "YulIdentifier",
																				"src": "3576:1:10"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "3579:1:10",
																				"nodeType": "YulIdentifier",
																				"src": "3579:1:10"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "3586:1:10",
																						"nodeType": "YulLiteral",
																						"src": "3586:1:10",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "3582:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "3582:3:10"
																				},
																				"nativeSrc": "3582:6:10",
																				"nodeType": "YulFunctionCall",
																				"src": "3582:6:10"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "3569:6:10",
																			"nodeType": "YulIdentifier",
																			"src": "3569:6:10"
																		},
																		"nativeSrc": "3569:20:10",
																		"nodeType": "YulFunctionCall",
																		"src": "3569:20:10"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nativeSrc": "3563:2:10",
																			"nodeType": "YulTypedName",
																			"src": "3563:2:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "3606:18:10",
																	"nodeType": "YulAssignment",
																	"src": "3606:18:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "3619:1:10",
																				"nodeType": "YulIdentifier",
																				"src": "3619:1:10"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "3622:1:10",
																				"nodeType": "YulIdentifier",
																				"src": "3622:1:10"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nativeSrc": "3615:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "3615:3:10"
																		},
																		"nativeSrc": "3615:9:10",
																		"nodeType": "YulFunctionCall",
																		"src": "3615:9:10"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "3606:5:10",
																			"nodeType": "YulIdentifier",
																			"src": "3606:5:10"
																		}
																	]
																},
																{
																	"nativeSrc": "3641:43:10",
																	"nodeType": "YulAssignment",
																	"src": "3641:43:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "3658:2:10",
																						"nodeType": "YulIdentifier",
																						"src": "3658:2:10"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "3662:5:10",
																						"nodeType": "YulIdentifier",
																						"src": "3662:5:10"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "3654:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "3654:3:10"
																				},
																				"nativeSrc": "3654:14:10",
																				"nodeType": "YulFunctionCall",
																				"src": "3654:14:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "3673:2:10",
																						"nodeType": "YulIdentifier",
																						"src": "3673:2:10"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "3677:5:10",
																						"nodeType": "YulIdentifier",
																						"src": "3677:5:10"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "3670:2:10",
																					"nodeType": "YulIdentifier",
																					"src": "3670:2:10"
																				},
																				"nativeSrc": "3670:13:10",
																				"nodeType": "YulFunctionCall",
																				"src": "3670:13:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3650:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "3650:3:10"
																		},
																		"nativeSrc": "3650:34:10",
																		"nodeType": "YulFunctionCall",
																		"src": "3650:34:10"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "3641:5:10",
																			"nodeType": "YulIdentifier",
																			"src": "3641:5:10"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 1787,
																"isOffset": false,
																"isSlot": false,
																"src": "3606:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1787,
																"isOffset": false,
																"isSlot": false,
																"src": "3662:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1787,
																"isOffset": false,
																"isSlot": false,
																"src": "3677:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1790,
																"isOffset": false,
																"isSlot": false,
																"src": "3641:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1777,
																"isOffset": false,
																"isSlot": false,
																"src": "3576:1:10",
																"valueSize": 1
															},
															{
																"declaration": 1777,
																"isOffset": false,
																"isSlot": false,
																"src": "3619:1:10",
																"valueSize": 1
															},
															{
																"declaration": 1779,
																"isOffset": false,
																"isSlot": false,
																"src": "3579:1:10",
																"valueSize": 1
															},
															{
																"declaration": 1779,
																"isOffset": false,
																"isSlot": false,
																"src": "3622:1:10",
																"valueSize": 1
															}
														],
														"id": 1792,
														"nodeType": "InlineAssembly",
														"src": "3532:166:10"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1795,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1793,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1790,
																"src": "3779:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1794,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3788:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3779:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1801,
														"nodeType": "IfStatement",
														"src": "3775:75:10",
														"trueBody": {
															"id": 1800,
															"nodeType": "Block",
															"src": "3791:59:10",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1798,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1796,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1787,
																			"src": "3816:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 1797,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1781,
																			"src": "3824:11:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "3816:19:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 1785,
																	"id": 1799,
																	"nodeType": "Return",
																	"src": "3809:26:10"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1805,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1803,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1781,
																		"src": "3960:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"id": 1804,
																		"name": "prod1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1790,
																		"src": "3974:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3960:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																],
																"id": 1802,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "3952:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																	"typeString": "function (bool) pure"
																}
															},
															"id": 1806,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3952:28:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1807,
														"nodeType": "ExpressionStatement",
														"src": "3952:28:10"
													},
													{
														"assignments": [
															1809
														],
														"declarations": [
															{
																"constant": false,
																"id": 1809,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "4244:9:10",
																"nodeType": "VariableDeclaration",
																"scope": 1894,
																"src": "4236:17:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1808,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4236:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1810,
														"nodeType": "VariableDeclarationStatement",
														"src": "4236:17:10"
													},
													{
														"AST": {
															"nativeSrc": "4276:291:10",
															"nodeType": "YulBlock",
															"src": "4276:291:10",
															"statements": [
																{
																	"nativeSrc": "4345:38:10",
																	"nodeType": "YulAssignment",
																	"src": "4345:38:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "4365:1:10",
																				"nodeType": "YulIdentifier",
																				"src": "4365:1:10"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "4368:1:10",
																				"nodeType": "YulIdentifier",
																				"src": "4368:1:10"
																			},
																			{
																				"name": "denominator",
																				"nativeSrc": "4371:11:10",
																				"nodeType": "YulIdentifier",
																				"src": "4371:11:10"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "4358:6:10",
																			"nodeType": "YulIdentifier",
																			"src": "4358:6:10"
																		},
																		"nativeSrc": "4358:25:10",
																		"nodeType": "YulFunctionCall",
																		"src": "4358:25:10"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nativeSrc": "4345:9:10",
																			"nodeType": "YulIdentifier",
																			"src": "4345:9:10"
																		}
																	]
																},
																{
																	"nativeSrc": "4465:41:10",
																	"nodeType": "YulAssignment",
																	"src": "4465:41:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nativeSrc": "4478:5:10",
																				"nodeType": "YulIdentifier",
																				"src": "4478:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nativeSrc": "4488:9:10",
																						"nodeType": "YulIdentifier",
																						"src": "4488:9:10"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4499:5:10",
																						"nodeType": "YulIdentifier",
																						"src": "4499:5:10"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nativeSrc": "4485:2:10",
																					"nodeType": "YulIdentifier",
																					"src": "4485:2:10"
																				},
																				"nativeSrc": "4485:20:10",
																				"nodeType": "YulFunctionCall",
																				"src": "4485:20:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4474:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "4474:3:10"
																		},
																		"nativeSrc": "4474:32:10",
																		"nodeType": "YulFunctionCall",
																		"src": "4474:32:10"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "4465:5:10",
																			"nodeType": "YulIdentifier",
																			"src": "4465:5:10"
																		}
																	]
																},
																{
																	"nativeSrc": "4523:30:10",
																	"nodeType": "YulAssignment",
																	"src": "4523:30:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "4536:5:10",
																				"nodeType": "YulIdentifier",
																				"src": "4536:5:10"
																			},
																			{
																				"name": "remainder",
																				"nativeSrc": "4543:9:10",
																				"nodeType": "YulIdentifier",
																				"src": "4543:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4532:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "4532:3:10"
																		},
																		"nativeSrc": "4532:21:10",
																		"nodeType": "YulFunctionCall",
																		"src": "4532:21:10"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "4523:5:10",
																			"nodeType": "YulIdentifier",
																			"src": "4523:5:10"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 1781,
																"isOffset": false,
																"isSlot": false,
																"src": "4371:11:10",
																"valueSize": 1
															},
															{
																"declaration": 1787,
																"isOffset": false,
																"isSlot": false,
																"src": "4499:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1787,
																"isOffset": false,
																"isSlot": false,
																"src": "4523:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1787,
																"isOffset": false,
																"isSlot": false,
																"src": "4536:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1790,
																"isOffset": false,
																"isSlot": false,
																"src": "4465:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1790,
																"isOffset": false,
																"isSlot": false,
																"src": "4478:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1809,
																"isOffset": false,
																"isSlot": false,
																"src": "4345:9:10",
																"valueSize": 1
															},
															{
																"declaration": 1809,
																"isOffset": false,
																"isSlot": false,
																"src": "4488:9:10",
																"valueSize": 1
															},
															{
																"declaration": 1809,
																"isOffset": false,
																"isSlot": false,
																"src": "4543:9:10",
																"valueSize": 1
															},
															{
																"declaration": 1777,
																"isOffset": false,
																"isSlot": false,
																"src": "4365:1:10",
																"valueSize": 1
															},
															{
																"declaration": 1779,
																"isOffset": false,
																"isSlot": false,
																"src": "4368:1:10",
																"valueSize": 1
															}
														],
														"id": 1811,
														"nodeType": "InlineAssembly",
														"src": "4267:300:10"
													},
													{
														"assignments": [
															1813
														],
														"declarations": [
															{
																"constant": false,
																"id": 1813,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "4882:4:10",
																"nodeType": "VariableDeclaration",
																"scope": 1894,
																"src": "4874:12:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1812,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4874:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1821,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1820,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1814,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1781,
																"src": "4889:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1818,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1816,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "~",
																			"prefix": true,
																			"src": "4904:12:10",
																			"subExpression": {
																				"id": 1815,
																				"name": "denominator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1781,
																				"src": "4905:11:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 1817,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4919:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "4904:16:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1819,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4903:18:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4889:32:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4874:47:10"
													},
													{
														"AST": {
															"nativeSrc": "4944:362:10",
															"nodeType": "YulBlock",
															"src": "4944:362:10",
															"statements": [
																{
																	"nativeSrc": "5009:37:10",
																	"nodeType": "YulAssignment",
																	"src": "5009:37:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nativeSrc": "5028:11:10",
																				"nodeType": "YulIdentifier",
																				"src": "5028:11:10"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "5041:4:10",
																				"nodeType": "YulIdentifier",
																				"src": "5041:4:10"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "5024:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "5024:3:10"
																		},
																		"nativeSrc": "5024:22:10",
																		"nodeType": "YulFunctionCall",
																		"src": "5024:22:10"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nativeSrc": "5009:11:10",
																			"nodeType": "YulIdentifier",
																			"src": "5009:11:10"
																		}
																	]
																},
																{
																	"nativeSrc": "5113:25:10",
																	"nodeType": "YulAssignment",
																	"src": "5113:25:10",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "5126:5:10",
																				"nodeType": "YulIdentifier",
																				"src": "5126:5:10"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "5133:4:10",
																				"nodeType": "YulIdentifier",
																				"src": "5133:4:10"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "5122:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "5122:3:10"
																		},
																		"nativeSrc": "5122:16:10",
																		"nodeType": "YulFunctionCall",
																		"src": "5122:16:10"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "5113:5:10",
																			"nodeType": "YulIdentifier",
																			"src": "5113:5:10"
																		}
																	]
																},
																{
																	"nativeSrc": "5253:39:10",
																	"nodeType": "YulAssignment",
																	"src": "5253:39:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "5273:1:10",
																								"nodeType": "YulLiteral",
																								"src": "5273:1:10",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nativeSrc": "5276:4:10",
																								"nodeType": "YulIdentifier",
																								"src": "5276:4:10"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "5269:3:10",
																							"nodeType": "YulIdentifier",
																							"src": "5269:3:10"
																						},
																						"nativeSrc": "5269:12:10",
																						"nodeType": "YulFunctionCall",
																						"src": "5269:12:10"
																					},
																					{
																						"name": "twos",
																						"nativeSrc": "5283:4:10",
																						"nodeType": "YulIdentifier",
																						"src": "5283:4:10"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nativeSrc": "5265:3:10",
																					"nodeType": "YulIdentifier",
																					"src": "5265:3:10"
																				},
																				"nativeSrc": "5265:23:10",
																				"nodeType": "YulFunctionCall",
																				"src": "5265:23:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5290:1:10",
																				"nodeType": "YulLiteral",
																				"src": "5290:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5261:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "5261:3:10"
																		},
																		"nativeSrc": "5261:31:10",
																		"nodeType": "YulFunctionCall",
																		"src": "5261:31:10"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nativeSrc": "5253:4:10",
																			"nodeType": "YulIdentifier",
																			"src": "5253:4:10"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 1781,
																"isOffset": false,
																"isSlot": false,
																"src": "5009:11:10",
																"valueSize": 1
															},
															{
																"declaration": 1781,
																"isOffset": false,
																"isSlot": false,
																"src": "5028:11:10",
																"valueSize": 1
															},
															{
																"declaration": 1787,
																"isOffset": false,
																"isSlot": false,
																"src": "5113:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1787,
																"isOffset": false,
																"isSlot": false,
																"src": "5126:5:10",
																"valueSize": 1
															},
															{
																"declaration": 1813,
																"isOffset": false,
																"isSlot": false,
																"src": "5041:4:10",
																"valueSize": 1
															},
															{
																"declaration": 1813,
																"isOffset": false,
																"isSlot": false,
																"src": "5133:4:10",
																"valueSize": 1
															},
															{
																"declaration": 1813,
																"isOffset": false,
																"isSlot": false,
																"src": "5253:4:10",
																"valueSize": 1
															},
															{
																"declaration": 1813,
																"isOffset": false,
																"isSlot": false,
																"src": "5276:4:10",
																"valueSize": 1
															},
															{
																"declaration": 1813,
																"isOffset": false,
																"isSlot": false,
																"src": "5283:4:10",
																"valueSize": 1
															}
														],
														"id": 1822,
														"nodeType": "InlineAssembly",
														"src": "4935:371:10"
													},
													{
														"expression": {
															"id": 1827,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1823,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1787,
																"src": "5372:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1826,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1824,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1790,
																	"src": "5381:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1825,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1813,
																	"src": "5389:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5381:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5372:21:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1828,
														"nodeType": "ExpressionStatement",
														"src": "5372:21:10"
													},
													{
														"assignments": [
															1830
														],
														"declarations": [
															{
																"constant": false,
																"id": 1830,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "5719:7:10",
																"nodeType": "VariableDeclaration",
																"scope": 1894,
																"src": "5711:15:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1829,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5711:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1837,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1836,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1833,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 1831,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5730:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 1832,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1781,
																			"src": "5734:11:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5730:15:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1834,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5729:17:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 1835,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5749:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "5729:21:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "5711:39:10"
													},
													{
														"expression": {
															"id": 1844,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1838,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1830,
																"src": "5967:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1843,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1839,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5978:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1842,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1840,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1781,
																		"src": "5982:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1841,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1830,
																		"src": "5996:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5982:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5978:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5967:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1845,
														"nodeType": "ExpressionStatement",
														"src": "5967:36:10"
													},
													{
														"expression": {
															"id": 1852,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1846,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1830,
																"src": "6036:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1851,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1847,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6047:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1850,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1848,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1781,
																		"src": "6051:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1849,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1830,
																		"src": "6065:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6051:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6047:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6036:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1853,
														"nodeType": "ExpressionStatement",
														"src": "6036:36:10"
													},
													{
														"expression": {
															"id": 1860,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1854,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1830,
																"src": "6106:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1859,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1855,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6117:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1858,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1856,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1781,
																		"src": "6121:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1857,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1830,
																		"src": "6135:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6121:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6117:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6106:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1861,
														"nodeType": "ExpressionStatement",
														"src": "6106:36:10"
													},
													{
														"expression": {
															"id": 1868,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1862,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1830,
																"src": "6176:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1867,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1863,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6187:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1866,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1864,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1781,
																		"src": "6191:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1865,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1830,
																		"src": "6205:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6191:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6187:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6176:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1869,
														"nodeType": "ExpressionStatement",
														"src": "6176:36:10"
													},
													{
														"expression": {
															"id": 1876,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1870,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1830,
																"src": "6246:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1875,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1871,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6257:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1874,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1872,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1781,
																		"src": "6261:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1873,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1830,
																		"src": "6275:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6261:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6257:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6246:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1877,
														"nodeType": "ExpressionStatement",
														"src": "6246:36:10"
													},
													{
														"expression": {
															"id": 1884,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1878,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1830,
																"src": "6317:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1883,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1879,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6328:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1882,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1880,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1781,
																		"src": "6332:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1881,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1830,
																		"src": "6346:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6332:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6328:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6317:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1885,
														"nodeType": "ExpressionStatement",
														"src": "6317:36:10"
													},
													{
														"expression": {
															"id": 1890,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1886,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1784,
																"src": "6787:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1889,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1887,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1787,
																	"src": "6796:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1888,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1830,
																	"src": "6804:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6796:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6787:24:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1891,
														"nodeType": "ExpressionStatement",
														"src": "6787:24:10"
													},
													{
														"expression": {
															"id": 1892,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1784,
															"src": "6832:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1785,
														"id": 1893,
														"nodeType": "Return",
														"src": "6825:13:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1775,
										"nodeType": "StructuredDocumentation",
										"src": "2620:305:10",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."
									},
									"id": 1896,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "2939:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1782,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1777,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "2963:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1896,
												"src": "2955:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1776,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2955:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1779,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "2982:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1896,
												"src": "2974:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1778,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2974:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1781,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "3001:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1896,
												"src": "2993:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1780,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2993:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2945:73:10"
									},
									"returnParameters": {
										"id": 1785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1784,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "3050:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1896,
												"src": "3042:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1783,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3042:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3041:16:10"
									},
									"scope": 2548,
									"src": "2930:3925:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1939,
										"nodeType": "Block",
										"src": "7135:189:10",
										"statements": [
											{
												"assignments": [
													1912
												],
												"declarations": [
													{
														"constant": false,
														"id": 1912,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "7153:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 1939,
														"src": "7145:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1911,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7145:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1918,
												"initialValue": {
													"arguments": [
														{
															"id": 1914,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1899,
															"src": "7169:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1915,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1901,
															"src": "7172:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1916,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1903,
															"src": "7175:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1913,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1896,
															1940
														],
														"referencedDeclaration": 1896,
														"src": "7162:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1917,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7162:25:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7145:42:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1930,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_enum$_Rounding_$1690",
															"typeString": "enum Math.Rounding"
														},
														"id": 1922,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1919,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1906,
															"src": "7201:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$1690",
																"typeString": "enum Math.Rounding"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 1920,
																"name": "Rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1690,
																"src": "7213:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$1690_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1921,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7222:2:10",
															"memberName": "Up",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1688,
															"src": "7213:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$1690",
																"typeString": "enum Math.Rounding"
															}
														},
														"src": "7201:23:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1929,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 1924,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1899,
																	"src": "7235:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1925,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1901,
																	"src": "7238:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1926,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1903,
																	"src": "7241:11:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1923,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "7228:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1927,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7228:25:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1928,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7256:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "7228:29:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "7201:56:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1936,
												"nodeType": "IfStatement",
												"src": "7197:98:10",
												"trueBody": {
													"id": 1935,
													"nodeType": "Block",
													"src": "7259:36:10",
													"statements": [
														{
															"expression": {
																"id": 1933,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1931,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1912,
																	"src": "7273:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 1932,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7283:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7273:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1934,
															"nodeType": "ExpressionStatement",
															"src": "7273:11:10"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1937,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1912,
													"src": "7311:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1910,
												"id": 1938,
												"nodeType": "Return",
												"src": "7304:13:10"
											}
										]
									},
									"documentation": {
										"id": 1897,
										"nodeType": "StructuredDocumentation",
										"src": "6861:121:10",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 1940,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "6996:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1907,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1899,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "7020:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1940,
												"src": "7012:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1898,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7012:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1901,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "7039:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1940,
												"src": "7031:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1900,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7031:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1903,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "7058:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1940,
												"src": "7050:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1902,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7050:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1906,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "7088:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1940,
												"src": "7079:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1690",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1905,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1904,
														"name": "Rounding",
														"nameLocations": [
															"7079:8:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1690,
														"src": "7079:8:10"
													},
													"referencedDeclaration": 1690,
													"src": "7079:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1690",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7002:100:10"
									},
									"returnParameters": {
										"id": 1910,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1909,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1940,
												"src": "7126:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1908,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7126:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7125:9:10"
									},
									"scope": 2548,
									"src": "6987:337:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2051,
										"nodeType": "Block",
										"src": "7600:1585:10",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1950,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1948,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1943,
														"src": "7614:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1949,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7619:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7614:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1954,
												"nodeType": "IfStatement",
												"src": "7610:45:10",
												"trueBody": {
													"id": 1953,
													"nodeType": "Block",
													"src": "7622:33:10",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1951,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7643:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 1947,
															"id": 1952,
															"nodeType": "Return",
															"src": "7636:8:10"
														}
													]
												}
											},
											{
												"assignments": [
													1956
												],
												"declarations": [
													{
														"constant": false,
														"id": 1956,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8342:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 2051,
														"src": "8334:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1955,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8334:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1965,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1964,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 1957,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8351:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1962,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1959,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1943,
																			"src": "8362:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1958,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			2220,
																			2256
																		],
																		"referencedDeclaration": 2220,
																		"src": "8357:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1960,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8357:7:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1961,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8368:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8357:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1963,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "8356:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8351:19:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8334:36:10"
											},
											{
												"id": 2050,
												"nodeType": "UncheckedBlock",
												"src": "8771:408:10",
												"statements": [
													{
														"expression": {
															"id": 1975,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1966,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1956,
																"src": "8795:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1974,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1971,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1967,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1956,
																				"src": "8805:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1970,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1968,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1943,
																					"src": "8814:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1969,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1956,
																					"src": "8818:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8814:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8805:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1972,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "8804:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1973,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8829:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8804:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8795:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1976,
														"nodeType": "ExpressionStatement",
														"src": "8795:35:10"
													},
													{
														"expression": {
															"id": 1986,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1977,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1956,
																"src": "8844:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1985,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1982,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1978,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1956,
																				"src": "8854:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1981,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1979,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1943,
																					"src": "8863:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1980,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1956,
																					"src": "8867:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8863:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8854:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1983,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "8853:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1984,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8878:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8853:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8844:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1987,
														"nodeType": "ExpressionStatement",
														"src": "8844:35:10"
													},
													{
														"expression": {
															"id": 1997,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1988,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1956,
																"src": "8893:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1996,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1993,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1989,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1956,
																				"src": "8903:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1992,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1990,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1943,
																					"src": "8912:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1991,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1956,
																					"src": "8916:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8912:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8903:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1994,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "8902:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1995,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8927:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8902:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8893:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1998,
														"nodeType": "ExpressionStatement",
														"src": "8893:35:10"
													},
													{
														"expression": {
															"id": 2008,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1999,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1956,
																"src": "8942:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2007,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2004,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2000,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1956,
																				"src": "8952:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2003,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2001,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1943,
																					"src": "8961:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2002,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1956,
																					"src": "8965:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8961:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8952:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2005,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "8951:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2006,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8976:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8951:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8942:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2009,
														"nodeType": "ExpressionStatement",
														"src": "8942:35:10"
													},
													{
														"expression": {
															"id": 2019,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2010,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1956,
																"src": "8991:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2018,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2015,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2011,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1956,
																				"src": "9001:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2014,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2012,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1943,
																					"src": "9010:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2013,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1956,
																					"src": "9014:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9010:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9001:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2016,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9000:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2017,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9025:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9000:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8991:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2020,
														"nodeType": "ExpressionStatement",
														"src": "8991:35:10"
													},
													{
														"expression": {
															"id": 2030,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2021,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1956,
																"src": "9040:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2029,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2026,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2022,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1956,
																				"src": "9050:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2025,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2023,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1943,
																					"src": "9059:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2024,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1956,
																					"src": "9063:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9059:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9050:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2027,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9049:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2028,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9074:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9049:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9040:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2031,
														"nodeType": "ExpressionStatement",
														"src": "9040:35:10"
													},
													{
														"expression": {
															"id": 2041,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2032,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1956,
																"src": "9089:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2040,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2037,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2033,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1956,
																				"src": "9099:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2036,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2034,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1943,
																					"src": "9108:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2035,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1956,
																					"src": "9112:6:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9108:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9099:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2038,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9098:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2039,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9123:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9098:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9089:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2042,
														"nodeType": "ExpressionStatement",
														"src": "9089:35:10"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2044,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1956,
																	"src": "9149:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2047,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2045,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1943,
																		"src": "9157:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2046,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1956,
																		"src": "9161:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "9157:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2043,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1726,
																"src": "9145:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2048,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9145:23:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1947,
														"id": 2049,
														"nodeType": "Return",
														"src": "9138:30:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1941,
										"nodeType": "StructuredDocumentation",
										"src": "7330:208:10",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 2052,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "7552:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1944,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1943,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "7565:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2052,
												"src": "7557:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1942,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7557:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7556:11:10"
									},
									"returnParameters": {
										"id": 1947,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1946,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2052,
												"src": "7591:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1945,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7591:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7590:9:10"
									},
									"scope": 2548,
									"src": "7543:1642:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2087,
										"nodeType": "Block",
										"src": "9361:161:10",
										"statements": [
											{
												"id": 2086,
												"nodeType": "UncheckedBlock",
												"src": "9371:145:10",
												"statements": [
													{
														"assignments": [
															2064
														],
														"declarations": [
															{
																"constant": false,
																"id": 2064,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "9403:6:10",
																"nodeType": "VariableDeclaration",
																"scope": 2086,
																"src": "9395:14:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2063,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "9395:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2068,
														"initialValue": {
															"arguments": [
																{
																	"id": 2066,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2055,
																	"src": "9417:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2065,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2052,
																	2088
																],
																"referencedDeclaration": 2052,
																"src": "9412:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2067,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9412:7:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "9395:24:10"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2084,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2069,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2064,
																"src": "9440:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2079,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$1690",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 2073,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2070,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2058,
																					"src": "9450:8:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1690",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2071,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1690,
																						"src": "9462:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$1690_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 2072,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "9471:2:10",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1688,
																					"src": "9462:11:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1690",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "9450:23:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2078,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2076,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2074,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2064,
																						"src": "9477:6:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 2075,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2064,
																						"src": "9486:6:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "9477:15:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2077,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2055,
																					"src": "9495:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9477:19:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "9450:46:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2081,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9503:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2082,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "9450:54:10",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2080,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9499:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2083,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "9449:56:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "9440:65:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2062,
														"id": 2085,
														"nodeType": "Return",
														"src": "9433:72:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2053,
										"nodeType": "StructuredDocumentation",
										"src": "9191:89:10",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 2088,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "9294:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2059,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2055,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "9307:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2088,
												"src": "9299:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2054,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9299:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2058,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "9319:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2088,
												"src": "9310:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1690",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2057,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2056,
														"name": "Rounding",
														"nameLocations": [
															"9310:8:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1690,
														"src": "9310:8:10"
													},
													"referencedDeclaration": 1690,
													"src": "9310:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1690",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9298:30:10"
									},
									"returnParameters": {
										"id": 2062,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2061,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2088,
												"src": "9352:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2060,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9352:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9351:9:10"
									},
									"scope": 2548,
									"src": "9285:237:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2219,
										"nodeType": "Block",
										"src": "9707:922:10",
										"statements": [
											{
												"assignments": [
													2097
												],
												"declarations": [
													{
														"constant": false,
														"id": 2097,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9725:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 2219,
														"src": "9717:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2096,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9717:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2099,
												"initialValue": {
													"hexValue": "30",
													"id": 2098,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "9734:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9717:18:10"
											},
											{
												"id": 2216,
												"nodeType": "UncheckedBlock",
												"src": "9745:855:10",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2104,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2102,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2100,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2091,
																	"src": "9773:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2101,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9782:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "9773:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2103,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9788:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9773:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2114,
														"nodeType": "IfStatement",
														"src": "9769:99:10",
														"trueBody": {
															"id": 2113,
															"nodeType": "Block",
															"src": "9791:77:10",
															"statements": [
																{
																	"expression": {
																		"id": 2107,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2105,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2091,
																			"src": "9809:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2106,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9819:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "9809:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2108,
																	"nodeType": "ExpressionStatement",
																	"src": "9809:13:10"
																},
																{
																	"expression": {
																		"id": 2111,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2109,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2097,
																			"src": "9840:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2110,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9850:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "9840:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2112,
																	"nodeType": "ExpressionStatement",
																	"src": "9840:13:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2119,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2115,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2091,
																	"src": "9885:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2116,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9894:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "9885:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2118,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9899:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9885:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2129,
														"nodeType": "IfStatement",
														"src": "9881:96:10",
														"trueBody": {
															"id": 2128,
															"nodeType": "Block",
															"src": "9902:75:10",
															"statements": [
																{
																	"expression": {
																		"id": 2122,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2120,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2091,
																			"src": "9920:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2121,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9930:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "9920:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2123,
																	"nodeType": "ExpressionStatement",
																	"src": "9920:12:10"
																},
																{
																	"expression": {
																		"id": 2126,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2124,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2097,
																			"src": "9950:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2125,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9960:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "9950:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2127,
																	"nodeType": "ExpressionStatement",
																	"src": "9950:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2134,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2132,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2130,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2091,
																	"src": "9994:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2131,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10003:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "9994:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2133,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10008:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9994:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2144,
														"nodeType": "IfStatement",
														"src": "9990:96:10",
														"trueBody": {
															"id": 2143,
															"nodeType": "Block",
															"src": "10011:75:10",
															"statements": [
																{
																	"expression": {
																		"id": 2137,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2135,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2091,
																			"src": "10029:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2136,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10039:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "10029:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2138,
																	"nodeType": "ExpressionStatement",
																	"src": "10029:12:10"
																},
																{
																	"expression": {
																		"id": 2141,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2139,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2097,
																			"src": "10059:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2140,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10069:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "10059:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2142,
																	"nodeType": "ExpressionStatement",
																	"src": "10059:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2149,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2147,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2145,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2091,
																	"src": "10103:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2146,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10112:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "10103:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2148,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10117:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10103:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2159,
														"nodeType": "IfStatement",
														"src": "10099:96:10",
														"trueBody": {
															"id": 2158,
															"nodeType": "Block",
															"src": "10120:75:10",
															"statements": [
																{
																	"expression": {
																		"id": 2152,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2150,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2091,
																			"src": "10138:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2151,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10148:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "10138:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2153,
																	"nodeType": "ExpressionStatement",
																	"src": "10138:12:10"
																},
																{
																	"expression": {
																		"id": 2156,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2154,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2097,
																			"src": "10168:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2155,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10178:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "10168:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2157,
																	"nodeType": "ExpressionStatement",
																	"src": "10168:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2164,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2162,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2160,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2091,
																	"src": "10212:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2161,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10221:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "10212:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2163,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10225:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10212:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2174,
														"nodeType": "IfStatement",
														"src": "10208:93:10",
														"trueBody": {
															"id": 2173,
															"nodeType": "Block",
															"src": "10228:73:10",
															"statements": [
																{
																	"expression": {
																		"id": 2167,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2165,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2091,
																			"src": "10246:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2166,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10256:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "10246:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2168,
																	"nodeType": "ExpressionStatement",
																	"src": "10246:11:10"
																},
																{
																	"expression": {
																		"id": 2171,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2169,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2097,
																			"src": "10275:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2170,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10285:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "10275:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2172,
																	"nodeType": "ExpressionStatement",
																	"src": "10275:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2179,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2177,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2175,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2091,
																	"src": "10318:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2176,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10327:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "10318:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2178,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10331:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10318:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2189,
														"nodeType": "IfStatement",
														"src": "10314:93:10",
														"trueBody": {
															"id": 2188,
															"nodeType": "Block",
															"src": "10334:73:10",
															"statements": [
																{
																	"expression": {
																		"id": 2182,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2180,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2091,
																			"src": "10352:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2181,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10362:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "10352:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2183,
																	"nodeType": "ExpressionStatement",
																	"src": "10352:11:10"
																},
																{
																	"expression": {
																		"id": 2186,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2184,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2097,
																			"src": "10381:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2185,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10391:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "10381:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2187,
																	"nodeType": "ExpressionStatement",
																	"src": "10381:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2194,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2192,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2190,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2091,
																	"src": "10424:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2191,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10433:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "10424:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2193,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10437:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10424:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2204,
														"nodeType": "IfStatement",
														"src": "10420:93:10",
														"trueBody": {
															"id": 2203,
															"nodeType": "Block",
															"src": "10440:73:10",
															"statements": [
																{
																	"expression": {
																		"id": 2197,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2195,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2091,
																			"src": "10458:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2196,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10468:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "10458:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2198,
																	"nodeType": "ExpressionStatement",
																	"src": "10458:11:10"
																},
																{
																	"expression": {
																		"id": 2201,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2199,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2097,
																			"src": "10487:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2200,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10497:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "10487:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2202,
																	"nodeType": "ExpressionStatement",
																	"src": "10487:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2209,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2207,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2205,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2091,
																	"src": "10530:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2206,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10539:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10530:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2208,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10543:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10530:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2215,
														"nodeType": "IfStatement",
														"src": "10526:64:10",
														"trueBody": {
															"id": 2214,
															"nodeType": "Block",
															"src": "10546:44:10",
															"statements": [
																{
																	"expression": {
																		"id": 2212,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2210,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2097,
																			"src": "10564:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2211,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10574:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "10564:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2213,
																	"nodeType": "ExpressionStatement",
																	"src": "10564:11:10"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2217,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2097,
													"src": "10616:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2095,
												"id": 2218,
												"nodeType": "Return",
												"src": "10609:13:10"
											}
										]
									},
									"documentation": {
										"id": 2089,
										"nodeType": "StructuredDocumentation",
										"src": "9528:113:10",
										"text": " @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2220,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "9655:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2092,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2091,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9668:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2220,
												"src": "9660:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2090,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9660:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9659:15:10"
									},
									"returnParameters": {
										"id": 2095,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2094,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2220,
												"src": "9698:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2093,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9698:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9697:9:10"
									},
									"scope": 2548,
									"src": "9646:983:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2255,
										"nodeType": "Block",
										"src": "10862:165:10",
										"statements": [
											{
												"id": 2254,
												"nodeType": "UncheckedBlock",
												"src": "10872:149:10",
												"statements": [
													{
														"assignments": [
															2232
														],
														"declarations": [
															{
																"constant": false,
																"id": 2232,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "10904:6:10",
																"nodeType": "VariableDeclaration",
																"scope": 2254,
																"src": "10896:14:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2231,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "10896:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2236,
														"initialValue": {
															"arguments": [
																{
																	"id": 2234,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2223,
																	"src": "10918:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2233,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2220,
																	2256
																],
																"referencedDeclaration": 2220,
																"src": "10913:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2235,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10913:11:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "10896:28:10"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2252,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2237,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2232,
																"src": "10945:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2247,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$1690",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 2241,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2238,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2226,
																					"src": "10955:8:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1690",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2239,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1690,
																						"src": "10967:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$1690_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 2240,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "10976:2:10",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1688,
																					"src": "10967:11:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1690",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "10955:23:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2246,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2244,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 2242,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "10982:1:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 2243,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2232,
																						"src": "10987:6:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "10982:11:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2245,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2223,
																					"src": "10996:5:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10982:19:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "10955:46:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2249,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11008:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2250,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "10955:54:10",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2248,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11004:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2251,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "10954:56:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "10945:65:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2230,
														"id": 2253,
														"nodeType": "Return",
														"src": "10938:72:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2221,
										"nodeType": "StructuredDocumentation",
										"src": "10635:142:10",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2256,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "10791:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2223,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10804:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2256,
												"src": "10796:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2222,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10796:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2226,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10820:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2256,
												"src": "10811:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1690",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2225,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2224,
														"name": "Rounding",
														"nameLocations": [
															"10811:8:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1690,
														"src": "10811:8:10"
													},
													"referencedDeclaration": 1690,
													"src": "10811:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1690",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10795:34:10"
									},
									"returnParameters": {
										"id": 2230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2229,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2256,
												"src": "10853:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2228,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10853:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10852:9:10"
									},
									"scope": 2548,
									"src": "10782:245:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2384,
										"nodeType": "Block",
										"src": "11214:828:10",
										"statements": [
											{
												"assignments": [
													2265
												],
												"declarations": [
													{
														"constant": false,
														"id": 2265,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "11232:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 2384,
														"src": "11224:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2264,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11224:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2267,
												"initialValue": {
													"hexValue": "30",
													"id": 2266,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "11241:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11224:18:10"
											},
											{
												"id": 2381,
												"nodeType": "UncheckedBlock",
												"src": "11252:761:10",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2272,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2268,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2259,
																"src": "11280:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 2271,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2269,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11289:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2270,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11293:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "11289:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "11280:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2284,
														"nodeType": "IfStatement",
														"src": "11276:99:10",
														"trueBody": {
															"id": 2283,
															"nodeType": "Block",
															"src": "11297:78:10",
															"statements": [
																{
																	"expression": {
																		"id": 2277,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2273,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2259,
																			"src": "11315:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 2276,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2274,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11324:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 2275,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11328:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "11324:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "11315:15:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2278,
																	"nodeType": "ExpressionStatement",
																	"src": "11315:15:10"
																},
																{
																	"expression": {
																		"id": 2281,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2279,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2265,
																			"src": "11348:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2280,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11358:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11348:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2282,
																	"nodeType": "ExpressionStatement",
																	"src": "11348:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2289,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2285,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2259,
																"src": "11392:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 2288,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2286,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11401:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2287,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11405:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11401:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "11392:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2301,
														"nodeType": "IfStatement",
														"src": "11388:99:10",
														"trueBody": {
															"id": 2300,
															"nodeType": "Block",
															"src": "11409:78:10",
															"statements": [
																{
																	"expression": {
																		"id": 2294,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2290,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2259,
																			"src": "11427:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 2293,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2291,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11436:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 2292,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11440:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "11436:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "11427:15:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2295,
																	"nodeType": "ExpressionStatement",
																	"src": "11427:15:10"
																},
																{
																	"expression": {
																		"id": 2298,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2296,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2265,
																			"src": "11460:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2297,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11470:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11460:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2299,
																	"nodeType": "ExpressionStatement",
																	"src": "11460:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2306,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2302,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2259,
																"src": "11504:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 2305,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2303,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11513:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2304,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11517:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11513:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "11504:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2318,
														"nodeType": "IfStatement",
														"src": "11500:99:10",
														"trueBody": {
															"id": 2317,
															"nodeType": "Block",
															"src": "11521:78:10",
															"statements": [
																{
																	"expression": {
																		"id": 2311,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2307,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2259,
																			"src": "11539:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 2310,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2308,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11548:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 2309,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11552:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "11548:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "11539:15:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2312,
																	"nodeType": "ExpressionStatement",
																	"src": "11539:15:10"
																},
																{
																	"expression": {
																		"id": 2315,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2313,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2265,
																			"src": "11572:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2314,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11582:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11572:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2316,
																	"nodeType": "ExpressionStatement",
																	"src": "11572:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2323,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2319,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2259,
																"src": "11616:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 2322,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2320,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11625:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2321,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11629:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "11625:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "11616:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2335,
														"nodeType": "IfStatement",
														"src": "11612:96:10",
														"trueBody": {
															"id": 2334,
															"nodeType": "Block",
															"src": "11632:76:10",
															"statements": [
																{
																	"expression": {
																		"id": 2328,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2324,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2259,
																			"src": "11650:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 2327,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2325,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11659:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 2326,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11663:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "11659:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "11650:14:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2329,
																	"nodeType": "ExpressionStatement",
																	"src": "11650:14:10"
																},
																{
																	"expression": {
																		"id": 2332,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2330,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2265,
																			"src": "11682:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2331,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11692:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11682:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2333,
																	"nodeType": "ExpressionStatement",
																	"src": "11682:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2340,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2336,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2259,
																"src": "11725:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 2339,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2337,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11734:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2338,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11738:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "11734:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "11725:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2352,
														"nodeType": "IfStatement",
														"src": "11721:96:10",
														"trueBody": {
															"id": 2351,
															"nodeType": "Block",
															"src": "11741:76:10",
															"statements": [
																{
																	"expression": {
																		"id": 2345,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2341,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2259,
																			"src": "11759:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 2344,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2342,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11768:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 2343,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11772:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "11768:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "11759:14:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2346,
																	"nodeType": "ExpressionStatement",
																	"src": "11759:14:10"
																},
																{
																	"expression": {
																		"id": 2349,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2347,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2265,
																			"src": "11791:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2348,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11801:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11791:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2350,
																	"nodeType": "ExpressionStatement",
																	"src": "11791:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2357,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2353,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2259,
																"src": "11834:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 2356,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2354,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11843:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2355,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11847:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "11843:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "11834:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2369,
														"nodeType": "IfStatement",
														"src": "11830:96:10",
														"trueBody": {
															"id": 2368,
															"nodeType": "Block",
															"src": "11850:76:10",
															"statements": [
																{
																	"expression": {
																		"id": 2362,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2358,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2259,
																			"src": "11868:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 2361,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2359,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11877:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 2360,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11881:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "11877:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "11868:14:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2363,
																	"nodeType": "ExpressionStatement",
																	"src": "11868:14:10"
																},
																{
																	"expression": {
																		"id": 2366,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2364,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2265,
																			"src": "11900:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2365,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11910:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11900:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2367,
																	"nodeType": "ExpressionStatement",
																	"src": "11900:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2374,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2370,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2259,
																"src": "11943:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 2373,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2371,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11952:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2372,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11956:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "11952:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "11943:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2380,
														"nodeType": "IfStatement",
														"src": "11939:64:10",
														"trueBody": {
															"id": 2379,
															"nodeType": "Block",
															"src": "11959:44:10",
															"statements": [
																{
																	"expression": {
																		"id": 2377,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2375,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2265,
																			"src": "11977:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2376,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11987:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "11977:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2378,
																	"nodeType": "ExpressionStatement",
																	"src": "11977:11:10"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2382,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2265,
													"src": "12029:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2263,
												"id": 2383,
												"nodeType": "Return",
												"src": "12022:13:10"
											}
										]
									},
									"documentation": {
										"id": 2257,
										"nodeType": "StructuredDocumentation",
										"src": "11033:114:10",
										"text": " @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2385,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "11161:5:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2259,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11175:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2385,
												"src": "11167:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2258,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11167:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11166:15:10"
									},
									"returnParameters": {
										"id": 2263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2262,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2385,
												"src": "11205:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11205:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11204:9:10"
									},
									"scope": 2548,
									"src": "11152:890:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2420,
										"nodeType": "Block",
										"src": "12277:165:10",
										"statements": [
											{
												"id": 2419,
												"nodeType": "UncheckedBlock",
												"src": "12287:149:10",
												"statements": [
													{
														"assignments": [
															2397
														],
														"declarations": [
															{
																"constant": false,
																"id": 2397,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "12319:6:10",
																"nodeType": "VariableDeclaration",
																"scope": 2419,
																"src": "12311:14:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2396,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12311:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2401,
														"initialValue": {
															"arguments": [
																{
																	"id": 2399,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2388,
																	"src": "12334:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2398,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2385,
																	2421
																],
																"referencedDeclaration": 2385,
																"src": "12328:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2400,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12328:12:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12311:29:10"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2417,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2402,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2397,
																"src": "12361:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2412,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$1690",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 2406,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2403,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2391,
																					"src": "12371:8:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1690",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2404,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1690,
																						"src": "12383:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$1690_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 2405,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "12392:2:10",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1688,
																					"src": "12383:11:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1690",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "12371:23:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2411,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2409,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 2407,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12398:2:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 2408,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2397,
																						"src": "12402:6:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12398:10:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2410,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2388,
																					"src": "12411:5:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12398:18:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12371:45:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2414,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12423:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2415,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12371:53:10",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2413,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12419:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2416,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12370:55:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "12361:64:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2395,
														"id": 2418,
														"nodeType": "Return",
														"src": "12354:71:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2386,
										"nodeType": "StructuredDocumentation",
										"src": "12048:143:10",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2421,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "12205:5:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2388,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12219:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2421,
												"src": "12211:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2387,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12211:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2391,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "12235:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2421,
												"src": "12226:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1690",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2390,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2389,
														"name": "Rounding",
														"nameLocations": [
															"12226:8:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1690,
														"src": "12226:8:10"
													},
													"referencedDeclaration": 1690,
													"src": "12226:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1690",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12210:34:10"
									},
									"returnParameters": {
										"id": 2395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2394,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2421,
												"src": "12268:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2393,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12268:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12267:9:10"
									},
									"scope": 2548,
									"src": "12196:246:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2507,
										"nodeType": "Block",
										"src": "12756:600:10",
										"statements": [
											{
												"assignments": [
													2430
												],
												"declarations": [
													{
														"constant": false,
														"id": 2430,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "12774:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 2507,
														"src": "12766:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2429,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12766:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2432,
												"initialValue": {
													"hexValue": "30",
													"id": 2431,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12783:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12766:18:10"
											},
											{
												"id": 2504,
												"nodeType": "UncheckedBlock",
												"src": "12794:533:10",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2437,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2435,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2433,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2424,
																	"src": "12822:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2434,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12831:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "12822:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2436,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12837:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12822:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2447,
														"nodeType": "IfStatement",
														"src": "12818:98:10",
														"trueBody": {
															"id": 2446,
															"nodeType": "Block",
															"src": "12840:76:10",
															"statements": [
																{
																	"expression": {
																		"id": 2440,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2438,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2424,
																			"src": "12858:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2439,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12868:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "12858:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2441,
																	"nodeType": "ExpressionStatement",
																	"src": "12858:13:10"
																},
																{
																	"expression": {
																		"id": 2444,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2442,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2430,
																			"src": "12889:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2443,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12899:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "12889:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2445,
																	"nodeType": "ExpressionStatement",
																	"src": "12889:12:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2452,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2450,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2448,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2424,
																	"src": "12933:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2449,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12942:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "12933:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2451,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12947:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12933:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2462,
														"nodeType": "IfStatement",
														"src": "12929:95:10",
														"trueBody": {
															"id": 2461,
															"nodeType": "Block",
															"src": "12950:74:10",
															"statements": [
																{
																	"expression": {
																		"id": 2455,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2453,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2424,
																			"src": "12968:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2454,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12978:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "12968:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2456,
																	"nodeType": "ExpressionStatement",
																	"src": "12968:12:10"
																},
																{
																	"expression": {
																		"id": 2459,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2457,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2430,
																			"src": "12998:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2458,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13008:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "12998:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2460,
																	"nodeType": "ExpressionStatement",
																	"src": "12998:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2467,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2465,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2463,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2424,
																	"src": "13041:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2464,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13050:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "13041:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2466,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13055:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "13041:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2477,
														"nodeType": "IfStatement",
														"src": "13037:95:10",
														"trueBody": {
															"id": 2476,
															"nodeType": "Block",
															"src": "13058:74:10",
															"statements": [
																{
																	"expression": {
																		"id": 2470,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2468,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2424,
																			"src": "13076:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2469,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13086:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "13076:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2471,
																	"nodeType": "ExpressionStatement",
																	"src": "13076:12:10"
																},
																{
																	"expression": {
																		"id": 2474,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2472,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2430,
																			"src": "13106:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2473,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13116:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "13106:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2475,
																	"nodeType": "ExpressionStatement",
																	"src": "13106:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2482,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2480,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2478,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2424,
																	"src": "13149:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2479,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13158:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "13149:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2481,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13163:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "13149:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2492,
														"nodeType": "IfStatement",
														"src": "13145:95:10",
														"trueBody": {
															"id": 2491,
															"nodeType": "Block",
															"src": "13166:74:10",
															"statements": [
																{
																	"expression": {
																		"id": 2485,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2483,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2424,
																			"src": "13184:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2484,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13194:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "13184:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2486,
																	"nodeType": "ExpressionStatement",
																	"src": "13184:12:10"
																},
																{
																	"expression": {
																		"id": 2489,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2487,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2430,
																			"src": "13214:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2488,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13224:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "13214:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2490,
																	"nodeType": "ExpressionStatement",
																	"src": "13214:11:10"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2497,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2495,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2493,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2424,
																	"src": "13257:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2494,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13266:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "13257:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2496,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13270:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "13257:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2503,
														"nodeType": "IfStatement",
														"src": "13253:64:10",
														"trueBody": {
															"id": 2502,
															"nodeType": "Block",
															"src": "13273:44:10",
															"statements": [
																{
																	"expression": {
																		"id": 2500,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2498,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2430,
																			"src": "13291:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2499,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13301:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "13291:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2501,
																	"nodeType": "ExpressionStatement",
																	"src": "13291:11:10"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2505,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2430,
													"src": "13343:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2428,
												"id": 2506,
												"nodeType": "Return",
												"src": "13336:13:10"
											}
										]
									},
									"documentation": {
										"id": 2422,
										"nodeType": "StructuredDocumentation",
										"src": "12448:240:10",
										"text": " @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 2508,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "12702:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2425,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2424,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12717:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2508,
												"src": "12709:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2423,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12709:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12708:15:10"
									},
									"returnParameters": {
										"id": 2428,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2427,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2508,
												"src": "12747:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2426,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12747:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12746:9:10"
									},
									"scope": 2548,
									"src": "12693:663:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2546,
										"nodeType": "Block",
										"src": "13592:173:10",
										"statements": [
											{
												"id": 2545,
												"nodeType": "UncheckedBlock",
												"src": "13602:157:10",
												"statements": [
													{
														"assignments": [
															2520
														],
														"declarations": [
															{
																"constant": false,
																"id": 2520,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "13634:6:10",
																"nodeType": "VariableDeclaration",
																"scope": 2545,
																"src": "13626:14:10",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2519,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "13626:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2524,
														"initialValue": {
															"arguments": [
																{
																	"id": 2522,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2511,
																	"src": "13650:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2521,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2508,
																	2547
																],
																"referencedDeclaration": 2508,
																"src": "13643:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2523,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13643:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "13626:30:10"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2543,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2525,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2520,
																"src": "13677:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2538,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$1690",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 2529,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2526,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2514,
																					"src": "13687:8:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1690",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 2527,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1690,
																						"src": "13699:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$1690_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 2528,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "13708:2:10",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1688,
																					"src": "13699:11:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$1690",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "13687:23:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2537,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2535,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 2530,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "13714:1:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 2533,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 2531,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2520,
																									"src": "13720:6:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"hexValue": "38",
																									"id": 2532,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "13729:1:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_8_by_1",
																										"typeString": "int_const 8"
																									},
																									"value": "8"
																								},
																								"src": "13720:10:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 2534,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "13719:12:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "13714:17:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2536,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2511,
																					"src": "13734:5:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "13714:25:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "13687:52:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2540,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13746:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2541,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "13687:60:10",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2539,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13742:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2542,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "13686:62:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "13677:71:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2518,
														"id": 2544,
														"nodeType": "Return",
														"src": "13670:78:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2509,
										"nodeType": "StructuredDocumentation",
										"src": "13362:143:10",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2547,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "13519:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2515,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2511,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13534:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2547,
												"src": "13526:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2510,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13526:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2514,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "13550:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2547,
												"src": "13541:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1690",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2513,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2512,
														"name": "Rounding",
														"nameLocations": [
															"13541:8:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1690,
														"src": "13541:8:10"
													},
													"referencedDeclaration": 1690,
													"src": "13541:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1690",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13525:34:10"
									},
									"returnParameters": {
										"id": 2518,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2517,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2547,
												"src": "13583:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2516,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13583:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13582:9:10"
									},
									"scope": 2548,
									"src": "13510:255:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2549,
							"src": "1465:12302:10",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "1366:12402:10"
				},
				"id": 10
			}
		}
	}
}